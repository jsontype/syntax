[모듈 취약점 해결하기]

1. 취약점(Vulnerability)이란?  
    오래된 버전의 라이브러리(npm outdated로 확인 가능)를 사용하고 있다던지 등의 여러가지 이유로
    프로젝트가 의존하고 있는 패키지가 보안에 취약할 수 있다. 이를 취약점이라고 한다.

1. npm audit
    프로젝트 root 경로에서 npm audit를 입력하면 프로젝트에서 사용하고 있는 모듈의 취약점에 대해서 알려준다.
    npm i로 설치했을 때도 자동으로 npm audit가 실행된다.

1. npm audit fix
    취약점을 가진 종속성에 대해 호환되는 버전으로 자동으로 업데이트를 해준다. 단, minor에 한해서이다.
    * npm audit fix --force는 major를 수정하는 것도 포함하는데, 이는 기존에 사용하던 라이브러리의 API가 호환이 안 될 수도 있으니 사용하지 않는 편이 좋다.

1. ★ npm audit fix으로 해결되지 않는 취약점 해결 알고리즘
    1. $ npm audit fix 후에 나오는 로그들을 확인한다. 그러면 severity가 나오는데 high는 must-have이고, moderate는 nice-to-have라고 보면 된다.
    2. $ npm dedupe을 한 뒤 다시 $ npm audit fix를 해서 취약성이 없어졌는지 확인한다. 여전히 문제가 있으면 3단계로 간다. 없어졌으면 5단계로 넘어간다.
    3. 취약점을 해결하고 싶은 의존 라이브러리들을 선정해서, 하나씩 $ npm ls library명을 친다. 
        그러면 해당 라이브러리를 의존하고 있는 타 라이브러리들을 모두 보여주고, 가끔 수정이 필요한 버전 범위가 나오기도 한다.
    4. package-lock.json에 들어가, 해당 라이브러리가 타 라이브러리들과의 호환성에 문제가 없는 전제하에, 취약점도 해결된 버전(or 그냥 latest 버전)을 찾아서 바꿔준다.
        예를 들면 "glob-parent": "^5.1.2"를 모두 "glob-parent": "^6.0.2"로 바꿔준다.
        latest 버전을 알아내고 수정하는 방법은, 아래와 같은 방식을 사용한다. (귀찮으면 구글 검색해도 된다. 근데 그러다 잘못된 정보를 넣을 수도 있기 때문에 주의.)
            $ npm install -g npm-check-updates : ncu를 사용하기 위해 환경변수에 npm-check-updates를 설치한다.
            $ ncu : 업그레이드 가능 버전이 나오는데 이 중에서 취약점이 있는 모듈의 버전을 확인한다. 
            (ncu -u를 하면 전체 라이브러리를 다 latest로 업그레이드 해버리므로, 꼬일 수 있으니 실무에서는 주의)
            $ package-lock.json에서 해당 모듈을 찾아 ncu 리스트상의 버전으로 수정한다.
        package-lock.json에서 버전을 변경할 때의 문법은 다음과 같다. 예시의 1.2.3 버전은 semVer 방식으로 나열한 것이다.
            ^1.2.3 : "1.1 버전과 호환가능" Major를 증가시키지 않고 모든 향후 버전으로 업데이트함 (1.2.3에서 <2.0.0까지의 릴리즈 사용)
            ~1.2.3 : "대략적으로 1.1 버전과 동일함" Minor 버전을 증가시키지 않고 모든 향후 버전으로 업데이트함 (1.2.3에서 <1.2.0까지의 릴리즈 사용)
            1.2.3 : 정확히 1.2.3 버전과 일치해야한다.
            >1.2.3 : 1.2.3 버전보다 커야 한다.
            >=1.2.3 : 1.2.3 버전보다 같거나 커야 한다.
            <1.2.3 : 1.2.3 버전보다 작아야 한다.
            <=1.2.3 : 1.2.3 버전보다 작거나 같아야 한다.
            1.2.x : 1.2.0부터 1.2.9사이
            * : 모든 버전과 일치
            latest : 항상 최신 릴리즈로 업데이트 한다.
    5. node_modules 폴더를 지워버린다.
    6. $ npm i를 재실행한다.
    7. $ npm audit fix로 취약점이 모두 없어졌는지 다시 확인한다. 아니라면 1로 롤백한다.
    8. 취약점이 없어졌다면 $ npm test, $ npm run lint로 문제가 없는 지 확인한다.
