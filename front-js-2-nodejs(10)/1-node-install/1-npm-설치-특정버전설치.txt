[NodeJS, npm을 설치하는 방법]

1. NodeJS 설치방법
    nodejs.org/ko/ 에서 os에 맞는 버전을 다운로드
    설치확인 : 터미널에서 node -v, npm -v 로 버전확인. (npm은 node를 설치하면 자동으로 같이 설치됨)
    Node로 js파일 실행하기 : 1.js를 만든뒤, 터미널에서 node 1.js를 실행해본다.

1. Runtime이란?
    프로그래밍 언어가 구동되는 환경이다.
    
1. Node란?
    Node의 정의는 크게 2가지로 나눌 수 있다.
        서버: 네트워크를 통해 클라이언트에 정보나 서비스를 제공하는 컴퓨터 또는 프로그램을 말한다.
        자바스크립트 런타임: 자바스크립트 프로그램을 컴퓨터에서 실행할 수 있게 하는 환경을 말한다.
    NodeJS에서의 Node는 Chrome V8 JavaScript 엔진으로 빌드된 JavaScript 런타임을 의미한다. 
    또, NodeJS를 설치하면, npm은 자동으로 함께 설치된다.

1. npm이란?
    npm이란, 노드에서 제공하는 Node Package Manager이다.
    Node Package란 Node에서 호출한 모듈들의 모음을 말한다.
        모듈은 프론트 앱에 설치되는 라이브러리나 프레임워크를 총칭한다.
            * 함수가 여러개 모여 모듈이 되고, 모듈이 여러개 모여 패키지를 이룬다.
            * 모듈은 모여서 패키지를 구성한다는 측면에서 보면 클래스와 같아 보이지만, 다음과 같은 차이점이 있다.
                모듈은 보통 다운받은 파일을 프로그램에 포함시켜 놓고 자유롭게 사용하며, 내부를 변경할 수 없다.
                클래스는 그 목적에 맞게 각 프로세스에서 상속하여 사용하고, 상속받은 클래스는 내부를 자유롭게 변경할 수 있다.

    즉, npm이란 이러한 패키지를 관리하는 장소이자 도구, 방법인 것이다.
        주로 사용하는 npm에는 다음과 같은 명령어가 있다.
            $ npm init : npm 앱 시작
            $ npm i <모듈명> : 모듈 설치
            npm uninstall <모듈명> : 모듈 삭제
            npm update <모듈명> : 모듈 업데이트
            $ npm start : package.json 스크립트 안에서 "start" 안에 있는 것을 실행
            npm run dev : package.json 스크립트 안에서 "dev" 안에 있는 것을 실행
            $ npm i : 최초 깃 포크 또는 폴더를 변경하는 등의 변화가 있으면, 최초에 $ npm i를 통해 node_modules 안에 있어야할 것들을 받아주고 package.json을 갱신한다.
            npm audit fix : $ npm i 를 하고난 뒤, 발견된 취약점들을 고쳐준다. 보통 $ npm i 이후에 세트로 사용한다.



[특정버전 설치]

1. 현장에서는 특정 버전을 설치하라고 한다. 다음은 현장에서 요구하는 node와 npm의 특정버전을 설치하는 방법이다.

1. NodeJS 특정버전 설치 및 사용버전 설정
    brew update (필수)
    brew install node@16
    nvm ls
    nvm install 16.15.1
    brew 
    nvm use 16.15.1
    node -v (16.15.1 확인)
    brew unlink node@16 && brew link --force node@16 (nvm use를 안하더라도 다음부터는 터미널 열때의 기본값이 된다.)

1. npm 특정버전 설치 및 사용버전 설정
    $ npm i -g npm@4.6.1 : 설치와 동시에 자동으로 해당 npm 버전으로 지정됨. 버전을 바꾸고 싶으면 @ 뒤를 바꿔서 재설치하면 됨.
    * 업그레이드를 하고 싶은 경우는 npm update를 실행
    


[npm로 생성되는 파일, 폴더에 대한 설명]

1. npm 사용시작 : 빈 폴더에 npm init 후, npm i express를 해보자. 그리고 폴더 구조를 살펴보자.

1. package.json이란?
    package.json이란, 생성한 프로젝트의 메타정보와 이 프로젝트가 의존하고 있는(설치한) 모듈들에 대한 정보들을 json 형태로 모아놓은 파일이다.
    더 간단히 말해서, "패키지 정의 파일"이 곧 package.json 파일이다.
    package.json에 대한 자세한 설명 : https://programmingsummaries.tistory.com/385
    - package.json을 사용하지 않을 경우의 이점
        필요한 패키지들의 목록을 파일로 정리해놓고, 목록 파일을 이용하여 단 한번의 명령어(npm i)로 필요한 패키지들을 모두 설치할 수 있다. 
    - package.json을 사용하지 않을 경우의 문제점
        외부 모듈이 많아질 때 관리가 어려워지고, 
        패키지의 버전이 빈번히 업데이트 되기 때문에 썼던 버전을 따로 기록해두어야 하고, 
        새 프로젝트를 진행할 때마다 매번 npm 명령으로 설치해야하는 번거로움이 있다.

1. node_modules 폴더는 무엇인가?
    Vue 프로젝트를 생성하면, package.json 파일 뿐만 아니라, node_modules 디렉토리가 같이 생성된다.
    package.json에는 프로젝트가 의존하고 있는 모듈들에 대한 정보가 나와있고, 
    node_modules 디렉토리에는 package.json에 있는 모듈 뿐만 아니라, 
    package.json에 있는 모듈이 의존하고 있는 모듈 전부를 포함하고 있다. 
    그래서 node_modules 디렉토리안에는 정말 많은 모듈들이 들어가 있다. 
    npm으로 새로운 모듈(패키지)를 설치하게 되면, 
    package.json과 node_modules에 추가된다.
    참고로, git에 커밋할 때, node_modules을 제외해도 된다. 
    왜냐하면, node_modules가 없어도, package.json에 설치한 패키지들이 모두 있기 때문에, 
    npm install로 node_modules를 언제든지 설치가 가능하기 때문이다.

1. package-lock.json이란 무엇인가?
    package-lock.json은 이 package-lock.json이 생성되는 시점의 의존성 트리(node_modules)에 대한 정보를 가지고 있는 파일을 말한다. 
    의존성 트리는 package.json에 등록된 모듈과 그 모듈들이 의존하고 있는 모듈 전부를 포함하고 있기 때문에, 
    결국 package-lock.json도 이 모든 모듈들을 가지고 있다. 
    npm을 사용해서 node_modules나 package.json을 수정하게 되면, 
    package-lock.json 또한 자동으로 업데이트가 된다.

1. package-lock.json은 왜 사용하는가?
    package.json 파일에는 의존성 모듈(dependencies)의 version range가 사용된다.
    version range란, 특정 버전이 아닌, 버전의 범위를 의미한다.
    예를 들어, $ npm i express로 express를 설치하면,
    package.json에는 ‘^4.10.3’(Caret Ranges)과 같이 버전 범위가 추가된다.
    이 버전의 express가 추가된 package.json을 가지고 $ npm i를 실행하면, 현재는 4.10.3 버전이 설치되지만, 
    express의 버전이 업데이트된 상태로 publish가 된 후에, 동일한 package.json 파일로 $ npm i를 실행했을 경우, 
    원래 버전이 아닌, 새로 업데이트된 버전으로 express가 변경된다. 
    이럴 경우, 기존에 가지고 있던 node_modules(의존성 트리)에 있던 모듈의 버전과 충돌이 일어나, 오류를 발생시킬 수 있다.
    이 문제를 해결하기 위해, package-lock.json을 사용하는 것이다.
    package-lock.json은 node_modules(의존성 트리)에 대한 정보를 가지고 있는데, 
    package-lock.json이 업데이트가 되는 시점에 node_modules(의존성 트리)을 재생성할 수 있다.
    그래서, package-lock.json 파일이 있다면, 
    npm install로 package.json과 package-lock.json에 있는 모듈이 새로 업데이트되는 동시에, 
    node_modules(의존성 트리)가 새로 생성되어, 각 파일이 가지고 있는 모듈의 버전을 동일하게 맞출 수가 있게 된다.
    즉, package.json에 있는 모듈의 버전은 npm i을 수행하는 시점에 따라 달라진다. 
    이 말은, npm install을 수행하는 시점에 publish 되어있는 모듈의 버전으로 업데이트가 된다는 뜻이다.
    이렇게 되면, package.json과 package-lock.json에 있는 모듈이 같은 버전으로 업데이트가 되고,
    이때 package-lock.json 때문에 node_modules(의존성 트리)가 재생성되어, 
    3개의 파일에 있는 모듈이 모두 같은 버전으로 맞춰지게 되어 오류가 안나게 된다.
    이런 이유로, git에 커밋할 때, package.json 파일 뿐만 아니라, packge-lock.json 파일 또한 같이 커밋을 해야 한다.

1. package.json의 version에 대하여
    노드 패키지들의 버전은 세 자리로 되어있는데, 
    이는 SemVer 방식의 버전 넘버링을 따르기 때문이다.
    SemVer는 Semantic Versioning(유의적 버전)의 약어인데,
    이는 버전을 구성하는 세 자리가 모두 의미가 있다는 뜻이다.
    서비스를 개발하다 보면, 정말 많은 패키지들을 사용하게 되는데,
    이런 많은 패키지들이 서로 얽히다 보면 문제가 생길 수 있다.
    예를 들어, 어떤 패키지의 버전을 업그레이드 했는데, 그것을 사용하는 다른 패키지에서 에러가 발생한다면 문제가 된다.
    따라서 버전 번호를 어떻게 정하고, 올려야 하는지를 명시하는 규칙을 만들었는데, 이것이 바로 SemVer이다.
    버전은 세 자리로 구성되어 있다.
    major 버전: 하위 호환이 안될 정도로 패키지의 내용이 수정되었을 때 올린다.
        주 버전이 0이면, 초기 개발 중이라는 뜻이다.
        1부터는 정식 버전이다.
        만약, 1.7.1에서 2.0.0으로 올렸다면, 1.7.1 버전 패키지를 사용하고 있던 사람들이 2.0.0으로 업데이트 했을 때, 에러가 발생할 확률이 크다.
    minor 버전: 하위 호환이 되는 업데이트 시에 올린다.
        만약, 1.7.1에서 1.8.0으로 올렸다면, 1.7.1 사용자가 1.8.0으로 업데이트 했을 때, 아무 문제가 없어야 한다.
    patch 버전: 새로운 기능이 추가되었다기 보다는, 기존 기능에 문제가 있어 수정한 것을 내놓았을 때, patch 버전을 올린다.
        1.7.0에서 1.7.1으로 올렸다면, 업데이트 후 문제가 없어야 한다.
        새 버전을 배포한 후에는, 그 버전의 내용을 절대 수정하면 안된다.
        만약, 수정 사항이 생기면, major버전, minor 버전, patch버전 중 하나를 의미에 맞게 올려서 새로운 버전으로 배포해야 한다.
    버전의 숫자마다 의미가 부여되어 있기 때문에, 다른 패키지를 사용할 때도 버전만 보고 에러 발생 여부를 판단할 수 있다.
    만약, 의존하는 패키지의 major 버전이 업데이트 되었다면, 
    기존 코드와 호환이 되지 않을 확률이 크기 때문에, 미리 주의를 기울여야 한다. 
    만약, minor나 patch 버전으로 업데이트 되었다면, 상대적으로 안심하고 버전을 올리 수 있다.

1. package.json의 기호에 대하여
    package.json에는 버전 말고도, 다른 기호(‘^’, ‘~’ 등)들이 있다. 
    이런 기호들은 버전에는 포함되지 않지만, 
    설치 또는 업데이트 시 어떤 버전의 범위를 설치해야 하는지 알 수 있다.
    ^(캐럿): minor 버전까지만 설치 또는 업데이트한다.
        예를 들어, npm install express@^1.7.1 이라면, 1.7.1 <= 버전 < 2.0.0까지 설치가 되고, 2.0.0은 설치되지 않는다.
    ~(틸트): patch 버전까지만 설치 또는 업데이트한다.
        npm install express@~1.7.1 이라면, 1.7.1 <= 버전 < 1.8.0까지 설치가 된다.
    ~ 보다 ^가 많이 사용되는 이유는, minor 버전까지는 하위 호환이 되기 때문이다.
    npm semVer calculator에 방문하면, 패키지 별로 버전 표기법을 사용하여, 업데이터 버전 범위를 확인 가능하다.
    참고로, npm install 명령어의 패키명 뒤에 @버전을 추가하면 패키지 버전을 지정하여 설치할 수 있다.

1. npm i 명령어의 추가 옵션 : --save와 --dev
    npm install 모듈명 --save 을 입력하면, 설치하는 모듈을 package.json에 등록할 수 있다.(npm@5 부터는 --save는 기본옵션이다.)
    그래서, npm@5 부터는 --save 옵션을 사용하지 않더라도, 모든 install 명령은 package.json의 dependencies에 설치되어 관리된다.
    npm install 모듈명 --save --dev을 입력하면, 설치하는 모듈을 package.json에 등록할 수 있을 뿐만 아니라, 
    --dev 때문에, package.json 파일에서 devDepencies에 등록된다.
    devDepencies에서 관리하는 모듈들은 개발용 모듈들이고, 
    depencies에서 관리하는 모듈들은 배포용 모듈들이다.
    package.json에 명시된 모든 의존 패키지를 한번에 설치하기 위해서는, $ npm i 명령어를 사용하면 된다.
