[Git]

1. Git은 소프트웨어를 개발하는 기업의 핵심 자산인 소스코드를 효과적으로 관리할 수 있게 해주는 무료, 공개소프트웨어.
    Git : 버전 관리 시스템
      프로젝트를 진행하면서 소스 코드를 USB나 메일로 주고받는 건 엄청난 낭비 임과 동시에 보안성 위험이 있다.
      그렇기 때문에 프로젝트를 진행 함에 있어 형상 관리 도구를 사용 한다. 
      형상 관리 도구를 사용하면 변경을 쉽게 되돌릴 수 있다. 소스코드를 과거의 특정 시점으로 되돌리거나, 특정 시점의 변경 사항을 취소하거나, 두 버전의 소스 코드를 비교하는 등의 일이 가능하다.

    Github : 버전 관리 웹호스팅 서비스
      협업하고 있는 코드를 저장할 서버가 필요하다.
      버전 관리 시스템을 지원하는 웹호스팅 서비스의 기능을 통해, push, pull request같은 이벤트에 반응하여 자동으로 작업(배포 등)을 실행하게 할 수 있다.  

1. Mac 설치 방법
    $ brew install git

1. Windows 설치 방법
    윈도우의 경우 기존의 Git 자격증명이 있다면 삭제 : https://aroundlena.tistory.com/30
    gitforwindows.org 다운로드 후 설치



[git 맨 처음 설치하고 프로젝트에 PR을 날리기까지의 과정 - 초보자용]

1. git 설치 : 위 내용 참조

1. github 가입 : *(주의!) 메일은 gmail로 입력할 것

1. 프로젝트에 참가한다.
  리더가 프로젝트의 collaborators에 추가하면, gmail 확인해서 프로젝트 참가 승인을 누른다.

1. 이하의 내용을 기억해둔다. 
  usernamse
  email

1. vscode 터미널 git 등록한다.
  $ git config --global user.name [username]
  $ git config --global user.email [email]

1. 토큰 키 취득 : github의 우측 유저 아이콘 클릭 -> settings -> Developer settings -> Personal access tokens -> Tokens (Classic) -> Generate new token -> Generate new token (Classic) -> note에 admin 쓰고, Expiration 만기일 없음으로 하고, select scope 다 클릭 -> generate token 버튼 누름 -> 토큰 키 복사해서 어딘가에 저장

1. 참가할 github project의 clone을 딴다.
  $ git clone [git 주소]

1. 이슈를 확인하고, branch를 만든다.
  $ git checkout master // 로컬 master 브랜치로 이동
  $ git pull origin master // 최신 리모트 master 브랜치를 로컬 master 브랜치에 반영
  $ git checkout -b feat/1 // 최신이 된 로컬 master 브랜치로부터, feat/1 브랜치를 생성
  $ git branch // 현재 브랜치 위치 확인용

1. 작업

1. 테스트
  $ npm i // 설치는 처음에만 하거나, 새로운 라이브러리 npm i ...로 설치된 변경사항이 있을 때 또 하거나
  $ npm start

1. 이상 없으면 add commit push를 한다.
  $ git add .
  $ git commit -m "feat: 작업내용"
  $ git push origin feat/1

1. push가 처음일 때는 username과 password를 등록해야 할 것이다. (소스트리는 무조건 뜸)
  username? : [github 가입할 때의 username]
  password? : [토큰 키]

1. github에 가서, pull request를 날린다.



[git config 명령어 모음]
    $ git config --list : git 설정 확인 (q로 나감)
    $ git config --global -e : 에디트모드로 git 글로벌 설정 확인
    $ git config --global core.editor "code --wait" : vscode로 git 글로벌 설정 확인
    $ git config --global user.name "jsontyper" : 깃허브 유저네임 연동
    $ git config --global user.email "jsontyper@gmail.com" : 깃허브 이메일 연동
    $ git config user.name : 깃허브 유저네임 확인
    $ git config user.email : 깃허브 이메일 확인
    $ git config --global core.autocrlf true : 윈도우에서 개행 통일 설정
    $ git config --global core.autocrlf input : 맥에서 개행 통일 설정
        * 개행 문자열이 os마다 다른데(윈도우는 \r\n, 맥은 \n), git repository의 줄바꿈 문자열이 달라지는데, 이것을 수정하는 설정
    $ git config --global alias.st status : 커스텀 약어를 설정. 여기서는 git status 대신 git st로 써도 되게 만들어서 이후 편하게 쓸 수 있다.
    $ git config --h : config에 대한 명령어의 추가 옵션들을 보여줌. (push, pull 등 타 명령어에도 --h 보기 가능)
