[라이브러리의 EOL 대응]

1. 라이브러리의 EOL(End of Life)이란?
  라이브러리의 EOL은 라이브러리의 지원이 종료되는 시점을 의미한다.
  EOL 이후 더 이상 새로운 버전이 나오지 않으며, 보안 업데이트가 제공되지 않는다.
  EOL이 지난 라이브러리를 사용하는 것은 보안 취약점에 노출될 수 있다.
  * EOL과 비슷한 용어로, "EOS(End of support)"는 제품이 여전히 작동할 수 있지만 공식적인 지원이 중단된 상태를 의미한다.

1. 라이브러리의 EOL(End of Life) 확인 및 대응
  - Yarn v1 의 경우
    아래 명령어로 deprecated 되거나 EOL 상태의 라이브러리를 확인한다. (* 주의: 이 명령어는 v2/v3에서는 사용할 수 없음.)
    $ yarn outdated
    outdated된 라이브러리를, 아래 명령어를 통해 해당 버전으로 업그레이드한다.  
    $ yarn upgrade [package-name]@[version]
  - Yarn v2/v3 의 경우
    yarn v2/v3에서는 이 명령어를 사용하면, 상호작용적으로 업그레이드할 수 있다.
    $ yarn upgrade-interactive



[라이브러리의 Vulnerability 대응]

1. 라이브러리의 Vulnerability(취약점)이란?
  라이브러리의 취약점은 보안 약점을 의미한다.
  취약점이 있는 라이브러리는 해커의 공격 포인트가 될 수 있다.
  심각도(Severity)는 "Critical, High, Medium, Low" 나뉘어지는데, 어디까지 대응할지는 현장마다 다르다.
  일반적으로는 "Critical ~ High"까지 대응하는 현장들이 많다.
  또, 현장을 불문하고 "Critical"은 반드시 대응하는 것이 좋다.

1. CVSS(Common Vulnerability Scoring System)에 따른 심각도(Severity) 분류
  - Critical 심각도: 시스템 침투, 데이터 유출 등 심각한 피해를 야기. 즉각적 업그레이드 필요
  - High 심각도: 시스템 손상, 데이터 훼손 등의 피해를 야기. 가능한 빠른 업그레이드 필요
  - Medium 심각도: 보통 피해를 야기하지 않으나, 상황에 따라서 업그레이드가 필요할 수 있음
  - Low 심각도: 거의 피해를 야기하지 않으나, 지속적인 관찰이 필요

1. 라이브러리의 Vulnerability(취약점) 확인 및 대응 방법1 : 의존관계가 복잡한 실무적 환경에서의 대응
  - Yarn v1 의 경우
    아래 명령어로 프로젝트의 취약점을 확인한다.
    $ yarn audit
    취약점이 존재할 경우, 그 안에 "patched in" 항목을 확인한다.
    해당 항목에 취약점이 해결된 버전이 명시되어 있으므로, 아래 명령어를 통해 해당 버전으로 업그레이드한다.  
    $ yarn upgrade [package-name]@[version]
    취약점이 남아있다면, "patched in" 항목 밑에, "path"에 있는 녀석들도 업그레이드를 해야하는지 확인한다.
    확인 방법은 아래와 같다.
      방법1: $ yarn why [package-name]
      방법2: npm [라이브러리명]으로 크롬에 검색 → 릴리즈노트 클릭 → ctrl+f 후, [취약했던 라이브러리명]을 검색하여 맞는 버전을 확인하는 방법도 있다.
    $ yarn upgrade [package-name]@[version]
    업그레이드를 완료하면, 다시 아래 명령어로 프로젝트의 취약점을 확인한다.
    $ yarn audit
    이를 반복하면서, 취약점이 없어질 때까지 반복한다.
    잘 안될 경우, "node_module" 폴더와, "yarn.lock" 파일을 일단 한번 삭제한 뒤, 다시 "yarn install"을 해보는 것도 방법이다.
  - Yarn v2/v3 의 경우
    yarn v2/v3에서는 이 명령어를 사용하면, 상호작용적으로 업그레이드할 수 있다.
    $ yarn upgrade-interactive

1. 라이브러리의 Vulnerability(취약점) 확인 및 대응 방법2 : 의존관계가 복잡하지 않은 경우
  audit fix를 이용해서 자동으로 대응할 수도 있다. 단, 의존관계가 복잡할 경우, 이 명령어들이 해결을 보장하지는 않는 듯 하므로 주의하자.
  $ yarn audit fix --dry-run // 취약점을 수정하기 전에 어떤 작업이 수행될지 미리 확인한다.  
  아래 중 하나의 명령어를 이용해서, 취약점을 수정한다.
  $ yarn audit fix // 취약점을 자동으로 수정한다.
  $ yarn audit fix --only=[dev|prod] // 개발 또는 프로덕션 의존성에 대해서만 취약점을 수정한다.
  $ yarn audit fix --package-lock-only
    package-lock.json 파일만 업데이트한다.
  $ yarn audit fix --force (아예 사용하지 않는 것을 권장)
    취약점을 강제로 수정한다.

1. 라이브러리의 Vulnerability(취약점) 확인 및 대응 방법3 : 자동화 도구 사용
  취약점 관리를 위한 자동화 도구나 서비스(예: Snyk, Dependabot 등)를 사용하는 방법도 있다.

1. 라이브러리의 Vulnerability(취약점) 확인 및 대응 방법4 : 기타 완화 전략
  대응 방법은 일반적으로 "취약점을 해결한 버전"으로 라이브러리의 버전을 "업그레이드"하는 것이지만, 
  취약점 대응 시 패치 적용 외에도 다른 완화 전략(예: 코드 수정, 기능 비활성화 등)이 있을 수 있다.

1. 실무적 조언
  작업 전 롤백 준비는 필수: 업그레이드 후 문제가 발생할 경우를 대비한 롤백 계획을 반드시 수립해두어야 한다.
    (예: git reset, git revert 등)
  작업 후 테스트는 필수: 취약점 대응 시 테스트도 반드시 이루어져야 한다. 업그레이드 후 반드시 전체 테스트를 실행하여, 기능의 regression 없는지 확인해야한다.
  정기적 검사 계획도 중요: 정기적인 의존성 검사 및 업데이트 일정을 수립하는 것이 중요하다.
  팀 커뮤니케이션 중요: 취약점 발견 및 대응 과정에서의 팀 내 커뮤니케이션도 놓치지 않도록 하자. 
    (예: package의 취약점이 있을 경우 공유, 버전 업그레이드 이후의 안내 등)
  상황에 따라서는 취약점 대응 우선순위를 설정: 모든 취약점을 동시에 해결하기 어려울 수 있는데, 이런 경우, 우선순위 설정이 필요할 수 있다.
    (예: 때로는 보안 업데이트만 적용하고 기능 업데이트는 연기하는 전략이 필요할 수 있다.)
  문서화를 잊지 말자: 취약점 대응 과정과 결과를 문서화하는 것도 중요하다. 이는 향후 유사한 상황 대처나 감사 대비에 도움이 된다. (현재 문서를 만든 이유)
  
1. 참조: yarn 외에도, npm, pnpm의 경우에도 사용할 수 있다.
  - npm outdated
  - npm update [package-name]@latest
  - npm audit
  - npm audit fix
