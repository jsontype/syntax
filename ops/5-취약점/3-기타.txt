[라이브러리의 취약점 대응 시의 실무적 조언]

1. 취약점 대응 시의 실무적 조언
  - 작업 전 롤백 준비는 필수
    업그레이드 후 문제가 발생할 경우를 대비한 롤백 계획을 반드시 수립해두어야 한다. (예: git reset, git revert 등)
  - 작업 후 테스트는 필수
    취약점 대응 시 테스트도 반드시 이루어져야 한다. 업그레이드 후 반드시 전체 테스트를 실행하여, 기능의 regression 없는지 확인해야한다.
  - 팀 커뮤니케이션 중요
    취약점 발견 및 대응 과정에서의 팀 내 커뮤니케이션도 놓치지 않도록 하자. (예: package의 취약점이 있을 경우 공유, 버전 업그레이드 이후의 안내 등)
  - 문서화를 잊지 말자
    취약점 대응 과정과 결과를 문서화하는 것도 중요하다. 이는 향후 유사한 상황 대처나 감사 대비에 도움이 된다.
  - 정기적 검사 계획도 중요
    정기적인 의존성 검사 및 업데이트 일정을 수립하는 것이 중요하다.



[라이브러리의 취약점 실무적 대응 외 다른 방법들]

1. 취약점 기타 대응: 의존관계가 복잡하지 않은 경우
  audit fix를 이용해서 자동으로 대응할 수도 있다. 단, 의존관계가 복잡할 경우, 이 명령어들이 해결을 보장하지는 않는 듯 하므로 주의하자.
  $ yarn audit fix --dry-run // 취약점을 수정하기 전에 어떤 작업이 수행될지 미리 확인한다.  
  아래 중 하나의 명령어를 이용해서, 취약점을 수정한다.
  $ yarn audit fix // 취약점을 자동으로 수정한다.
  $ yarn audit fix --only=[dev|prod] // 개발 또는 프로덕션 의존성에 대해서만 취약점을 수정한다.
  $ yarn audit fix --package-lock-only
    package-lock.json 파일만 업데이트한다.
  $ yarn audit fix --force (아예 사용하지 않는 것을 권장)
    취약점을 강제로 수정한다.

1. 취약점 기타 대응: 자동화 도구 사용
  취약점 관리를 위한 자동화 도구나 서비스(예: Snyk, Dependabot 등)를 사용하는 방법도 있다.

1. 취약점 기타 대응: 기타 완화 전략
  대응 방법은 일반적으로 "취약점을 해결한 버전"으로 라이브러리의 버전을 "업그레이드"하는 것이지만, 
  취약점 대응 시 패치 적용 외에도 다른 완화 전략(예: 코드 수정, 기능 비활성화 등)이 있을 수 있다.

1. 참고: yarn 외에도, npm, pnpm의 경우에도 사용할 수 있다.
  - npm outdated
  - npm update [package-name]@latest
  - npm audit
  - npm audit fix
