[BEM]
1. BEM이란?
    Block, Element, Modifier의 약자이며, 
    개발자간에 엄격하게 동일한 클래스명으로 소통이 되도록 클래스명과 구조를 통일시켜, 
    여러가지 장점을 취하는 "클래스명의 네이밍 방법론"이다.
    (SASS,SCSS와 궁합이 좋기 때문에 여기에 배치했다.)
    * "BEM, OOCSS, SMACSS"는 SASS에서 주로 차용하는 3대 네이밍 방법론에 속한다.

1. BEM 공통룰
    id가 아닌 class에만 사용한다.
    어떻게 보이는지가 아닌 목적에 맞게 네이밍한다. (예를 들어 경고메세지를 띄울 경우 yellow 가 아니라 warning 으로 명명한다.)
    (선택사항) 클래스 명명법은 카멜케이스가 가장 많이 쓰인다.

1. BEM 사용법
    Block : 재사용 가능한 독립적 블록, 가장 바깥쪽 상위요소
        재사용을 위해 margin 또는 padding을 적용하지 않는다.
        블럭은 블럭을 감쌀 수 있다.
        .block {}
    Element : 블록을 구성하는 종속적인 하위요소
        Element는 블록뒤에 두 개의 언더바를 붙인다.
        .block__element {}
    Modifier : 블록이나 엘리먼트의 모양, 상태, 동작 등의 변형요소
        Modifier는 블록이나 모디파이어 뒤에 두 개의 대쉬를 붙인다.
        .block--modifier {}
        .block__element--modifier {}

1. BEM의 장점
    시각적으로 알아보기 쉽다.
    무슨 기능인지 직관적으로 알 수 있다.
    css만으로 구조를 알 수 있다.
    SASS,SCSS와 사용하기 편하다.
    선택자 우선순위 규칙을 낮은 수준으로 유지할 수 있다.
    높은 재사용성
    대규모 CSS를 효율적으로 관리할 수 있다.
    (OOCSS, SMACSS도 해당하지만) 네이밍룰에 통일성을 가져 타 개발자와의 팀프로젝트를 가능하게 한다.

1. BEM의 특징 : 모두 "클래스명이 엄격한 의미를 갖게 하는" 특징들이다.
    가급적 약어 사용을 피한다.
    가급적 낮은 선택자 우선순위를 유지하도록 한다.
    전역에서 유일한 이름을 권장한다.
    다른 형식의 선택자 사용을 제한한다.
    더블 대쉬, 더블 언더바 외 다른 형식의 기호 사용을 제한한다.
    구분자로 구분하는 1~3개의 설명자 형식 외 다른 형식을 허용하지 않는다.
    HTML에서는 태그만 다루고, 스타일은 CSS에서 처리한다. 그래서 HTML과 CSS 연결이 느슨하므로 개발과 병렬 진행이 가능하다.



1. 리액트 앱 생성
    $ npx create-react-app app1
    $ cd app1
    $ npm i node-sass (= yarn add node-sass)
    불필요 파일 및 코드 지우기



1. App.js 수정
    import React from 'react'
    import './App.scss'

    function App () {
        return (
            <div className="App">
                <header class="tsHeader">
                    {/* 재사용 가능한 블록 영역 */}
                    <h1 class="tsHeader__logo"><a href="#" class="tsHeader__logoLink">Shop!</a></h1>
                    
                    {/* 블록은 블록을 포함할 수 있음 */}
                    <nav class="tsNav">
                        <ul class="tsNav__list">
                            <li class="tsNav__item">
                                <a href="#" class="tsNav__link">
                                    HOME
                                </a>
                            </li>
                            <li class="tsNav__item">
                                <a href="#" class="tsNav__link">
                                    Best
                                </a>
                            </li>
                            <li class="tsNav__item">
                                <a href="#" class="tsNav__link">
                                    FAQ
                                </a>
                            </li>
                        </ul>
                        
                        <div class="tsNav__shortcut">
                            <button type="button" class="btn__icon"><span class="heart-solid icon"></span></button>
                            <button type="button" class="btn__icon"><span class="shutdown icon"></span></button>
                        </div>
                    </nav>
                </header>

                <section class="tsContainer">
                    <div class="tsContents">Contents Area . . .</div>
                    <div class="tsBottom">
                        <button type="button" class="btnBasic">cancel</button>
                        <button type="button" class="btnBasic--submit">submit</button>
                    </div>
                </section>
            </div>
        )
    }

    export default App



1. App.scss 생성
    /* 
        예제 : 'ts'라는 가상의 프로젝트를 진행할 경우를 예시로 class naming 했다.
        SCSS와 함께 사용할 때 시너지가 좋다.
        프로젝트의 최상단에 class="ts"를 적용하여 상속해서 사용하는 것도 경우에 따라 유용한 방법이 될 수 있다.
    */
    .tsHeader{
        padding:10px 20px;
        background:#eee;
        &__logo{
            display:inline-block;
            vertical-align:top;
        }
        &__logoLink{
            display:block;
            padding:5px 10px;
            box-sizing:border-box;
            background:blue;
            border-radius:50%;
            box-shadow:3px 5px 5px rgba(0,0,0,.3);
            text-decoration:none;
            font-size:30px;
            color:#fff;
        }
    }
        
    .tsNav{
        display:flex;
        justify-content:space-between;
        align-items:center;
        padding:0 10px;
        border:1px solid #222;
        &__list{
            display:inline-block;
            vertical-align:top;
            margin:0;
            padding:0;
            &:after{
            content:'';
            display:block;
            clear:both;
            }
        }
        &__item{
            float:left;
            margin:0 10px;
            list-style:none;
        }
        &__link{
            text-decoration:none;
            font-size:14px;
            color:#555;
            &:hover{
            text-decoration:underline;
            text-underline-position:under;
            }
        }
        &__shortcut{
            float:right;
        }
    }
        
    .btn__icon{
        position:relative;
        width:30px;
        height:30px;
        border:0;
        background:none;
    }
        
    .tsContents{
        padding:10px 20px;
        box-sizing:border-box;
        height:100px;
        background:pink;
    }
        
    .tsBottom{
        margin-top:20px;
    }
        
        
    [class^="btnBasic"]{
        display:inline-block;
        vertical-align:top;
        padding:0 8px;
        box-sizing:border-box;
        height:30px;
        border:1px solid #999;
        background:#fff;
        border-radius:5px;
    }
    .btnBasic{
        &--submit{
            border-color:blue;
            background:blue;
            color:#fff;
        }
    }
        
        /* icon css - 출처 : https://cssicon.space/#/icon/heart-solid */
    .shutdown.icon {
        color: #000;
        position: absolute;
        top:6px;
        left:6px;
        width: 13px;
        height: 13px;
        border-radius: 50%;
        border: solid 1px currentColor;
    }
        
    .shutdown.icon:before {
        content: '';
        position: absolute;
        left: 3px;
        top: -2px;
        width: 1px;
        height: 8px;
        border-left: solid 3px white;
        border-right: solid 3px white;
        background-color: currentColor;
        }
        .heart-solid.icon {
        color: #000;
        position: absolute;
        top:8px;
        left:8px;
        width: 9px;
        height: 9px;
        border-left: solid 1px currentColor;
        border-bottom: solid 1px currentColor;
        background-color: currentColor;
        -webkit-transform: rotate(-45deg);
                transform: rotate(-45deg);
    }
        
    .heart-solid.icon:before {
        content: '';
        position: absolute;
        top: -5px;
        left: -1px;
        width: 8px;
        height: 5px;
        border-radius: 5px 5px 0 0;
        border-top: solid 1px currentColor;
        border-left: solid 1px currentColor;
        border-right: solid 1px currentColor;
        background-color: currentColor;
    }
        
    .heart-solid.icon:after {
        content: '';
        position: absolute;
        top: 0px;
        left: 8px;
        width: 5px;
        height: 8px;
        border-radius: 0 5px 5px 0;
        border-top: solid 1px currentColor;
        border-right: solid 1px currentColor;
        border-bottom: solid 1px currentColor;
        background-color: currentColor;
    }



1. 테스트
    $ cd app1
    $ npm start
