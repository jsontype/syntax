[TypeScript 소개]

1. TypeScript 정의
    JavaScript는 weakly typed 언어이다.
    변수에 문자열, 숫자, null, 배열 등등 뭘 넣어도 그냥 들어간다.
        let value = 5
        value = '안녕하세요'
        value = [1,2,3,4,5]
        value = null
    게다가, 암묵적캐스팅을 통해 다른 타입을 넣어도 계산이 된다.
        let value = 5
        value = value + '5'
        console.log(value) // 10
    그러나 이는 시스템을 위협할 수도 있는 위험한 타입 에러를 걸러내지 못하므로, 데이터의 무결성 측면에서 좋지 않다. 
    TypeScript에서는 사전에 변수에 타입을 지정해주어, 아무 타입이나 들어갈 수 있게 하지 않는 라이브러리다.

1. TypeScript 장점(1) : 실수방지
    변수에 지정되지 않은 잘못된 타입을 넣었을 때 에러를 표시해주어, 실수에 의한 (또는 다른 초보 개발자에 의한?) 에러 방지가 가능하다.
        함수, 컴포넌트 등의 타입 추론이 되다보니, 만약에 우리가 사소한 오타를 만들면 코드를 실행하지 않더라도 IDE 상에서 바로 알 수 있게 된다.
        그리고, 예를 들어 null이나 undefined일 수도 있는 값의 내부 값 혹은 함수를 호출한다면(예: 배열의 내장함수) 사전에 null 체킹을 하지 않으면
        오류를 띄우므로 null 체킹도 확실하게 할 수 있게 된다.

1. TypeScript 장점(2) : IDE 활용성 증가
    IDE상에서 컴포넌트별 변수나 함수들의 자동완성을 편하게 해준다. (컴포넌트마다 타입을 객체로 설정해서)
    IDE상에서 변수나 함수들에 들어갈 state, props, param, return 값에 알맞은 타입을 확인하며 작업할 수 있게 된다. (변수마다 타입을 설정해서)
        함수를 사용 할 때 해당 함수가 어떤 params를 필요로 하는지, 그리고 어떤 값을 return하는지 코드를 따로 열어보지 않아도 알 수 있다.
        추가적으로, 리액트 컴포넌트의 경우 해당 컴포넌트를 사용하게 될 때 props에는 무엇을 전달해줘야하는지, JSX를 작성하는 과정에서 바로 알 수 있다.
        컴포넌트 내부에서도 자신의 props에 어떤 값이 있으며, state에 어떤 값이 있는지 알 수 있다.
        리덕스와 함께 사용하게 될 때에도 스토어 안에 어떤 상태가 들어있는지 바로 조회가 가능해서 굉장히 편리하다.

[TypeScript 설치 및 설정하기]

1. package.json 생성 : 노드패키지 설정파일
	$ npm init -y (= yarn init -y)
  
1. tsconfig.json 생성 : 타입스크립트 설정파일
	$ npm i -g typescript (= yarn global add typescript)
	$ cd app1
	$ tsc --init
        