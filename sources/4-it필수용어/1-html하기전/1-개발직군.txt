[코딩 vs 프로그래밍]

1. 디자인 : UI/UX 디자인을 한다는 뜻이다.
    UI : User Interface
    UX : User Experience

1. 코딩 : 코드를 작성한다는 뜻이다.
    부호화(符号化, Hugo-ka, Coding)를 통해 컴퓨터가 이해할 수 있는 언어로 바꾸는 것을 말한다.

1. 프로그래밍 : 프로그램을 작성하는 뜻이다.
    설계와 코딩, 에러 수정 등의 단계를 거쳐서 프로그래밍을 작성하는 과정이고, 그 과정에 코딩이 포함된다.
    주니어 프로그래머가 보통은 프로그래머가 아닌 코더인 이유 :
        주니어 프로그래머는 간단한 자신의 프로그래밍은 할 수 있을지라도,
        그 아키텍쳐를 전부 이해하지 못하므로 사실 현장 레벨의 프로그래밍은 할 수 없을 것이다.
        즉, 현장에서 시키는 대로 코딩만 할 뿐이다.
        그러니 현장에서는 코더라고 인식되는 경우가 많다.
        즉, 실상은 코더(코드몽키) - 주니어 프로그래머 - 인터 프로그래머 - 시니어 프로그래머 순이다.
        물론 비전공자는 코더에서 시작하는 것이 현실이다.
        그런데, 이쪽 세계에서 이 보이지 않는 계급의 실력차이는, 실로 어마어마 하다. (1명의 천재가 10000명분의 일을 할 수도 있다.)
        그래서인지, 하는 일에 비해 주니어는 더 받고, 시니어는 사실 돈을 덜 받는다는 인식도 있다.



[다루는 언어별로 나뉘는 개발자 호칭]

1. 웹디자이너 혹은 퍼블리셔 : 단순 마크업, 퍼블리싱 업무 등, 프로그래밍과는 전혀 관련이 없다.
    퍼블리싱 업무 : CMS(Contents Management System, 워드프레소나 피그마 등)으로 디자인만 하는 것

1. 프론트엔드 엔지니어 : 비교적 최근 생겨난 포지션으로, 백엔드 개발자와 퍼블리셔의 중간 역할을 담당. 화면 디자인보다는 JS 언어로 코딩하는 업무
    JS 언어로 코딩하는 업무 : 서버와 클라이언트를 이어주거나, 화면상에 기능을 구현하거나, 최적화 등의 개발에 집중하는 포지션
    ★ 맥북 없을 시, 1-2달 이내에 맥북 필요

1. 백엔드 엔지니어 : API 개발이 주가 된다.
    프론트에서 요구하는 데이터의 포맷 검증, 데이터베이스 입출력, 비즈니스 프로세스(특정 데이터 취득을 위해 로직을 짜는 것)를 코드로 구현한다.
    프로그래밍, 데이터베이스, 웹서버, 네트워크, 인프라 등에 대한 기술이 필요하다.

1. 풀스택 엔지니어 : 프론트와 백을 모두 다 할줄 아는 엔지니어이다.

1. 인프라 엔지니어 : 그들의 업무는 인프라 설계, 인프라 구축, 인프라 운영 세 단계로 분류된다.
    인프라 설계는 만드는 목적에 따라 필요한 조건을 정리하고 기획서와 설계서를 작성하는 일이다.
    인프라 구축은 기기를 들여와서 설치하는 하드웨어 관련 작업, 서버나 스토리지 설정, 네트워크 장비 설정 등으로 나뉜다.
    인프라 운영은 가동후에 24시간 365일 내내 가동되는 것을 확인하며 교대로 운영하며, 하드웨어 고장, 급격한 액세스 증가, 인프라 외 문제 등의
        여러 장애가 발생시 수용량 설정 변경 등으로 직접 대응하거나, 관련 부서에 대응 요청 등을 한다.



[직군별로 나뉘는 개발자 호칭]

1. SI(System Integration) 직군 : 솔루션 업체에서 프로젝트를 발주받아 그 프로젝트를 작업하는 사람
    업무가 프로젝트 단위로 진행되기 때문에 정해진 위치에서 작업을 하는 것이 아니라 다양한 장소에 출장이나 파견을 간다.
    다양한 프로그래밍 언어와 개발환경을 접하며 폭넓은 경험을 얻게 되지만 세분화된 특정영역의 전문지식을 갖기는 어렵다.
    프로젝트 단위로 회사를 옮겨다니며 적게는 몇 개월, 많게는 몇 년 단위로 진행된다.
    "해결사"
    업무공정 : "요건정의 - 설계 - 개발 - 테스트 - 검수"

1. SM(System Management) 직군 : 관리에 초점을 맞춰 말 그대로 회사의 시스템이 잘 굴러가게 유지관리하는 사람
    HW와 OS에 대한 지식을 기반으로 한다.
    고객사의 현업의 업무 지식에 특화되지만 상대적으로 프로그램, DB의 다양한 지식 면에서 부족하다.
    회사에 상주하여 한 시스템을 오랜 기간 담당하는 경우가 많다.
    "리더"
    업무공정 : "오류수정 - 기능개선 - 기능추가 - 데이터제공 - 시스템안정화"
    
1. SE(System Engineer) 직군 : 웹 프로그래머는 보통 이 직군에 속한다.
    SI와 가장 큰 차이점은, SI는 필요에 의해 프로젝트 팀원으로 프로젝트 진행을 함께하는 개발자라면,
    SE는 이미 구축된 시스템을 기반으로 추가요소를 개발하는 등 프로젝트보다 더 작은 단위의 개발 업무라고 생각하면 된다.
    "프리랜서"
    업무공정 : 요건정의 - 설계 - "개발" - 테스트 - 검수

1. OP(Operator) 직군 : 서버실에서 서버의 모니터링과 OA(사무자동화) 업무를 수행한다.
    24시간 필요한 인원으로 3, 4교대로 이뤄진다.
    일이 단순하고 시스템 경비원 같은 느낌이다.
    주로 서버 감시를 하고 서버에 고장이 나지 않게 예방하거나 고장났을 때의 대처를 한다. 
    "경비"

1. SP(System Programmar) : OP와 시스템운영자의 중간에 위치하는 애매한 직군
    "상급경비"

1. PG(Programmar) : 보통 일본에서 프로그래머를 이렇게 부른다.
    "일본프리랜서"

1. Solution : SI와 비슷하며 고객이 필요로 하는 프로그램을 프로젝트 단위 작업을 구성하여 제공한다.
    SI와의 차이점은, SI가 아무것도 없는 상태에서 요구사항을 기반으로 만들어진다면,
    솔루션은 이미 완성된 제품을 토대로 고객 요구사항에 맞게 수정하여 제공한다는 차이를 보인다.
    일반적으로 SI보다 연구 개발 부분의 능력이 강화되는 특징을 보인다.
    그러나 영업 부문에 있어서는 양극화 현상이 나오는데, 
    좋은 솔루션은 지속적으로 잘 팔리지만 도태된 솔루션은 시장에서 쉽게 사장된다.
    "사장"
