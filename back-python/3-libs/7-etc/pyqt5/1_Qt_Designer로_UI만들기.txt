[Qt Designer로 UI만들기]
참조: https://wikidocs.net/5220

1. 아나콘다에서 PyQt 설치 및 업데이트 : PyQt는 아나콘다 배포판을 설치하면 기본적으로 설치되는 패키지이다. 없다면 pip install PyQt을 입력하면 된다.
윈도우버튼 -> Anaconda Prompt 입력 후 실행
conda list pyqt : 배포판에 설치된 pyqt 패키지의 정보가 출력됨. 이때 패키지의 이름은 대소문자를 구별하지는 않음. 여기서 버전을 확인할 수 있다.
    * conda list : 배포판에 설치된 모든 패키지의 정보가 출력됨
conda update pyqt : 
    * conda update : 모든 패키지를 업데이트한다.
ui1.py 생성 (워크스페이스는 자유)
아나콘다에서 ui1.py 파일 열기
아나콘다 ide에서 F5 (Run 버튼) 누르기로 실행

1. vscode에서 PyQt 설치 및 업데이트
>>> pip3 install pyqt5
ui1.py 생성
>>> python ui1.py 로 실행

2. PyQt 학습하기 (예시)
ui1.py : QLabel = Print "Hello PyQt"
ui2.py : QPushButton = Button
ui3.py : setWindowTitle, setGeometry = Title, 창 크기 설정
ui4.py : QPushButton.clicked.connect() = Event
ui5.py : QPushButton.clicked.connect() = Close Button
ui6.py : app.exec_() = <Code Flow>, <Event Roop>에 대한 설명
ui7.py : QPushButton, setText = Message 셋팅
ui8.py : QLineEdit, QStatusBar = String Input (종목코드)
ui9.py : QRadioButton = Radio button (일봉/주봉/월봉)
ui10.py : QCheckBox = Checkbox (n일 이동평균선 보기 체크)
ui11.py : QSpinBox = Int Input (매도수량)
ui12.py : QTableWidget, QTableWidgetItem = Table (주식데이터)
ui13.py : QTextEdit, QPushButton = 레이아웃 사용하기 전 (Textarea, button)
ui14.py : QVBoxLayout().addWidget(Q..) = 수직방향 레이아웃 추가 (Textarea, button)
ui15.py : QHBoxLayout().addWidget(Q..) = 수평방향 레이아웃 추가 (Button 1, 2, 3)
ui16.py : QGridLayout().addWidget(Q..,1,1) = 행렬 그리드 레이아웃 추가 (Login Form)
ui17.py : layout.addLayout() = Layout 중첩 (주식검색옵션과 데이터)
ui18.py : QFileDialog = File Input 다이얼로그(모달) 열기
ui19.py : QInputDialog = Int Input 다이얼로그(모달) 열기
ui20.py : LogInDialog().exec_() = Login Form 다이얼로그(모달) 열기
ui21.py : layout.addLayout() = Layout 중첩 (차트 그리기 UI 만들기)
ui22.py : matplotlib = 시각화 라이브러리 연동 (차트 그리기 UI에 실제 종목 받기 메소드 추가)

[pyside2, uic로 쉽게 UI 만들기]
참조 : https://wikidocs.net/5223 부터 5227까지
ui1~22.py 코드를 먼저 본 이유 : 코드 차원에서 데이터를 삽입시 어디에 넣어야할지 알고 이해하기 위해서였다.

1. 아나콘다에서 PySide2, uic 설치 및 업데이트
C:\Anaconda3\Library\bin 폴더로 이동 (이미 설치되어 있음)
해당 폴더에서 designer.exe 실행
uic(Pyside2에서 제작한 .ui 파일을 .py 파일로 만들어주는 프로그램)는 아나콘다 내에 자동으로 깔려있음 : 위치는 C:\Anaconda3\Lib\site-packages\PyQt5\uic

1. vscode에서 PySide2, uic 설치 및 업데이트
터미널 켜기
>>> pip install pyside2
한번더 인스톨을 시도하면 어느 위치에 깔려있는지를 알려준다. 탐색기에서 해당 폴더로 이동
해당 폴더에서 designer.exe 실행 ()
uic(Pyside2에서 제작한 .ui 파일을 .py 파일로 만들어주는 프로그램)은 PyQt5안에 있다 : 위치는 C:\에서 PyQt5 검색 -> PyQt5\uic

2. pySide로 TUI가 아닌 GUI 만들기 절차
designer.exe 실행 ()
QtDesigner를 시작하면 "새로운 폼" 화면이 표시됩니다.
그 표시된 화면에서 "MainWindow"를 선택합니다.
작성
Widget을 배치 (Button, Label 등)
각 Widget을 선택한 뒤, 우측 사이드바의 "Property Data" 에서 휠 내려서 Text등의 속성을 변경해보기
탭이름 작성하여 추가
GUI 작성 작업을 시작

2. GUI 작성 작업이 끝나면, Python 측에서 사용하기 위해서 .ui 파일을 .py 로 변경
"다른 이름으로 저장" 클릭 : 다른 저장도 있는데, 이미지 저장은 설계도 만들때 사용, 템플릿 저장은 나중에 수정을 위해서 작업 내용을 따로 저장해두는 것임
"ui23.ui" 라는 이름으로 해서 PyQt5\uic 폴더에 저장 (아나콘다의 경우 : C:\Anaconda3\Lib\site-packages\PyQt5\uic 안에 저장)
터미널을 열고 uic폴더로 이동
python -m PyQt5.uic.pyuic -x ui23.ui -o ui23_pyside.py 입력 : 앞의 파일명 .ui를 뒤의 파일명 .py로 변경하는 것
바뀐 "ui23_pyside.py" 파일을 현 폴더로 이동
python ui23_pyside.py 을 통해서 실행확인

2. 작업하기
ui23_pyside.py : pyside2 designer 프로그램을 사용한 ui 파일을 py 로 바꾸어서 로드해보기
ui24.py : 이벤트 처리작업↓↓↓
Qt Designer를 사용하면 더 쉽고 편리하게 UI를 구성할 수 있음을 배웠습니다. 
하지만 사용자 이벤트를 처리하는 메서드나 함수는 여전히 여러분이 직접 구현해야 합니다. 
이번엔 윈도우에서 버튼을 클릭할 때 발생하는 이벤트를 처리하는 프로그램을 작성해 보겠습니다.
ui24.py는 "ui23_pyside.py"에서 만든 기본 윈도우 구성 코드에 이벤트 처리를 하기 위해서
시그널(self.pushButton.clicked)과 슬롯(btn_clicked)을 연결하는 코드와 슬롯 구현부를 추가한 것입니다.
코드의 주석을 보면 어떤식으로 연결되어 있는지 알 수 있습니다.

<끝>
