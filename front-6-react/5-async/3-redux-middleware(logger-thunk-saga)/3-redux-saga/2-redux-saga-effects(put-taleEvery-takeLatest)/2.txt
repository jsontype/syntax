[redux-saga 설치 및 비동기 카운터 만들기]

1. 사전준비1 : js 고급문법인 generator 함수에 대해서 이해하기

1. 사전준비2 : 프로젝트를 새로 깔지 않고, 이전 챕터에서의 코드를 그대로 카피해서 가지고 온다.

1. redux-saga 원리
    JS의 generator 함수를 사용하면, 타입별로 액션을 모니터링할 수 있는 특징이 있었다.
    이와 같은 원리를 이용해서, 기존에 thunk를 사용해서 구현했던 비동기 카운터 기능을 redux-saga에서도 구현할 수 있다.

1. 설치 : redux-saga 라이브러리
    $ npm i history
    $ npm i redux-saga



1. src/modules/counter.js 수정 : redux-saga의 effects 함수로 액션을 디스패치하고, 모니터링 처리하기
    /*
        [redux-saga의 effects 함수로 액션을 디스패치하고, 모니터링 처리하기]

        'redux-saga/effects'의 유틸함수 중 put 함수: 새로운 액션을 디스패치
        'redux-saga/effects'의 유틸함수 중 takeEvery 함수: 특정 액션 타입에 대하여 디스패치되는 모든 액션들을 모니터링 처리
        'redux-saga/effects'의 유틸함수 중 takeLatest 함수: 특정 액션 타입에 대하여 디스패치된 가장 마지막 액션만을 모니터링 처리
        (예를 들면, 특정 액션을 처리하고 있는 동안 동일한 타입의 새로운 액션이 디스패치되면 기존에 하던 작업을 무시 처리하고 새로운 작업을 시작한다.)
    */

    // effect 함수 임포트
    import { delay, put, takeEvery, takeLatest } from 'redux-saga/effects';

    // 액션 타입
    const INCREASE = 'INCREASE'
    const DECREASE = 'DECREASE'
    const INCREASE_ASYNC = 'INCREASE_ASYNC'
    const DECREASE_ASYNC = 'DECREASE_ASYNC'

    // 액션 생성 함수 : thunk 함수에서 일반 액션 생성 함수로 대체시킨다.
    export const increase = () => ({ type: INCREASE })
    export const decrease = () => ({ type: DECREASE })
    export const increaseAsync = () => ({ type: INCREASE_ASYNC })
    export const decreaseAsync = () => ({ type: DECREASE_ASYNC })

    // saga 함수 만들기
    function* increaseSaga () {
        yield delay(1000)
        yield put(increase()) // 특정 액션을 디스패치
    }
    function* decreaseSaga () {
        yield delay(1000)
        yield put(decrease()) // 특정 액션을 디스패치
    }

    // counterSaga 함수 만들기 : 두 액션을 모니터링
    export function* counterSaga () { // counterSaga 함수의 경우 다른 곳에서 불러와서 사용해야 하기 때문에 export 키워드를 사용
        yield takeEvery(INCREASE_ASYNC, increaseSaga) // 모든 INCREASE_ASYNC 액션을 처리
        yield takeLatest(DECREASE_ASYNC, decreaseSaga) // 가장 마지막으로 디스패치된 DECREASE_ASYNC 액션만을 처리
    }

    // 초기값 (상태가 객체가 아니라 그냥 숫자여도 상관 없다.)
    const initialState = 0

    // 리듀서
    export default function counter (state = initialState, action) {
        switch (action.type) {
        case INCREASE:
            return state + 1
        case DECREASE:
            return state - 1
        default:
            return state
        }
    }



1. src/modules/index.js 수정 : 루트 사가 만들기    
    import { combineReducers } from 'redux'
    import counter, { counterSaga } from './counter'
    import posts from './posts'
    import { all } from 'redux-saga/effects'

    // 루트리듀서 생성
    const rootReducer = combineReducers({ counter, posts })

    // 루트사가 생성
    export function* rootSaga () { // 프로젝트에서 여러개의 사가를 만들게 될텐데, 이를 모두 합쳐서 루트 사가를 만든다.
        yield all([counterSaga()]) // all은 배열 안의 여러 사가를 동시에 실행시켜준다.
    }

    export default rootReducer

    

1. src/index.js 수정 : 리덕스 스토어에 redux-saga 미들웨어를 적용하기
    import React from 'react'
    import ReactDOM from 'react-dom'
    import App from './App'
    import { createStore, applyMiddleware } from 'redux'
    import { Provider } from 'react-redux'
    import { BrowserRouter } from 'react-router-dom'
    import { composeWithDevTools } from 'redux-devtools-extension'
    import logger from 'redux-logger'
    import ReduxThunk from 'redux-thunk'
    // saga 미들웨어 생성 함수를 임포트
    import createSagaMiddleware from 'redux-saga'
    import rootReducer, { rootSaga } from './modules'

    // saga 미들웨어 생성
    const sagaMiddleware = createSagaMiddleware()

    // 스토어
    const store = createStore(
        rootReducer,
        composeWithDevTools(
            applyMiddleware(
                ReduxThunk, // thunk 미들웨어 적용
                sagaMiddleware, // saga 미들웨어 적용
                logger // logger 미들웨어 적용 : logger를 사용하는 경우, logger가 가장 마지막에 와야한다.
            )
        )
    ) // 여러개의 미들웨어를 적용 할 수 있다.

    // 루트 사가 실행
    sagaMiddleware.run(rootSaga) // * 주의: 스토어 생성이 된 다음에 이 코드를 실행해야한다.

    // 렌더링
    ReactDOM.render(
        // BrowserRouter로 Provider를 감싸주면, Routing을 사용할 수 있다.
        <BrowserRouter>
        <Provider store={store}>
            <App />
        </Provider>
        </BrowserRouter>,
        document.getElementById('root')
    )



1. src/App.js 수정 : CounterContainer 렌더링하기
    import React from 'react'
    import { Routes, Route } from 'react-router-dom'
    import PostListPage from './pages/PostListPage'
    import PostPage from './pages/PostPage'
    import CounterContainer from './containers/CounterContainer'

    function App () {
        return (
        <>
            <CounterContainer />
            <Routes>
            <Route path="/" element={<PostListPage />} exact={true}>
                <Route path=":id" element={<PostPage />} />
            </Route>
            </Routes>
        </>
        )
    }

    export default App



1. 테스트 : +1 버튼과 -1 버튼을 연속해서 눌러보고, 똑같이 작동하는지 확인
    $ cd app1
    $ npx json-server ./data.json --port 4000
    $ npm start
