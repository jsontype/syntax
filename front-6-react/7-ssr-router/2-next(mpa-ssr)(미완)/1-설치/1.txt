https://nextjs.org/docs/getting-started

[자동설치]

1. Next 프레임워크 자동 설치하기
  $ npx create-next-app@latest app1 (=yarn create next-app app1)
  Typescript / EsLint 설치 여부 선택

1. 테스트
  $ cd app1
  $ npm run dev
  pages/index.js를 편집해보고 업데이트 결과를 확인



[수동설치]

1.  이미 설치되어있는 리액트앱에 Next 프레임워크 추가 설치하기
  $ cd app1
  $ npm i next (=yarn add next)

1. package.json 파일 수정 : scripts 부분 수정
  "scripts": {
    "start": "next start",
    "build": "next build",
    "lint": "next lint",
    "dev": "next dev",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },

1. 루트에 두 개의 디렉터리 생성
  $ cd app1 
  $ mkdir pages 
  $ mkdir public
  폴더별 설명
    pages: 파일 이름을 기반으로 path와 연결된다. 
      예를 들어 다음 과 같이 매핑된다. pages/about.js -> /about
    public: 이미지, 글꼴 등과 같은 정적 애셋을 저장한다.
      그러면 기본 URL(/)에서 시작하는 코드에서 디렉토리 내의 파일을 참조할 수 있다.

1. pages/index.js
  export default function HomePage() {
    return <div>Welcome to Next.js!</div>
  }
    
1. 테스트
  $ cd app1
  $ npm run dev
  pages/index.js를 편집해보고 업데이트 결과를 확인

1. 정리 : Next 프레임워크의 장점  
  pages 폴더를 서버사이드렌더링 : 빠른 새로고침 반응
  public 폴더를 통해서 기본 URL(/)에 매핑되는 정적 파일 제공 : 자동 컴파일 및 번들링
