[타입스크립트에서 redux-thunk 사용하기]

1. 사전준비 : 프로젝트를 새로 깔지 않고, 이전 챕터에서의 코드를 그대로 카피해서 가지고 온다.

1. 타입스크립트에서 redux-thunk 사용하기
    redux-thunk 미들웨어를 타입스크립트 환경에서 사용해보자.

1. 설치 : redux-thunk, axios는 공식적으로 타입스크립트 지원이 되므로 따로 @types/redux-thunk, @types/axios를 설치할 필요가 없다.
    $ npm i redux-thunk
    $ npm i axios



1. src/index.tsx 수정 : 스토어에 applyMiddleware(Thunk)를 이용해 redux-thunk 적용
    import ReactDOM from 'react-dom'
    import App from './App'
    import { Provider } from 'react-redux'
    import { createStore, applyMiddleware } from 'redux'
    import Thunk from 'redux-thunk'
    import rootReducer from './modules'

    // 스토어에 applyMiddleware(Thunk)를 이용해 redux-thunk 적용
    const store = createStore(rootReducer, applyMiddleware(Thunk))

    ReactDOM.render(
        // Provider 컴포넌트를 사용하여 스토어를 프로젝트에 적용
        <Provider store={store}>
            <App />
        </Provider>,
        document.getElementById('root')
    )

    // 이것으로 프로젝트에 Redux를 적용할 준비가 완료되었다.



1. Git의 사용자정보 API 호출
    GitHub의 사용자 정보를 가져오는 기능을 구현해보도록 하겠다.
    GitHub의 사용자 정보를 가져올 떄에는 다음 API를 사용한다.
        GET https://api.github.com/users/:username
        GET https://api.github.com/users/jsontype



1. vscode Extension의 Quicktype을 사용해서 손쉽게 타입스크립트 인터페이스로 변환하기
    위 API를 호출하면 받을 응답 데이터에 대한 타입도 준비를 해주어야 하는데, 
    이렇게 많은 종류의 데이터를 하나하나 직접 하기엔 번거로울수도 있다.
    그럴 땐 vscode Extension의 Quicktype을 사용해서 손쉽게 타입스크립트 인터페이스로 변환할 수 있다.

    절차는 다음과 같다.
        https://app.quicktype.io/?l=ts 에 접속한 뒤 (또는 quicktype 검색한 뒤), 이곳에
        https://api.github.com/users/jsontype API 호출 결과를 붙여넣기 하고 (주석은 빼야한다),
        export interface Welcome { } 부분을 복사한 뒤, 이를 토대로 아래 src/api/github.ts 파일을 작성하면 된다.

    물론, 때에 따라 변환된 것을 그대로 복사해서 사용하면 안되고, 일부 값들은 수작업으로 조금 변경을 해줘야 할 수도 있다. 
        예를 들어, 복사한 JSON 안에 있는 email값은 현재 null이지만,
        GitHub API 토큰을 사용하여 인증된 계정을 통해 API를 요청하게 되면 email쪽에 문자열이 올 수도 있다.
        만약 실무에서 타입스크립트를 사용하고, 백엔드와 연동을 하게 될 때에도 비슷한 상황이 있을 수 있다.
        때문에 변환된 인터페이스를 그대로 사용하면 안되고, 실제 사용 케이스에 맞춰서 조금씩 변경해야 할 필요가 있을 수도 있다는 점을 기억해두자.
        (지금은 그냥 그대로 사용을 하도록 하겠다.)

1. src/api/github.ts 생성 : Quicktype을 통해 변환된 것을 API의 타입스크립트 인터페이스로 사용

1. src/modules/github/actions.ts 생성 : github 리덕스 모듈 만들기

여기서 GET_USER_PROFILE 의 용도는 요청이 시작됐을 때 디스패치되는 액션이고, 나머지 두개의 액션들은 성공 / 실패 했을때 디스패치되는 액션들입니다.
typesafe-actions 에는 createAsyncAction 라는 유틸함수가 있는데요, 이를 사용하면 위 코드를 다음과 같이 리팩토링 할 수 있답니다.
이 유틸함수를 꼭 사용 할 필요는 없지만, 만약에 이 형태의 코드가 맘에 드신다면 잘 활용하시면 반복되는 코드를 덜 입력할 수 있어서 편합니다.

...
...
"thunk 함수 작성하기" 검색후 부터 계속 ---> 코딩부터 다하고 안돌아가면 댓글보고 돌아가게 하기 ---> 주석작성 및 테쥰재작성
