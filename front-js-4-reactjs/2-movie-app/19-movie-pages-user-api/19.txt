[User 페이지 컴포넌트화 + API 호출해서 User 데이터 받아오기]

1. src/pages/Users.js 생성
    rcs 입력. ;은 제거. (vscode의 Reactjs code snippets 확장 필요: rcc, rcs, rcsp rcsm 등 가능)
    div 사이에 Users 넣기
    상단에 react 임포트문에서 useEffect를 추가한다.
       import React, { useEffect } from 'react'
    const Users의 줄 밑에, 다음을 추가한다. 
        useEffect(() => {
        })
    User 데이터가 있는 API를 복사한다.
        https://jsonplaceholder.typicode.com/ 접속 → Guid 클릭 → Listing all resources 아래의 코드를 복사
    위에서 복사한 것을 붙여넣기 한다. 단, API 주소 끝에 있는 post를 users로 바꾼다.
        useEffect(() => {
            fetch('https://jsonplaceholder.typicode.com/users')
                .then((response) => response.json())
                .then((json) => console.log(json))
        })

1. src/App.js 수정
    상단에 다음을 추가
        import Users from './pages/Users'
    <Route path="users"></Route> 안을 다음으로 변경
        <Users />
    
1. API 취득 테스트
    브라우져에서 F12 → Network 탭
    cd app1
    npm run start
    Network 탭에서 users → Response 탭을 클릭해서 받은 정보의 .data가 콘솔로그와 일치하는지 트레이스 해본다.



[User 데이터를 State에 넣어서 관리하기]

1. src/pages/Users.js 수정
    
    const Users의 줄 밑에, 다음을 추가한다.
        const [Users, setUsers] = useState([])

    useEffect 부분에서, console.log(json) 부분을 아래와 같이 수정한다.            
        useEffect(() => {
            fetch('https://jsonplaceholder.typicode.com/users')
                .then((response) => response.json())
                .then((json) => {
                    setUsers(json)
                })
        }, [])
    
    useEffect를 아래에 하나 더 만든다.
        useEffect(() => {
            console.log('users:', users)
        }, [users])

1. 각 useEffect들의 맨 끝의 []에 대해서 다시 한번 잘 기억해두자. (useEffect 배울 때 처음에 설명했다. 4번폴더.)
    팁: Effect를 건너뛰어 성능 최적화하기
        맨 끝의 [] 부분은 watch 대상 state이다.
        안에 state명이 있으면 [state]가 updated 될때만 실행. []로 두면 created (최초 렌더링) 될때만 실행.



1. src/components/UserList.js 생성
    rcs 입력. ;은 제거.

1. src/pages/Users.js 수정
    상단에 다음을 추가
        import UserList from '../components/UserList'
    return 안을 다음과 같이 수정 : div보다는, <React.Fragment></React.Fragment>(=<></>)를 사용하는 게 더 좋다.
        <>
            <h1>Users</h1>
            <UserList users={users} />
        </>
    아래의 두번째 useEffect 함수 부분을 삭제
        useEffect(() => {
            console.log('users:', users)
        }, [users])

1. src/components/UserList.js 수정
    const UserList = () 안에 {users} 프롭스를 넣어준다.
    const UserList = ({users})의 코드 밑에 다음을 추가한다.
        console.log('users: ', users)
    return 안의 내용을 다음과 같이 수정한다.
        <div>
            {users.map(user => {
                return (
                    <div key={user.id}>
                        {user.name}
                    </div>
                )
            })}
        </div>



1. 중간 테스트
    cd app1
    npm run start
    * 콘솔로그에 users가 4개 뜨는 이유는? (주의: 뇌피셜임)
        get 비동기, get 동기, set 비동기, set 동기 4번의 시점에서 updated가 발동해서인 것 같다.
        Vue로 따지면 api 호출시의 dispatch(set 비동기) - action(set 비동기) - commit(get 동기) - mutation(set 동기) 의 과정이지 않나 싶다..



1. 스타일 추가 : 부트스트랩 Card 스타일 추가
    src/components/UserList.js 수정
        구글 부트스트랩 검색 - V4.6.x docs 클릭 - Components - Card - Text만 있는 두번째 코드 복사 - src/components/UserList.js의 두번째 자식 return 안에, 복사해온 것을 붙여넣기
        붙여넣은 코드 중 class로 된 것을 className으로 변경
        key={user.id}을 잘라내서 card 클래스의 div단에 붙여넣기
        {user.name}을 감싸고 있던 div는 삭제하고 {user.name} 자체는 <div class="card-body">안에 이동
        card 클래스에 mb-2, card-body 클래스에 p-3을 추가한다. 
            ★부트스트랩의 m 마진 클래스, p 패딩 클래스를 익혀두자.
        완성된 것은 아래 코드와 같다.
            return (
                <div>
                    <div className="d-flex justify-content-center">
                        {users.map(user => {
                            return (
                                <div className="card mb-2" key={user.id}>
                                    <div className="card-body p-3">
                                        {user.name}
                                    </div>
                                </div>
                            )
                        })}
                    </div>
                </div>
            )



1. 스타일 추가 : 부트스트랩 Loading Spinner 스타일 추가
    ★★로딩시간을 인위적으로 늘려보기 : F12 누르고 Network 탭 - No throttling 풀다운 클릭 - Slow 3G 클릭 - 다시 로딩해보기

    src/components/Spinner.js 생성
        src/components/Spinner.js를 rcs로 생성. ;은 제거.
        구글 부트스트랩 검색 - V4.6.x docs 클릭 - Components - Spinner - 코드 복사 - src/components/Spinner.js의 div 안에 복사한 코드를 붙여넣기
        붙여넣은 코드 중 class로 된 것을 className으로 변경
        Spinner를 가운데로 옮기기 위해서 기존 최상단의 <div></div>를 <div className="d-flex justify-content-center"></div>로 바꿔준다.

    src/pages/Users.js 수정
        상단에 다음을 추가
            import Spinner from '../components/Spinner'            
        const Users 줄 밑에 다음을 추가
            const [loading, setLoading] = useState(true)
        useEffect 함수의 .then안에 다음을 추가
            setLoading = useState(false)
        return의 <UserList users={users}> 줄을 다음과 같이 수정
            {loading? <Spinner /> : <UserList users={users} />}



1. 테스트
    cd app1
    npm run start
