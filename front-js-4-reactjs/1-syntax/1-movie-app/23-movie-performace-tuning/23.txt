[퍼포먼스튜닝]
참조: https://react.vlpt.us/basic/19-React.memo.html

1. 정의 및 개요
    퍼포먼스튜닝 : 불필요한 값이나 함수의 리렌더링을 막는 리팩토링
        리팩토링 : 구조를 바꾸는 것
        리렌더링 : DOM요소가 변경되면, 브라우저는 DOM트리와 CSSOM을 다시 생성하여 레이아웃을 재계산하고 화면에 다시 그린다. 이것을 리렌더링이라 한다.
            리액트는 Virtual DOM을 생성해 이전 DOM과 현재 DOM을 비교해서 다른 점을 찾아내서 변경된 부분만 리렌더링한다.
            매우 효율적이지만 아무리 효율적이라도 리렌더링이 잦으면 과부하가 생겨 성능이 크게 저하된다.
            그래서 리렌더링을 줄이는 퍼포먼스튜닝(성능최적화)를 통해 사용자 경험을 높여줄 수 있다.
    퍼포먼스튜닝(성능최적화) 방법 : 리액트 훅스의 useMemo, useCallback으로 Memoization을 하면 리렌더링을 막아서 성능을 향상시킬 수 있다.
    


1. 성능분석도구 크롬 개발자툴의 lighthouse 탭 사용해보기 : 성능 점수 확인이 가능하다.
    앱을 연다.
        cd app1
        npm run start
    F12에서 lighthouse 열기
    generate report 클릭
    Performace, SEO 포함해 종합점수를 확인할 수 있다.
        초록색 : 아주 좋은 성능
        주황색 : 느림. 개선 권장
        빨간색 : 아주 느림. 개선 필수
        Opportunity : 개선해주면 로딩 성능을 올릴 수 있는 항목들
        Diagnostic : 개선해주면 렌더링 성능을 올릴 수 있는 항목들

1. 성능분석도구 React Developer Tools 사용해보기 : 상세 렌더링 분석이 가능하다.
    먼저 크롬 웹스토어에서 React Developer Tools를 설치한다.
    설치됐으면 F12로 개발자도구를 열어서 Profiler 탭을 누르고 오른쪽 톱니바퀴 설정을 눌러서 Hightlight updates when components render 이 부분을 체크한다.
    인풋창등에 값을 입력해서 렌더링되는 부분을 확인해본다.
        파란색 : 리렌더링 될 때마다 어디가 리렌더링 되었는지 파란색 선으로 표시해준다.
        노란색 : 연속적인 리렌더링인 경우에는 노란색 선으로 표시해준다.
        비표시 : 리렌더링이 되지 않는 곳이다. (퍼포먼스튜닝할 필요가 없는 곳)



















1. 테스트
    cd app1
    npm run start
