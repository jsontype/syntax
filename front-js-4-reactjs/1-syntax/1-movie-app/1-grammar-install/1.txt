[React의 정의, 배우는 이유]

1. 리액트란?
    페이스북에서 개발한 JS SPA 라이브러리이다.

1. 뷰와 리액트 차이점이 무엇인가요?
    뷰는 프레임워크    
    1. State 관리, Life Cycle Method가 내장되어 있어서 별도의 라이브러리가 필요가 없다.
    2. html, css, js 각각의 특성을 살려서 구현하는 경향이 있다.
    3. B2B Saas에 좀 더 유리한 느낌이다.
    4. 장점 : 숙련자들 사이에서, 생산성 측면에서는 뷰가 더 좋다는 의견이 많다.

    리액트는 라이브러리
    1. State 관리에 Redux. Life Cycle 구현에 Hooks를 쓴다.
    2. html, css를 js가 다 함수로 처리해서 구현하는 경향이 있다.
    3. B2C Saas에 좀 더 유리한 느낌이다.
    4. 장점 : 커뮤니티가 가장 크다. 구조가 뷰에 비해 단순하다. 단순히 JS 함수와 JSX로 구성됩니다.

    옵션
    1. 동기 State 관리: react-redux / mobx-react 중 택1
    2. 라이프사이클메소드 구현: 함수형 컴포넌트 + 리액트 Hooks / 클래스형 컴포넌트 중 택1
    3. API호출, IO System 등 비동기처리: 리액트쿼리 / 리덕스썽크 / 리덕스사가 중 택1


1. 리액트를 배워야 하는 이유
    어떤 것을 배운다는 것은, 그것에 베팅해본다는 의미라고 생각한다.
    개발자의 인생에서 가장 중요한 것, 개발자로서 가장 중요한 자원은 바로 시간이다.
    여러분이 무언가를 배우는 데 2달이 걸렸다고 하자. 그런데 1년이 지나니까 사라졌다면
    그건 배우기에 좋은 도구가 아니었던 거다.
    2달을 그냥 낭비해버린 것이기 때문이다.
    만일 무언가를 배우는데 2달이 걸렸다.
    그런데 그것을 5년 7년 10년을 쓸 수 있다고 해보자.
    그것이 바로 좋은 선택이고, 훌륭한 시간 투자인거다.

    자, 어떤 베팅은 다른 것보다 더 위험하기도 하다.
    여러분이 신기술을 배울 때 중요한 것은
    첫 번째, 누가 이 기술을 사용하는지, 
    두 번째, 그들의 규모가 얼마나 큰 지 꼭 살펴봐야 한다.
    세 번째, 그리고 이 기술이 그들에게 얼마나 중요한 지도 봐야한다.
        (1)예를 들어, 상위 1만개의 웹사이트 중 44.76%는 리액트를 사용한다.
        전세계 상위 1만개의 큰 웹사이트중에서도 가장 많은 비율이다.
        (2)그들은 에어비앤비, 인스타그램, 페이스북, 넷플릭스와 같은 큰 회사들이다.
        그럼, 리액트가 그들에게 얼마나 중요한가?
        넷플릭스 웹사이트는 넷플릭스에게 얼마나 중요한가?
        페이스북 웹사이트는 페이스북에게 얼마나 중요한가?
        (3)엄청나게 중요하다. 그런데 이 회사들이 리액트로 작업을 한다는 거다.
    
    프론트엔드 개발자로서 리액트를 배우는 것은 정말 최고의 선택이다. 리액트는 최고의 도구이고, 최고의 시간투자이다.



[React 설치]

1. 리액트 설치하기 전 필수 설치 항목
    NodeJS 설치 확인 : node -v, npm -v
    git 설치 확인 : git -v
    npx 설치 확인 : npx -v
    npx 설치 : npm install npx -g

1. 리액트, 웹팩 동시 설치
    npx create-react-app app1
    참조 : 웹팩이란?
        우리가 사용하는 코드는 리액트코드이기 때문에 이걸 브라우져가 이해할수 있는 코드로 바꿔주는 툴이 필요하다.
        웹팩은 리액트 코드를 브라우저가 이해할 수 있는 코드로 변경해주는 역할을 한다.
        자세히 말하면 .js, .jade .coffee .png .less .css .sass 가 얽혀있는 구조들이 웹팩을 통해 정상적인 .css .js .png로 확장자가 변경된다는 것이다.
        그러나 웹팩(webpack.github.io)은 배우기에 상당히 복잡하고 어렵다.
        그래서 페이스북이 우리같은 초보자들을 위해 제공하는 것이 있다. 
        create-react-app 안에, 웹팩 파일을 숨겨놓는 방법이다.
        이를 통해 자동으로 리액트와 웹팩을 함께 설치할 수 있는 것이다.

1. 리액트 실행
    npm run start
    localhost:3000에 가본다.



1. 리액트 폴더구조, 컴포넌트 소개
    src/index.js
        react-dom : 리액트와 돔을 연결한다.
        App : 앱 컴포넌트를 연결한다.
    src/index.js의 <React.StrictMode>에 대해서
        StricMode란, 애플리케이션 내의 잠재적인 문제를 알아내기 위한 도구이며,
        자손들에 대한 부가적인 검사와 경고를 활성화한다.
        개발 모드에서만 활성화되기 때문에, 프로덕션 빌드에는 영향을 끼치지 않는다.
    src/App.js
        메인 화면을 구성하는 부분
        예전에는 App()을 클래스로 만들었다.
            class App extends React.Component {}
        그러나, 2018-2019년에는 리액트 훅스가 나오면서, App()을 함수로 구현하고 있다.
            function App() {}
        예전에 만들어진 코드를 읽으려면 클래스로 선언하는 방식도 있다는 것 정도는 알아둘 필요는 있다.
        JSX를 사용한다.
            JSX란, React와 함께 사용하는, JS를 확장한 문법이다.
            React를 임포트하고, App() 함수를 만들고, 이를 사용하고자 하는 곳(index.js)에서 임포트를 한 다음, <App />으로 도입 가능한 방식이다.
            App.js에서 보면, div 태그의 class를 className이라 한다던지 등 기존 문법에 약간의 차이가 있다.



1. 초기 세팅
    src/index.js
        reportWebVitals 삭제
    src/App.js
        <div className="App"> 내부를 다음과 같이 바꾼다.
            Hello React
    src/내 불필요한 파일 삭제
        사용하지 않는 logo.svg 파일, 임포트허눈 부분을 지운다.
        사용하지 않는 App.css 파일, 임포트허눈 부분을 지운다.
        사용하지 않는 reportWebVitals.js 파일 삭제



1. 리액트 실행
    npm run start
    localhost:3000에 가본다.
