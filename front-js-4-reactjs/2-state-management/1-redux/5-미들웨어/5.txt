[Redux 미들웨어]

1. 미들웨어란?
    Action 같은 것들은 다 기본적으로 객체이며, 동기 처리를 한다.

    Dispatch를 하면, Action이 Reducer랑 매칭이 되는데,
    Dispatch와 Reducer의, 그 사이에 동작하는 미들웨어라는 게 있다.
    이 중에서 많이 쓰는 것은 redux-saga, redux-thunk이다.

    항상 비동기를 다루기 위해서만 미들웨어를 쓰는 게 아니라,
    그냥, 디스패치랑 리듀서 사이에 어떤 동작이든 할 수 있게 해주는 게 미들웨어라고 보면 된다.
    예를 들면, 로깅, 데브툴, 등등..
    ...이 있는데 아무튼, 적용 위치는 디스패치랑 리듀서 사이. 이 위치를 아는 게 핵심이다.



1. 5.js에서 
    최상단에 compose, applyMiddleware 임포트를 추가한다.
       const { createStore, compose, applyMiddleware } = require('redux')

    createStore 함수 위에 다음 코드를 추가한다.
        // 미들웨어
        const firstMiddleware = (store) => (dispatch) => (action) => {
            console.log('액션 로깅', action)
            // TODO: 디스패치하기 전에 실행할 기능은 여기에 추가
            dispatch(action)
            // TODO: 디스패치한 뒤 실행할 기능은 여기에 추가
            console.log('액션 끝')
        }
        // 위 삼단 함수는 아래와 같은 의미이다.
        // function firstMiddleware(store) {
        //    return function (dispatch) {
        //        return function (action) {
        //            ...
        //        }
        //    }
        //}

        // compose: devtool 등의 다른 미들웨어들도 보통 함께 사용하는 데, 그때 그들을 합쳐준다.
        const enhancer = compose(
            applyMiddleware(firstMiddleware),
        )

    creatStore 함수 파라미터 안에 enhancer를 추가한다.
    enhancer란 Store 기능을 덧붙이다, 증강시킨다는 뜻으로 이해하자.
        // store 생성
        const store = createStore(reducer, initialState, enhancer)
