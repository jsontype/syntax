[useCallback을 사용하여 함수 재사용하기]

1. 함수 성능최적화 : 특정 함수를 useCallback라는 Hook을 사용하여 재사용한다. 이를 쓸 때, 모든 함수는 함수형 업데이트(const sth = () => {}, setState(state => {})의 형태)가 되어있어야 한다.
    * 사실, useCallback은 useMemo다. 함수를 위해서 사용 할 때 더욱 편하게 표현식을 변경해줬을 것 뿐이다. 
    * 원래, useCallback대신, const onToggle = useMemo(() => () => {}, [users]) 이렇게 해도 된다.

1. src/App.js 수정
    최상단에 { useCallback } 추가
        import React, { useRef, useState, useMemo, useCallback } from 'react'

    onChange, onCreate, onRemove, onToggle 변경
        const onChange = useCallback(e => {
            const { name, value } = e.target
                setInputs(inputs => ({
                ...inputs,
                [name]: value
            }))
        }, [inputs])

        const onCreate = useCallback(() => {
            const user = {
                id: nextId.current,
                username,
                email
            }
            setUsers(users.concat(user))

            setInputs({
                username: '',
                email: ''
            })
            nextId.current += 1
        }, [users, username, email])

        const onRemove = useCallback(
            id => {
                // user.id 가 파라미터로 일치하지 않는 원소만 추출해서 새로운 배열을 만듬
                // = user.id 가 id 인 것을 제거함
                setUsers(users.filter(user => user.id !== id))
            },
            [users]
        )
        
        const onToggle = useCallback(
            id => {
                setUsers(
                    users.map(user =>
                    user.id === id ? { ...user, active: !user.active } : user
                    )
                )
            },
            [users]
        )

1. 주의할 점 : 함수 안에서 사용하는 상태 혹은 props 가 있다면 꼭, deps 배열안에 포함시켜야 된다.
    만약에 deps 배열 안에 함수에서 사용하는 값을 넣지 않게 된다면, 함수 내에서 해당 값들을 참조할때 가장 최신 값을 참조 할 것이라고 보장 할 수 없다.
    props 로 받아온 함수가 있다면, 이 또한 deps 에 넣어주어야 한다.    

1. 중간테스트 : 여전히, input이 바뀔 때에 UserList 컴포넌트가 리렌더링 되고 있다.
    미리 크롬 웹스토어에서 React Developer Tools를 설치한다.
    추가로 크롬 웹스토어에서 React Context Devtools를 설치 후, 설정에 들어가서 하이라이트 보기를 체크 후, 개발자 도구의 Profiler를 켠다.
    cd app1
    npm start



[React.memo를 사용한 컴포넌트 리렌더링 방지]

1. React.memo : 이 함수를 통해, 컴포넌트의 props가 바뀌지 않았다면, 리렌더링을 방지하여 컴포넌트의 리렌더링 성능 최적화를 해줄 수 있다.
    사용법은 굉장히 쉽다.
    그냥 감싸주면 된다.

1. src/CreateUser.js 수정
    함수형 컴포넌트 선언부에서 export default 빼고 최하단부 다음으로 수정
        export default React.memo(CreateUser)

1. src/UserList.js 수정
    function User({ user, onRemove, onToggle }) 줄을 다음과 같이 수정
        const User = React.memo(function User({ user, onRemove, onToggle }) {
            ...(기존 소스코드)
        ) // React.memo() 닫기

    함수형 컴포넌트 선언부에서 export default 빼고 최하단부 다음으로 수정
        export default React.memo(UserList)
        
1. 중간테스트
    React Context Devtools Profiler을 켠다.
    cd app1
    npm start



[함수형 업데이트]
1. 현재는, 유저를 눌러 초록색으로 만들면, 유저리스트 전체가 다시 불러와진다.
    이유는, 셋다 deps에 users가 들어있기 때문에, users 배열이 바뀔 때마다, onCreate, onToggle, onRemove 함수가 새로 만들어지기 때문이다.
    이를 해결하는 방법은 함수형 업데이트를 하는 것이다.

1. src/App.js 수정 : 함수형 업데이트를 통해서, setUsers에 등록하는 콜백함수의 파라미터에서 최신 users를 참조할 수 있기 때문에, deps에 users를 넣지 않아도 된다.
    onChange, onCreate, onRemove, onToggle 변경

        const onChange = useCallback(e => {
            const { name, value } = e.target
                setInputs(inputs => ({
                ...inputs,
                [name]: value
            }))
        }, [])

        const onCreate = useCallback(() => {
            const user = {
                id: nextId.current,
                username,
                email
            }
            
            setUsers(users => users.concat(user))

            setInputs({
                username: '',
                email: ''
            })
            nextId.current += 1
        }, [username, email])

        const onRemove = useCallback(id => {
            // user.id 가 파라미터로 일치하지 않는 원소만 추출해서 새로운 배열을 만듬
            // = user.id 가 id 인 것을 제거함
            setUsers(users => users.filter(user => user.id !== id))
        }, [])

        const onToggle = useCallback(id => {
            setUsers(users =>
                users.map(user =>
                    user.id === id ? { ...user, active: !user.active } : user
                )
            )
        }, [])

1. 테스트 : 최적화가 잘 된 것을 확인할 수 있다.
    React Context Devtools Profiler을 켠다.
    cd app1
    npm start

1. 주의사항
    테스트할 때 브라우저 에러로 React.memo를 해도 컴포넌트가 리랜더링 되는 것처럼 보이는 경우도 있는데, 실제로 console.log를 찍어보면 리랜더링 되지 않는 것을 확실히 확인할 수 있다.
    useMemo, useCallback, React.memo는 컴포넌트의 성능을 실제로 개선할 수 있는 상황에서만 해야한다. 불필요한 곳에 이들을 넣게 되면, 불필요한 props 비교만 하는 것이기 때문에 오히려 속도가 느려질 수 있다.
        * 예를 들어, User 컴포넌트에서 b와 button에 onClick으로 설정해준 함수는, useCallback을 쓴다 해도 리렌더링을 막을 수 없으므로 할 필요가 없다.        

1. 과제: 다음 진도로 넘어가기전에, 전에 만들었던 movieApp의 최적화를 한번 해보자. (미완)
