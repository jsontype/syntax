[SELECT문: 형 변환 함수]
참조: https://stricky.tistory.com/232
데이터를 핸들링하다 보면 그 형태를 다른 형태로 변환해야 하는 경우가 생기기도 합니다.
데이터베이스는 데이터의 형태를 쉽게 변형할 수 있도록 함수를 제공하고 있습니다.

1. 절차
A5M2에서 mysql에 접속한 뒤, Query-1 탭을 클릭
SQL 입력 (★ A5M2에 입력할 때는 마지막 구분자 ;를 쓰지 않는다.)
커런트스키마에서 ctrl + F5로 커밋결과 리프레쉬

1. mysql의 데이터 타입 알아보기
1) 문자형 데이터 타입
데이터 유형 / 정의
CHAR[(M)] / 고정 길이를 갖는 문자열을 저장. M은 1 ~ 255(2^8 - 1). CHAR(20)인 칼럼에10자만 저장을 하더라도, 20자만큼의 기억 장소를 차지.
VARCHAR[(M)] / 가변 길이를 갖는 문자열을 저장. M은 1 ~ 65535(2^16 - 1). VARCHAR(20)인 칼럼에 10자만 저장을 하면, 실제로도 10자만큼의 기억 장소를 차지.
TINYTEXT[(M)] / 최대 255(2^8 - 1) bytebyte
TEXT[(M)] / 최대 65535(2^16 - 1) bytebyte
MEDIUMTEXT[(M)] / 최대 16777215(2^24 - 1) bytebyte
LONGTEXT[(M)] / 최대 4294967295(2^32 - 1) bytebyte
ENUM('value1', 'value2',...) / 열거형. 정해진 몇 가지의 값들 중 하나만 저장. 최대 65535개의 개별 값을 가질 수 있고, 내부적으로 정수 값으로 표현된다.
SET('value1', 'value2',...) / 집합형. 정해진 몇 가지의 값들 중 여러 개를 저장. 최대 64개의 요소로 구성될 수 있고, 내부적으로는 정수 값이다.

2) 숫자형 데이터 타입
데이터 유형 / 바이트 / 정의 * (signed) 부호를 가지는 값, 양수 음수 구별 가능 (unsigned) 부호를 가지지 않는 값, 오직 양수
BIT[(M)] / 1 / 비트 값 유형. M은 값 당 비트 수를 나타내며 1에서 64 사이의 값을 나타냄.
BOOL, BOOLEAN / 1 / 이 유형은 TINYINT (1)의 동의어. 0은 false, 0이 아닌 값은 true로 간주
TINYINT[(M)] / 1 / (signed) -128 ~ 127 (unsigned) 0 ~ 255(2^8)
SMALLINT[(M)] / 2 / (signed) -32768 ~ 32767 (unsigned) 0 ~ 65535(2^16)
MEDIUMINT[(M)] / 3 / (signed) -8388608 ~ 8388607 (unsigned) 0 ~ 16777215(2^24)
INT[(M)] / 4 / (signed) -2147483648 ~ 2147483647 (unsigned) 0 ~ 4294967295(2^32)
BIGINT[(M)] / 8 / (signed) -9223372036854775808 ~ 9223372036854775807 (unsigned) 0 ~ 18446744073709551615(2^64)
FLOAT[(M, D)] / 4 / (signed) -3.402823466E+38 ~ 1.175494351 E-38 (unsigned) 1.175494351 E-38 ~ 3.402823466E+38
DOUBLE[(M, D)], DOUBLE PRECISION[(M, D)], REAL[(M, D)] / 8 / (signed) -1.7976931348623157E+908 ~ -2.2250738585072014 E-308 (unsigned) 2.2250738585072014 E-308 ~ 1.7976931348623157E+308
FLOAT(p) / / 부동 소수점 숫자. p는 비트 정밀도를 가리키지만, MySQL은 결과 데이터 타입으로 FLOAT 또는 DOUBLE을 사용할지를 결정할 때에만 이 값을 사용한다.
DECIMAL[(M [, D])] / 길이+1 / 묶음 고정 소수점 숫자. M은 전체 자릿수(Precision : 정밀도), D는 소수점 뒷자리수(Scale : 배율), 최대 65자리까지 지원
- DECIMAL(5)의 경우 : -99999 ~ 99999
- DECIMAL(5, 1)의 경우 : -9999.9 ~ 9999.9
- DECIMAL(5, 2)의 경우 : -999.99 ~ 999.99
DEC[(M [, D])], NUMERIC[(M [, D])], FIXED[(M [, D])] / / DECIMAL과 동의어다. FIXED 동의어는 다른 데이터베이스 시스템과의 호환을 위해서 사용.

3) 날짜형 데이터 타입
데이터 유형 / 바이트 / 정의
DATE / 3 / YYYY-MM-DD('1001-01-01' ~ '9999-12-31')
TIME / 3 / HH:MM:SS('-838:59:59' ~ '838:59:59')
DATETIME / 8 / YYYY-MM-DD HH:MM:SS('1001-01-01 00:00:00' ~ '9999-12-31 23:59:59')
TIMESTAMP[(M)] / 4 / 1970-01-01 ~ 2037년 임의 시간(1970-01-01 00:00:00을 0으로 해서 1초 단위로 표기)
YEAR[(2|4)] / 1 / 2와 4를 지정할 수 있으며, 2인 경우에 값의 범위는 70 ~ 69, 4인 경우에는 1970 ~ 2069이다.

4) 이진형 데이터 타입
데이터 유형 / 정의 * M은 바이트 단위의 열 길이를 나타냄.
BINARY[(M)] / CHAR 유형과 유사하지만 이진 바이트 문자열을 이진이 아닌 문자열로 저장. 
VARBINARY[(M)] / VARCHAR 유형과 유사하지만 이진 바이트 문자열을 이진이 아닌 문자열로 저장. 
TINYBLOB[(M)] / 이진 데이터 타입. 최대 255(2^8 - 1) byte
BLOB[(M)] / 이진 데이터 타입. 최대 65535(2^16 - 1) byte
MEDIUMBLOB[(M)] / 이진 데이터 타입. 최대 16777215(2^24 - 1) byte
LONGBLOB[(M)] / 이진 데이터 타입. 최대 4294967295(2^32 - 1) byte

1. 묵시적 형 변환 : 데이터의 형태를 사용자의 의도에 맞춰서 데이터 베이스가 알아서 형 변환하여 결과를 출력하는 행위.
아래의 쿼리를 보겠습니다.
100과 200을 더하는 SQL 명령입니다. 100, 200 모두 숫자로 입력을 했습니다. 당연히 결괏값 300이 출력됩니다.
select 100 + 200
이번에는 100, 200 모두 문자로 바꿔서 입력 후 연산을 해보겠습니다.
select '100' + '200'
이렇게 해도 계산이 잘 됩니다.
이번에는 숫자 + 문자열을 합쳐서 하나의 문자열로 만드는 시도를 concat 함수를 통해서 해보겠습니다.
select concat(82,'는 대한민국 국가 식별 전화번호')
잘 합쳐서 출력이 됩니다.
이와 같이 문자에서 숫자로, 숫자에서 문자로 
사용자의 의도에 맞게 데이터 형태가 자동으로 변환되는 것을 묵시적 형 변환이라고 표현합니다.
그러나 이는 DB 종류마다 변환 방법이 다르니, 가급적 묵시적 변환은 지양하는 것이 좋습니다.

1. CAST, CONVERT 함수 사용 하기
CAST 함수란 mysql에서 데이터 타입을 서로 변환시켜주는 형 변환 함수입니다.
CONVERT 함수의 사용법도 거의 같기 때문에 직접 실습을 통해서 해보시길 바랍니다.
사용법 : 
CAST (표현할 값 AS  데이터 형식[(길이)])
CONVERT (표현할 값 ,  데이터 형식[(길이)])

select cast(100 as char) as num_to_char, cast('100' as signed) as char_to_num
숫자데이터의 경우, 같은 숫자라도 좌측에 붙어있으면 문자, 우측에 붙어 있으면 숫자로 인식합니다.
즉, 결과값이 각각 좌측, 우측에 붙어있다면, 제대로 함수가 작동한 것입니다.
(* cast 함수로 char에서 int로 바꿀 때, mariadb는 int가 가능하지만 mysql은 signed로 해주셔야 바뀝니다.)

select '2016-08-25 03:30:00', cast('2016-08-25 03:30:00' as datetime) as char_to_datetime
앞에는 그냥 문자열로 인식이 되는 데이터이고요, 
뒤에 있는 char_to_datetime은 날짜 형식의 데이터로 인식이 되는 형태로 출력이 될 것입니다.
