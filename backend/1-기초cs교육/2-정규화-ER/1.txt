[기본 데이터베이스 지식: 정규화, ER 설계의 기본 등]

1. 데이터베이스 개요
  - 데이터베이스(DB): 여러 사람이 공유하고 사용할 목적으로 체계적으로 저장된 데이터의 집합
  - DBMS(Database Management System): DB를 생성, 관리, 활용할 수 있는 소프트웨어 (예: MySQL, PostgreSQL, Oracle 등)
  - 장점: 데이터 중복 최소화, 일관성 유지, 보안 강화, 동시성 제어

2. ER(Entity-Relationship) 설계 기초
  - 목적: 현실 세계의 개체(Entity), 속성(Attribute), 관계(Relationship)를 모델링
  - Entity: 독립적으로 존재하는 객체 (예: 학생, 강의, 교수)
  - Attribute: 엔티티의 속성 (예: 학생 → 학번, 이름, 전공)
  - Primary Key(PK): 각 엔티티 인스턴스를 유일하게 식별하는 속성
  - Relationship: 엔티티 간의 연관성 (예: 학생 - 수강한다 - 강의)
  - Cardinality: 관계의 대응수 (1:1, 1:N, M:N)
  - ERD(Entity Relationship Diagram): 엔티티, 속성, 관계를 도식화한 다이어그램

  Entity-Relationship Diagram 예시:
      (개체: Entity)-(관계: Relationship)-(개체: Entity)
      [학생]---(수강한다)---[강의]
       |                   | (속성들: Attributes)
      학번(PK)           강의코드(PK, 기본키 속성: Primary Key Attribute)
      이름               강의명
      전공               학점

3. 정규화(Normalization) 기본 개념
  - 목적: 데이터 중복을 줄이고 이상현상(Anomaly)을 방지하기 위함
  - 이상현상(Anomaly):
    * 삽입 이상(Insertion Anomaly)
    * 삭제 이상(Deletion Anomaly)
    * 갱신 이상(Update Anomaly)
  - 정규화 단계
    1정규형(1NF): 모든 속성의 값이 더 이상 나눌 수 없는 원자값(Atomic Value)이어야 함.
      - 예시: 한 학생의 수강 과목을 한 셀에 "수학, 영어, 과학"처럼 쉼표로 구분하여 저장하면 1NF 위반. → 과목 정보를 별도 테이블로 분리하여 학생-과목 관계로 관리.
    2정규형(2NF): 기본키가 여러 컬럼(예: 회원ID, 도서ID)으로 이루어진 경우, 기본키 전체가 아니라 일부 컬럼에만 의존하는 속성은 따로 분리해야 함.
      - 예시: 도서 대여 테이블에서 (회원ID, 도서ID) → 대여일, 도서명. 도서명은 도서ID만 알면 알 수 있으므로 회원ID와는 관계없음. → 도서명은 도서 테이블로 분리.
        [정규화 전 테이블]
        ┌────────┬─────────┬──────────────┬──────────────┐
        │ 회원ID │ 도서ID  │   대여일     │   도서명     │
        ├────────┼─────────┼──────────────┼──────────────┤
        │  A001  │  B100   │ 2024-01-01   │ 데이터베이스 │
        │  A002  │  B101   │ 2024-01-02   │ 운영체제     │
        └────────┴─────────┴──────────────┴──────────────┘
        ▼ ▼ ▼
        [정규화 후 테이블]
        (1) 도서 대여 테이블
        ┌────────┬─────────┬──────────────┐
        │ 회원ID │ 도서ID  │   대여일     │
        ├────────┼─────────┼──────────────┤
        │  A001  │  B100   │ 2024-01-01   │
        │  A002  │  B101   │ 2024-01-02   │
        └────────┴─────────┴──────────────┘
        (2) 도서 테이블
        ┌─────────┬──────────────┐
        │ 도서ID  │   도서명     │
        ├─────────┼──────────────┤
        │  B100   │ 데이터베이스 │
        │  B101   │ 운영체제     │
        └─────────┴──────────────┘
        ├─────────┼──────────────┤
        │  B100   │ 데이터베이스 │
        │  B101   │ 운영체제     │
        └─────────┴──────────────┘
    3정규형(3NF): 기본키가 아닌 속성이 또 다른 기본키가 아닌 속성에 의존하는 경우를 없애야 함.
      - 예시: 학생 테이블에 학번(PK), 강의코드, 학과명이 있다고 할 때, 학과명은 학번이 아니라 강의코드에 의해 결정됨. 이 경우 학과명은 강의 테이블로 분리해야 함.
    정리: 1NF는 원자값, 2NF는 부분 종속 제거, 3NF는 이행 종속 제거를 의미하며, 각 단계마다 테이블을 분리하여 데이터 중복과 이상현상을 방지함.
    
  - 정규화와 성능
    장점: 데이터 무결성 확보, 중복 최소화
    단점: 지나친 정규화는 조인(Join) 과다 발생 → 성능 저하 가능
    실무에서는 정규화를 기반으로 하되, 필요에 따라 역정규화(Denormalization)를 적용

4. DB 설계 시의 주의점
  Primary Key, Foreign Key를 올바르게 지정
  ERD를 기반으로 테이블 스키마 생성
  관계(Relationship)의 Cardinality를 명확히 정의
  데이터 중복은 최소화하되, 조회 성능을 고려
