[로더]

1. 사전준비: 프로젝트를 새로 깔지 않고, 이전 챕터에서의 코드를 그대로 카피해서 가지고 온다.

1. 로더
    로더는 파일을 해석하고 변환하는 과정에 관여하는 툴이다.
    해석을 통해, 로더는 빌드시에 각종 파일들의 "로딩"을 할 수 있게 해준다.
    js는 번들링을 하더라도 기본적으로 동일한 버전의 js만 임포트를 허용하지, 
    그 외의 파일은 임포트를 허용하지 않으며, 이때에는 별도의 "로더"가 필요하다.
    예를 들어, CSS Loader가 없다면, CSS 파일을 임포트할 때 에러가 날 것이다.
    이렇듯, 웹팩은 임포트를 가능하게 해주는 번들러와 함께, 여러가지 로더가 함께 제공되는 것이다.

1. 자주 사용되는 로더 종류
    실제 서비스를 만들 때 자주 사용되는 로더의 종류는 다음과 같다.
        Babel Loader : 브라우져마다 지원하는 js 버전이 상이할 경우 해당 js 문법을 브라우져에 맞게 컨버전해서 로딩해준다.
        CSS Loader : js 파일 안에서 CSS 파일을 임포트할 수 있게 로딩해준다.
        SASS Loader : js 파일 안에서 SASS 파일을 임포트할 수 있게 로딩해준다.
        File Loader : js 파일 안에서 encrypt 파일을 임포트할 수 있게 로딩해준다.
        TS Loader : js 파일 안에서 typescript 파일을 로딩해준다.
    로더가 무슨 역할을 하는지 개념만 이해하고 넘어가면 되고 따로 깊게 공부할 필요는 없겠다.
    왜냐면, vue cli나 react create-react-app 또는 create-next-app과 같은 cli를 통해 앱을 설치한다면 
    웹팩(과 더불어 각종 필요한 로더들)이 자동으로 제공되기 때문이다.
    그래서 하나만 로더의 예시로서 간략하게 확인해보겠다.
    여기서는 가장 필수적이라 할 수 있는 바벨로더에 대해서 배워보도록 하겠다.

1. 바벨 로더
    바벨은 "트랜스 컴파일러" 라이브러리이다.
    바벨은 웹팩에 도입하는 로더 모듈중 하나로, "트랜스파일링으로 브라우저에 JS 버전 최적화"를 해주는 모듈이다.
    (* 자바스크립트는 인터프리터 언어이기 때문에 실제로는 컴파일하지 않는 언어이다. 그래서 바벨같은 형태는 트랜스 컴파일링이라고 부르게 되었다.)

1. 바벨의 기능 : 트랜스파일링(Transpiling)
    브라우저의 ES6 지원상황은 계속 변한다.
        참조(브라우저별 ECMAScript 호환성 표) : http://kangax.github.io/compat-table/es6/
    바벨은, 최근 브라우저에 맞게 트랜스파일링을 해준다.
        트랜스파일링 : 코드의 ES 버전을 브라우저 호환성에 맞춰서 변경해주는 것

1. 바벨 설치 순서
    $ npm i
    $ npm i babel-loader
    npm audit fix
    $ npm i babel-preset-env --save-dev
    webpack.config.js의 rules 키에 추가
        rules: [{
            test: /\.js$/,
            include: path.resolve(__dirname, 'src'),
            use: {
                loader: 'babel-loader',
                options: {
                    presets: [
                        ['env', {
                            'targets': {
                                'browsers': ["last 2 versions", "ie 9", "ios 15"]
                            },
                            'debug': true
                        }]
                    ]
                }
            }
        }]

1. 테스트 : 맥에서 해야함
    $ npm run build
        "last 2 versions" : 실행된 디버깅 로그에서 Using targets를 확인하면, 브라우저별 최신 2 버전들을 채용하는 것을 알 수 있다.
        "ie 9", "ios 15" : 추가 옵션 설정으로, ie 옵션이 9, ios 옵션이 15로 수동으로 지원 버전을 설정하는 것을 볼 수 있다.
        이것으로 각 브라우저에서 구동시 해당 버전까지 트랜스파일링을 지원해달라는 명령을 주는 것이고, 
        이후 알아서 바벨이 트랜스파일링에 필요한 플러그인을 찾아서 설정을 해준다.
