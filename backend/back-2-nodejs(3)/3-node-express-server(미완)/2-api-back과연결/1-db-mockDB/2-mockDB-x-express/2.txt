[Node.js(express)와 MockDB를 연동하기]

1. 사전준비 : 프로젝트를 새로 깔지 않고, 이전 챕터에서의 코드를 그대로 카피해서 가지고 온다.

1. package.json 수정 : 디펜던시에 express를 추가한다.
  {
    "name": "app1",
    "version": "1.0.0",
    "description": "",
    "main": "app.js",
    "scripts": {
      "start": "node app"
    },
    "dependencies": {
      "express": "^4.18.2"
    }
  }

1. 설치
  $ npm i

1. routes/users.js 생성 : DB 정보에 get, post로 액서스할 API 로직 생성
  const express = require("express")

  // API URI를 라우팅하는 객체
  const router = express.Router()

  // Mock DB 객체
  const User = require("../models/User")

  /** API 라우트 리스트 */
  // [GET] 유저 조회 API : Read users
  router.get("/:userId?", (req, res) => {
    // 1. ID에 해당하는 유저 조회 : "/:userId?" 정보(=req.params.userId)가 있을 때
    const { userId } = req.params
    // req.params.userId가 있을 시 해당 유저 정보를 리턴한다.
    if (userId) {
      for (let i = 0; i < User.length; i++) {
        if (User[i].userId == userId) {
          return res.send(User[i])
        }
      }
      // req.params.userId의 해당 유저 정보가 존재하지 않으면 404를 리턴한다.
      return res.status(404).send("user not found")
    }
    // 2. 전체 유저 목록 조회 : "/:userId?" 정보가 없을 때 모든 유저 정보를 리턴한다.
    return res.send(User)
  })

  // [POST] 유저 생성 API : Create user
  router.post("/create", (req, res) => {
    const { userId, password, info } = req.body
    User.push({ userId, password, info })
    return res.send(User)
  })

  // [DELETE] 유저 삭제 API : Delete user (* 참고로 DELETE 말고 POST로도 구현 가능)
  router.delete("/:userId", (req, res) => {
    for (let i = 0; i < User.length; i++) {
      // userId를 가진 유저 정보를 찾는다.
      if (User[i].userId == req.params.userId) {
        // 유저 정보를 삭제하고 남은 유저들의 정보를 리턴한다.
        User.splice(i, 1)
        return res.send(User)
      }
    }
    // userId를 가진 유저가 없으면 404를 리턴한다.
    return res.status(404).send("user not found")
  })

  module.exports = router



1. index.js 생성 : 서버와 API 연동
  const express = require("express")
  const app = express()
  const port = 3000

  // app.get("/", (req, res) => res.send("Hello World!"))
  // app.use("/", (req, res) => res.sendFile(__dirname + "/index.html"))

  // api doc 연결
  const readme = `
    <div>
      <h2>API 리스트</h2>
      <ul>
        <li><a href="#">[GET] https://jsontype.github.io/api</a> : API DOCUMENTATION</li>
        <li><a href="#">[GET] https://jsontype.github.io/api/users</a> : 전체 유저 목록 조회</li>
        <li><a href="#">[GET] https://jsontype.github.io/api/users/:userId</a> : ID에 해당하는 유저 조회</li>
      </ul>
    </div>
  `
  app.get("/", (req, res) => {
    return res.send(readme)
  })

  // api 연결
  app.use(express.json())
  app.use(express.urlencoded({ extended: false }))
  const userRouter = require("./routes/users")
  app.use("/users", userRouter)

  // port listner 연결
  app.listen(port, () => console.log(`listening on port ${port}!`))



1. 불필요 파일 삭제
  app.js

1. 테스트 : 브라우져 상에서 가능한 것은 GET뿐이므로 GET만 테스트
  $ cd app1
  $ npm start
