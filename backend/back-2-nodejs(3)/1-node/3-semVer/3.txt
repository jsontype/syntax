[semVer]

1. package.json의 semVer란?
    노드 패키지들의 버전은 세 자리로 되어있는데, 
    이는 SemVer 방식의 버전 넘버링을 따르기 때문이다.
    SemVer는 Semantic Versioning(유의적 버전)의 약어인데,
    이는 버전을 구성하는 세 자리가 모두 의미가 있다는 뜻이다.
    서비스를 개발하다 보면, 정말 많은 패키지들을 사용하게 되는데,
    이런 많은 패키지들이 서로 얽히다 보면 문제가 생길 수 있다.
    예를 들어, 어떤 패키지의 버전을 업그레이드 했는데, 그것을 사용하는 다른 패키지에서 에러가 발생한다면 문제가 된다.
    따라서 버전 번호를 어떻게 정하고, 올려야 하는지를 명시하는 규칙을 만들었는데, 이것이 바로 SemVer이다.
    버전은 세 자리로 구성되어 있다.
    major 버전: 하위 호환이 안될 정도로 패키지의 내용이 수정되었을 때 올린다.
        주 버전이 0이면, 초기 개발 중이라는 뜻이다.
        1부터는 정식 버전이다.
        만약, 1.13.17에서 2.0.0으로 올렸다면, 1.13.17 버전 패키지를 사용하고 있던 사람들이 2.0.0으로 업데이트 했을 때, 에러가 발생할 확률이 크다.
    minor 버전: 하위 호환이 되는 업데이트 시에 올린다.
        만약, 1.13.17에서 1.8.0으로 올렸다면, 1.13.17 사용자가 1.8.0으로 업데이트 했을 때, 아무 문제가 없어야 한다.
    patch 버전: 새로운 기능이 추가되었다기 보다는, 기존 기능에 문제가 있어 수정한 것을 내놓았을 때, patch 버전을 올린다.
        1.7.0에서 1.13.17으로 올렸다면, 업데이트 후 문제가 없어야 한다.
        새 버전을 배포한 후에는, 그 버전의 내용을 절대 수정하면 안된다.
        만약, 수정 사항이 생기면, major버전, minor 버전, patch버전 중 하나를 의미에 맞게 올려서 새로운 버전으로 배포해야 한다.
    버전의 숫자마다 의미가 부여되어 있기 때문에, 다른 패키지를 사용할 때도 버전만 보고 에러 발생 여부를 판단할 수 있다.
    만약, 의존하는 패키지의 major 버전이 업데이트 되었다면, 
    기존 코드와 호환이 되지 않을 확률이 크기 때문에, 미리 주의를 기울여야 한다. 
    만약, minor나 patch 버전으로 업데이트 되었다면, 상대적으로 안심하고 버전을 올리 수 있다.

1. semVer의 기호에 대하여
    package.json에는 버전 말고도, 다른 기호(‘^’, ‘~’ 등)들이 있다. 
    이런 기호들은 버전에는 포함되지 않지만, 
    설치 또는 업데이트 시 어떤 버전의 범위를 설치해야 하는지 알 수 있다.
    ^(캐럿): minor 버전까지만 설치 또는 업데이트한다.
        예를 들어, npm install express@^1.13.17 이라면, 1.13.17 <= 버전 < 2.0.0까지 설치가 되고, 2.0.0은 설치되지 않는다.
    ~(틸트): patch 버전까지만 설치 또는 업데이트한다.
        npm install express@~1.13.17 이라면, 1.13.17 <= 버전 < 1.8.0까지 설치가 된다.
    ~ 보다 ^가 많이 사용되는 이유는, minor 버전까지는 하위 호환이 되기 때문이다.
    npm semVer calculator에 방문하면, 패키지 별로 버전 표기법을 사용하여, 업데이터 버전 범위를 확인 가능하다.
    참고로, npm install 명령어의 패키명 뒤에 @버전을 추가하면 패키지 버전을 지정하여 설치할 수 있다.
