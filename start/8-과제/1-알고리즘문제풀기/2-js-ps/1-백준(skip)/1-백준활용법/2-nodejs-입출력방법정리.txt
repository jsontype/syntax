[백준 BOJ에서 Node.js 입출력방법 정리]

1. fs vs readline
  fs 모듈의 경우 코드가 간단하여 기본값으로 사용하고,
  시간초과가 나올 때 readline으로 쓴다.



[fs 모듈을 이용하는 방법(백준 제출용)]
1. 한줄로 입력받을 때 
let fs = require('fs');
let input = fs.readFileSync('/dev/stdin').toString().split(' ');
let num = Number(input);
for (let i = 1; i <= num; i++) {
  console.log(i);
}

1. 여러 줄로 입력을 받을 때
let fs = require('fs');
let input = fs.readFileSync('/dev/stdin').toString().split('\n');
let count = input[0];
let numbers = [];
for (let i = 1; i < input.length; i++) {
  if (input[i] !== '') {
    numbers.push(input[i].split(' '));
  }
}
for (let i = 0; i < numbers.length; i++){
  let num1 = Number(numbers[i][0]);
  let num2 = Number(numbers[i][1]);
  console.log(num1 + num2);
}

1. fs 모듈을 이용하는 방법(vscode에서 테스트용)
  테스트코드 폴더 생성
  $ npm install fs
  예제.txt에다가 예제를 카피페
  index.js에서 작업할 때, readFileSync의 경로를 예제.txt의 위치로 수정



[readline 모듈을 이용하는 방법]

1. 한 개의 입력만 받을 때 (띄어쓰기 x)
function solution(input){
  console.log(input);
}
const readline = require("readline");
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});
let input;
rl.on("line", function(line){
  input = line;
  // input = parseInt(line); // 입력 값이 정수라면 parseInt로 형변환
  rl.close();
}).on("close", function(){
  solution(input);
  process.exit();
})
 
1. 한 줄의 입력을 받을 때 (띄어쓰기로 구분)
function solution(input){
  const [a,b] = input;
  const answer = a+b;
  console.log(answer);
}
const readline = require('readline');
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});
let input;
let list = [];
rl.on('line', function(line) {
    input = line;
    rl.close();
}).on("close", function() {
    // list = input.split(' ').map((el) => el); 
    list = input.split(' ').map((el) => parseInt(el)); // 입력값이 정수라면 parseInt로 형 변환
    solution(list);
    process.exit();
});

1. 여러 줄의 입력을 받을 때 1
function solution(n, input) {
  console.log(n);
  console.log(input);
}
const readline = require("readline");
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});
let input = [];
rl.on("line", function(line) {
  input.push(line)
  //rl.close()가 없어서 계속 입력
  //로컬에서 입력을 중지하려면 입력을 한 후 ctrl+d로 입력 종료
}).on("close", function() {
  let n = parseInt(input[0]);
  let list = input[1].split(' ').map((el) => parseInt(el));
  solution(n, list);
  process.exit();
});

1. 여러 줄의 입력을 받을 때 2
// 여러줄 입력시(input1, input2)
function solution(input1, input2) {
  console.log(input1);
  console.log(input2);
}
const readline = require("readline");
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});
let input = [];
rl.on("line", function(line) {
  input.push(line)
  //rl.close()가 없어서 계속 입력
  //로컬에서 입력을 중지하려면 입력을 한 후 ctrl+d로 입력 종료
}).on("close", function() {
  let list1 = input[0].split(' ').map((el) => parseInt(el));
  let list2 = input[1].split(' ').map((el) => parseInt(el));
  solution(list1, list2);
  process.exit();
});
