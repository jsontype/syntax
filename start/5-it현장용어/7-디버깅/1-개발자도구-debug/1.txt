[개발자도구에서 디버깅]

1. ★★ network 탭 : API 호출의 요청과 응답을 확인할 때 사용한다.
  API 호출의 결과값은 굳이 console.log()로 찍어보지 않아도
  네트워크탭을 통해 한눈에 모든 정보를 알 수 있다.

  절차
    F12를 눌러 개발자도구를 연 뒤, network 탭을 연다.
    호출하는 시점의 동작을 실행한다.
    에러 찾기 : Status가 4로 시작하는 빨간 항목을 찾는다. 
    API 찾기 : Type이 fetch인 항목을 찾는다.

  ★★ API 요청이 실패한 곳에 대해서, 백엔드에게 정보를 전달하는 방법
    빨간줄이 뜬 대상 API를 왼쪽 하단에서 우클릭한다.
    카피 -> Copy as cURL(cmd) -> 슬랙에 전달

  ★★ Header : API 요청한 URL과 METHOD, 요청에 대한 HTTP 응답 Status 코드를 확인한다.
    200 - 확인 : 요청이 성공했습니다.
    201 - 생성됨 : 요청이 이행되어 새 리소스가 생성되었습니다.
    202 - 수락됨 : 요청이 처리를 위해 수락되었지만 처리가 완료되지 않았습니다. 통계 리소스 는 이 코드를 반환할 수 있습니다.
    (빨강) 400 - 잘못된 요청 : 요청이 잘못되었습니다. 오류 메시지를 확인하고 다시 시도하십시오.
    (빨강) 401 - 승인되지 않음 : 요청에 인증이 필요하거나 인증이 유효하지 않습니다.
    (빨강) 403 - 금지됨 : 인증되었지만 리소스에 액세스할 수 있는 권한이 없습니다.
    (빨강) 404 - 찾을 수 없음 : 리소스가 존재하지 않습니다.
    (빨강) 429 - 너무 많은 요청 : 속도가 제한되어 있습니다. 5분 동안 평균적으로 초당 10개 미만의 요청을 시도하십시오.
    (빨강) 500 - 서버 오류 : 서비스를 사용할 수 없습니다. 나중에 다시 시도하십시오.

  Payload : API 요청시 같이 보내는 쿼리값을 확인할 수 있다.
    key: 1
    page_size: 10
    등등

  ★ Preview, Response : API로부터 받은 정보를 확인할 수 있다.
    Response : Raw한 형태
    Preview : 좀 더 보기 편한 형태

1. ★★ source 탭 : 변수에 어떤 데이터가 들어갔는지를 확인할 때 사용한다.
  에러가 발생시 : *.js 파일에서 x표시가 있는 부분에서 문제를 찾을 수 있다.
  브레이크포인트 설정 : 해당 소스 행번호를 클릭한다. (복수 체크 가능하다.)
  화면을 새로고침(F5) 한다.
  브레이크포인트에서 멈춰진다.
  브레이크포인트 잡힌 시점에서 좌측 하단 화살표 버튼으로 하나씩 실행하며 flow를 확인한다.
    ↓ 화살표 버튼 : 함수 호출을 따라가며 한줄씩 밑으로 실행 (if 분기는 판별해서 자동으로 넘어감)
    ↑ 화살표 버튼 : 함수 호출을 따라가며 한줄씩 위로 실행
    /↘ over 화살표 버튼 : 함수 호출을 따라가지 않고(결과만 받고) 한줄씩 밑으로 실행
  우측 하단의 Scope 변수들이 어떤 값이 들어가는지 확인한다. (각 브레이크포인트별로 넘기면서 확인할 것)
    Local / Block : 지역변수 / 함수 확인
    Script : 전역변수 / 함수 확인
  확인이 끝난 곳의 브레이크포인트를 푼다.
    소스 행번호 풀면 : 브레이크포인트를 삭제한다. (토글)
    좌측 하단 체크박스로 풀면 : 브레이크포인트를 일시적으로 비활성화한다. 다시 걸수도 있을 때 사용. (토글)
