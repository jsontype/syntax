[모노레포에서의 테스트 자동화]

1. 모노레포에서의 테스트 자동화  
  monorepo/
  ├── packages/ 'sdk, test, tool 패키지를 포함한 폴더'
  │   ├── sdk/
  │   ├── test/
  │   └── tool/
  └── Playground/ 'React 애플리케이션'
  본 챕터에서는 위의 예시 구조를 기반으로, test 패키지에 들어있는 jest 코드들의 테스트 자동화 절차를 설명한다.

1. packages/test/jest.config.js, packages/test/__tests__ 파일 생성 : test 폴더 안에 두 파일을 생성하기
  monorepo/
  ├── packages/
  │   ├── sdk/
  │   ├── test/  'Jest 관련 설정 및 테스트 코드 포함'
  │   │   ├── jest.config.js  '공통 설정'
  │   │   ├── __tests__/      '테스트 코드 폴더'
  │   └── tool/
  └── Playground/

1. packages/test/jest.config.js 작성 : 공통적인 Jest 설정을 넣는다. 각 패키지에서는 이 공통 설정을 확장하거나 오버라이드할 수 있다.
  module.exports = {
    roots: ['<rootDir>/packages/test/__tests__'],
    testMatch: ['**/?(*.)+(spec|test).[jt]s?(x)'],
    moduleFileExtensions: ['js', 'jsx', 'ts', 'tsx'],
    transform: {
      '^.+\\.(ts|tsx)$': 'ts-jest',
    },
    collectCoverage: true,
    coverageDirectory: '<rootDir>/coverage',
    coverageReporters: ['text', 'lcov', 'json', 'html'], // 다양한 형태의 리포트 생성
    collectCoverageFrom: [
      'packages/**/*.{js,jsx,ts,tsx}', // 커버리지 수집 대상
      '!**/node_modules/**', // node_modules 제외
      '!packages/test/**', // test 폴더 제외
    ],
  };

1. package.json 작성 : 루트 폴더의 package.json의 scripts 항목에 test 폴더의 test 실행 스크립트문을 추가
  "scripts": {
    "test": "jest --config ./packages/test/jest.config.js",
    "test:watch": "jest --watch --config ./packages/test/jest.config.js"
  }

1. package.json 수정 : Husky의 Pre-commit/Pre-push Hooks를 사용해 변경된 파일에 대한 테스트가 통과하는지 확인되도록 설정
  "husky": {
    "hooks": {
      "pre-commit": "npm run test"
    }
  }

1. 테스트 커버리지 관리
  coverage 폴더에 커버리지 리포트를 저장하고, 이를 기반으로 테스트 범위를 분석할 수 있다.
  CI/CD 파이프라인에서 이 커버리지를 저장하거나 보고할 수 있다.
  이러한 방식으로 구조화하면, monorepo 내에서 각 패키지의 테스트를 효율적으로 관리하고, Jest 테스트 자동화 및 CI/CD 통합을 체계적으로 설계할 수 있다.

  $ npm test -- --coverage

1. .github/workflows/test.yml : 테스트가 실행되면서 커버리지 리포트를 생성하고, coverage/lcov-report 폴더를 CI/CD 서버에 업로드하여 추후에 확인할 수 있다.
  name: CI

  on: [push, pull_request]

  jobs:
    test:
      runs-on: ubuntu-latest

      steps:
      - uses: actions/checkout@v2
      - name: Install Dependencies
        run: npm install
      - name: Run Tests and Coverage
        run: npm test -- --coverage
      - name: Upload Coverage Report
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report
          path: coverage/lcov-report

1. jest.config.js 수정 : 커버리지 목표 설정
  Jest 설정에서 특정 커버리지 목표를 설정하여, 최소한의 커버리지를 유지하는 기준을 정할 수 있다. 에 다음과 같은 설정을 추가하여 커버리지의 기준을 명확히 할 수 있다.

  module.exports = {
    // 이전 설정들...

    coverageThreshold: {
      global: {
        branches: 80, // 브랜치 커버리지 최소 80%
        functions: 80, // 함수 커버리지 최소 80%
        lines: 80,     // 라인 커버리지 최소 80%
        statements: 80 // 전체 명령문 커버리지 최소 80%
      }
    },
  };

  이렇게 하면 커버리지 임계값을 충족하지 못할 경우 테스트가 실패하게 되어, 코드 커버리지를 일정 수준 이상으로 유지할 수 있다.

1. 배포 전에 커버리지 리포트 확인
  배포 또는 풀 리퀘스트 병합 전에 커버리지 목표를 충족했는지 확인할 수 있도록, CI/CD에서 커버리지 리포트를 반드시 통합하고, 목표에 부합하는지 체크하는 것을 권장한다.
  이러한 방식을 통해 Jest를 사용한 테스트 커버리지를 체계적으로 관리할 수 있다.
