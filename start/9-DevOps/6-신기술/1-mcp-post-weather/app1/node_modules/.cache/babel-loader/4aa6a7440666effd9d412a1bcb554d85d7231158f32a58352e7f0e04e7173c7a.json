{"ast":null,"code":"import axios from \"axios\";\n\n// JSONPlaceholder API를 위한 인스턴스 생성\nexport const jsonPlaceholderApi = axios.create({\n  baseURL: \"https://jsonplaceholder.typicode.com\",\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// OpenWeather API를 위한 인스턴스 생성\nexport const openWeatherApi = axios.create({\n  baseURL: \"https://api.openweathermap.org/data/2.5\",\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// API 키 (실제 사용 시 환경 변수로 관리하는 것이 좋습니다)\nconst OPENWEATHER_API_KEY = \"\"; // OpenWeather API 키를 받아서 입력해야 합니다\n\n// JSONPlaceholder API 서비스\nexport const jsonPlaceholderService = {\n  getPosts: async () => {\n    try {\n      const response = await jsonPlaceholderApi.get(\"/posts\");\n      return response.data;\n    } catch (error) {\n      console.error(\"Error fetching posts:\", error);\n      throw error;\n    }\n  },\n  getPostById: async id => {\n    try {\n      const response = await jsonPlaceholderApi.get(`/posts/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching post ${id}:`, error);\n      throw error;\n    }\n  },\n  getUsers: async () => {\n    try {\n      const response = await jsonPlaceholderApi.get(\"/users\");\n      return response.data;\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      throw error;\n    }\n  }\n};\n\n// OpenWeather API 서비스\nexport const weatherService = {\n  getCurrentWeather: async city => {\n    try {\n      const response = await openWeatherApi.get(`/weather?q=${city}&appid=${OPENWEATHER_API_KEY}&units=metric`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching weather for ${city}:`, error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["axios","jsonPlaceholderApi","create","baseURL","headers","openWeatherApi","OPENWEATHER_API_KEY","jsonPlaceholderService","getPosts","response","get","data","error","console","getPostById","id","getUsers","weatherService","getCurrentWeather","city"],"sources":["/Users/dev/Desktop/workspace/@1-mcp/mcp-tutorial/src/services/api.ts"],"sourcesContent":["import axios from \"axios\"\n\n// JSONPlaceholder API를 위한 인스턴스 생성\nexport const jsonPlaceholderApi = axios.create({\n  baseURL: \"https://jsonplaceholder.typicode.com\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n})\n\n// OpenWeather API를 위한 인스턴스 생성\nexport const openWeatherApi = axios.create({\n  baseURL: \"https://api.openweathermap.org/data/2.5\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n})\n\n// API 키 (실제 사용 시 환경 변수로 관리하는 것이 좋습니다)\nconst OPENWEATHER_API_KEY = \"\" // OpenWeather API 키를 받아서 입력해야 합니다\n\n// JSONPlaceholder API 서비스\nexport const jsonPlaceholderService = {\n  getPosts: async () => {\n    try {\n      const response = await jsonPlaceholderApi.get(\"/posts\")\n      return response.data\n    } catch (error) {\n      console.error(\"Error fetching posts:\", error)\n      throw error\n    }\n  },\n\n  getPostById: async (id: number) => {\n    try {\n      const response = await jsonPlaceholderApi.get(`/posts/${id}`)\n      return response.data\n    } catch (error) {\n      console.error(`Error fetching post ${id}:`, error)\n      throw error\n    }\n  },\n\n  getUsers: async () => {\n    try {\n      const response = await jsonPlaceholderApi.get(\"/users\")\n      return response.data\n    } catch (error) {\n      console.error(\"Error fetching users:\", error)\n      throw error\n    }\n  },\n}\n\n// OpenWeather API 서비스\nexport const weatherService = {\n  getCurrentWeather: async (city: string) => {\n    try {\n      const response = await openWeatherApi.get(\n        `/weather?q=${city}&appid=${OPENWEATHER_API_KEY}&units=metric`\n      )\n      return response.data\n    } catch (error) {\n      console.error(`Error fetching weather for ${city}:`, error)\n      throw error\n    }\n  },\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,OAAO,MAAMC,kBAAkB,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC7CC,OAAO,EAAE,sCAAsC;EAC/CC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,cAAc,GAAGL,KAAK,CAACE,MAAM,CAAC;EACzCC,OAAO,EAAE,yCAAyC;EAClDC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACA,MAAME,mBAAmB,GAAG,EAAE,EAAC;;AAE/B;AACA,OAAO,MAAMC,sBAAsB,GAAG;EACpCC,QAAQ,EAAE,MAAAA,CAAA,KAAY;IACpB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMR,kBAAkB,CAACS,GAAG,CAAC,QAAQ,CAAC;MACvD,OAAOD,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAMA,KAAK;IACb;EACF,CAAC;EAEDE,WAAW,EAAE,MAAOC,EAAU,IAAK;IACjC,IAAI;MACF,MAAMN,QAAQ,GAAG,MAAMR,kBAAkB,CAACS,GAAG,CAAC,UAAUK,EAAE,EAAE,CAAC;MAC7D,OAAON,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuBG,EAAE,GAAG,EAAEH,KAAK,CAAC;MAClD,MAAMA,KAAK;IACb;EACF,CAAC;EAEDI,QAAQ,EAAE,MAAAA,CAAA,KAAY;IACpB,IAAI;MACF,MAAMP,QAAQ,GAAG,MAAMR,kBAAkB,CAACS,GAAG,CAAC,QAAQ,CAAC;MACvD,OAAOD,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAMA,KAAK;IACb;EACF;AACF,CAAC;;AAED;AACA,OAAO,MAAMK,cAAc,GAAG;EAC5BC,iBAAiB,EAAE,MAAOC,IAAY,IAAK;IACzC,IAAI;MACF,MAAMV,QAAQ,GAAG,MAAMJ,cAAc,CAACK,GAAG,CACvC,cAAcS,IAAI,UAAUb,mBAAmB,eACjD,CAAC;MACD,OAAOG,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8BO,IAAI,GAAG,EAAEP,KAAK,CAAC;MAC3D,MAAMA,KAAK;IACb;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}