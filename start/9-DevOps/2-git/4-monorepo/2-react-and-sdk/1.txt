[sdk와 playground react 앱의 조합을 모노레포로 만들기]

1. 모노레포란?
  모노레포는 여러 개의 패키지나 프로젝트를 하나의 저장소(repository)에서 관리하는 방식이다.
  이를 통해 코드의 재사용성을 높이고, 의존성 관리를 용이하게 할 수 있다.
  이 예시에서는 모노레포(Monorepo)를 설정하여 packages 폴더 내에 sdk, test, tool 패키지를 관리하고, 외부에 Playground라는 React 앱을 두어 서로 임포트하여 사용하는 방법을 자세히 설명한다.
  이 가이드는 npm Workspaces를 사용하여 모노레포를 구성하는 방법을 중심으로 설명한다.

1. 예상 폴더구조
  monorepo/
  ├── packages/ 'sdk, test, tool 패키지를 포함한 폴더'
  │   ├── sdk/
  │   ├── test/
  │   └── tool/
  └── Playground/ 'React 애플리케이션'

1. 루트의 package.json에 Workspaces 설정 추가
  {
    "name": "monorepo",
    "version": "1.0.0",
    "private": true,
    "workspaces": [
      "packages/*",
      "Playground"
    ]
  }

  private: true: 모노레포의 루트 패키지가 배포되지 않도록 설정
  workspaces: 관리할 워크스페이스(패키지) 경로 지정

1. 의존성 설치
  $ npm i

  루트 디렉토리에서 의존성을 설치한다. 
  이는 워크스페이스 간의 의존성 관리를 용이하게 한다.

1. 패키지 생성 : sdk, test, tool 패키지 생성
  mkdir -p packages/sdk
  mkdir -p packages/test
  mkdir -p packages/tool  
  cd packages/sdk
  cd ../..
  npm init -y
  cd packages/test
  cd ../..
  npm init -y
  cd packages/tool
  cd ../..
  npm init -y

1. packages/sdk/package.json 작성
  {
    "name": "@monorepo/sdk",
    "version": "1.0.0",
    "main": "index.js",
    "license": "MIT",
    "dependencies": {}
  }

1. packages/test/package.json 작성
  {
    "name": "@monorepo/test",
    "version": "1.0.0",
    "main": "index.js",
    "license": "MIT",
    "dependencies": {}
  }
  
1. packages/tool/package.json 작성
  {
    "name": "@monorepo/tool",
    "version": "1.0.0",
    "main": "index.js",
    "license": "MIT",
    "dependencies": {}
  }

1. React 애플리케이션(Playground) 생성
  $ npx create-react-app Playground

1. packages/tool/package.json 수정 : dependencies에 @monorepo/sdk를 넣어 패키지 간 의존성 설정 
  {
    "name": "@monorepo/tool",
    "version": "1.0.0",
    "main": "index.js",
    "license": "MIT",
    "dependencies": {
      "@monorepo/sdk": "^1.0.0"
    }
  }

1. packages/sdk/package.json 수정 : dependencies에 @monorepo/test를 넣어 패키지 간 의존성 설정 
  {
    "name": "@monorepo/sdk",
    "version": "1.0.0",
    "main": "index.js",
    "license": "MIT",
    "dependencies": {
      "@monorepo/test": "^1.0.0"
    }
  }

1. 의존성 설치 및 링크
  $ cd ../../
  $ npm install

1. packages/sdk/index.js 작성 : 패키지 코드 작성 및 임포트
  const test = require('@monorepo/test');

  module.exports = {
    hello: () => {
      return test.sayHello();
    }
  };

1. packages/test/index.js 작성 : 패키지 코드 작성 및 임포트
  module.exports = {
    sayHello: () => {
      return 'Hello from test package!';
    }
  };

1. packages/tool/index.js 작성 : 패키지 코드 작성 및 임포트
  const sdk = require('@monorepo/sdk');

  module.exports = {
    greet: () => {
      return sdk.hello();
    }
  };

1. Playground/src/App.js 앱에서 패키지 사용 예시
  import React from 'react';
  import { greet } from '@monorepo/tool';

  function App() {
    return (
      <div className="App">
        <h1>{greet()}</h1>
      </div>
    );
  }

  export default App;

1. package.json 수정 : 루트 패키지에 스크립트 추가
  {
    "name": "monorepo",
    "version": "1.0.0",
    "private": true,
    "workspaces": [
      "packages/*",
      "Playground"
    ],
    "scripts": {
      "build": "npm run build --workspaces",
      "test": "npm run test --workspaces",
      "start": "npm run start --workspaces",
      "lint": "npm run lint --workspaces"
    }
  }

1. 각 package.json 수정 : 스크립트 추가
  {
    "scripts": {
      "build": "babel src -d lib",
      "test": "jest"
      "lint": "prettier --check"
    }
  }

1. .gitignore 설정
  node_modules/
  packages/*/node_modules/
  Playground/node_modules/
  dist/
  build/

1. 모노레포 관리용 기타 라이브러리들
  lerna : 글로벌로 설치. 버전 관리 및 배포 자동화. lerna init으로 사용 가능.
  turbo : devDependencies에 설치. 고성능 빌드 시스템으로, 캐싱 및 병렬 실행을 지원.
    packages.json에 아래와 같이 turbo 항목을 추가해서 사용한다.
    {
      "scripts": {
        "build": "turbo run build",
        "dev": "turbo run dev",
        "test": "turbo run test"
      },
      "devDependencies": {
        "turbo": "^1.0.0"
      },
      "turbo": {
        "pipeline": {
          "build": {
            "dependsOn": ["^build"],
            "outputs": ["dist/**"]
          },
          "test": {
            "dependsOn": ["build"]
          }
        }
      }
    }

1. 패키지 배포
  $ npm publish

1. 요약
  루트 디렉토리 설정: package.json에 Workspaces 설정 추가
  패키지 생성: packages/sdk, packages/test, packages/tool 생성 및 초기화
  React 앱 생성: Playground 폴더에 React 앱 생성
  의존성 설정: 패키지 간 의존성 추가 및 npm install로 링크 설정
  코드 작성 및 임포트: 패키지 간 코드 임포트
  스크립트 자동화: 루트 및 각 패키지에 빌드, 테스트 스크립트 추가
  Git 관리: Git 초기화 및 커밋
  추가 도구 활용: Lerna, Turborepo 등 선택적 도구 사용
