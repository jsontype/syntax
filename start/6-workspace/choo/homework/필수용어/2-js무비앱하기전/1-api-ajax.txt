[API]

1. 개발자라면 절대 몰라서는 안되는 개념이다. 
#     PHP 개인 프로젝트를 배울 때, DB를 불러올 때 API를 쓰지 않았다.
#     이는 프론트와 백엔드를 구분짓지 못하게 되어 유지보수성이 제로가 되어있다.
#     즉, 개발한 사람 외에는 가독성도 처참하고, 손을 대기 힘들게 되어있다는 것이다.
#     그런 코드는 시간이 지나면 개발한 사람조차 잊어먹어서 이해하지 못할 것이다.
#     그렇기 때문에 DB의 CRUD 데이터를 API로 개발하여, 백과 프론트를 구분짓고,
#     프론트에서 API 주소일람이나 API Docs를 참고하여 쉽게 꺼내어 쓸 수 있게 하는 것이다.

1. API(Application Programming Interface) : Interface란 사용자가 입력을 넣는 것이다. (리모컨도 인터페이스)
    API는 공통 소통 창구이다.
    소통하는데 최소한으로만 알면 되는 일종의 프로토콜이다.
    api의 구현은 다 다를 수 있지만 그 앞모습은 모두 같다.
    이 공통된 앞모습을 api 라고 한다.
    인터페이스는 접촉하는 면, 중간에서 연결하는 역할을 한다.
    ‘이런 기능을 하고 싶으면 이 곳으로 연결하자’ 라는 공통된 약속을 만들어 둔 것이 api이다.

    서버에서 미리 만들어둔 기능이며, 서버 개발자가 클라이언트 개발자와 미리 한 약속이다.
    "주소를 이렇게 갖고 오세요 그럼 정보를 이렇게 만들어 드릴게요." 라고 미리 회의를 해서 약속한 대로 만들어서 준다. 
    API의 쿼리스트링은 보통 http://서버위치/api주소/프로퍼티=데이터?옵션=옵션값 이런 형태로 이뤄진다
    쿼리스트링 예시 : https://movie.naver.com/movie/bi/mi/basic.naver?code=10016

    예를 들어, 기상청 서버로 다음과 같이 데이터를 요청하면 → "date:191031, place:Seoul, which:temperature"
    이렇게 답이 올거라는 것이 정해져있다. → "17degree"
    이처럼 소프트웨어가 다른 소프트웨어로 지정된 형식으로 요청, 명령을 받을 수 있는 것을 API라고 한다.

    개발자간의 대화는 이런 식으로 이루어질 것이다.
    "대화예 서버개발자님, 이거 신규 피쳐인데 api하나 따주세요." : 새로운 기능 창구 하나 만들어주세요.
    "api개발은 끝났고, 클라이언트는 아직이에요." : 서버 창구는 다 만들었는데, 요청하는 쪽이 아직 작업중이에요.

1. API Documents (API Docs, API 명세서) : API를 어떻게 호출해서 사용하는지를 적어둔 것. 
    명세서예 https://yts.mx/api

1. API(Application Programming Interface), API Doc

1. Open API : 누구나 요청할 수 있게 열어둔 API.

1. REST와 REST API : 
    REST는 Representational State Transfer의 약자이며,
    REST의 의미는,
    프론트엔드 웹에서 서버에 데이터를 요청할 때, 
    "각 요청이 어떤 동작이나 정보를 위한 것인지를 그 요청의 모습 자체로 추론 가능하다는 것"이다.
    예를 들어, 요청을 보내는 URI주소만으로도, CRUD 작업의 어떤 부분을 사용하는 지 알수 있다.    
    https://(사이트도메인)/login : 로그인 요청
    https://(사이트도메인)/insert/member : 회원가입 요청
    https://(사이트도메인)/delete/member?no=153 : 153번 회원탈퇴 요청

    REST API는 RESTful API의 약자이며,
    RESTful API의 의미는, 해당 API를 호출할 때,
    GET 요청을 사용하여 데이터를 검색하고, POST, PUT 또는 PATCH 요청을 사용하여 데이터를 수정하도록 구성하는 API를 말한다.

1. API 요청에 대한 HTTP 응답 코드
    API 요청에 대한 모든 응답은 키-값 해시인 JSON 개체이다. 
    성공시 데이터 리소스는 data라는 키로 반환되며, 오류는 errors나 error라는 키에 반환된다.
    HTTP 응답 코드는 다음 중 하나의 요청 상태를 나타낸다. (res => res.status | res.statusCode나, 개발자 도구의 network 탭에서 확인할 수 있다.)
        200 - 확인 : 요청이 성공했습니다.
        201 - 생성됨 : 요청이 이행되어 새 리소스가 생성되었습니다.
        202 - 수락됨 : 요청이 처리를 위해 수락되었지만 처리가 완료되지 않았습니다. 통계 리소스 는 이 코드를 반환할 수 있습니다.
        400 - 잘못된 요청 : 요청이 잘못되었습니다. 오류 메시지를 확인하고 다시 시도하십시오.
        401 - 승인되지 않음 : 요청에 인증이 필요하거나 인증이 유효하지 않습니다.
        403 - 금지됨 : 인증되었지만 리소스에 액세스할 수 있는 권한이 없습니다.
        404 - 찾을 수 없음 : 리소스가 존재하지 않습니다.
        429 - 너무 많은 요청 : 속도가 제한되어 있습니다. 5분 동안 평균적으로 초당 10개 미만의 요청을 시도하십시오.
        500 - 서버 오류 : 서비스를 사용할 수 없습니다. 나중에 다시 시도하십시오.



[Ajax]

1. Ajax(Asynchronous JavaScript and XML, 에이잭스)
    간단히 말해서, "fetch"를 써서 서버에 요청을 보내고, 응답을 받아서 화면에 뿌려주는 것이다.
    API를 fetch 해서 조회하거나 서버에 데이터를 보내는 것, 이미지나 파일을 업로드, 다운로드 하는 것 등이 Ajax이다.
    Ajax란, 비동기적인 웹 애플리케이션의 제작을 위해 아래와 같은 조합을 이용하는 웹 개발 기법이다.
        - 표현 정보를 위한 HTML (또는 XML) 과 CSS
        - 동적인 화면 출력 및 표시 정보와의 상호작용을 위한 DOM, 자바스크립트
        - 일반텍스트, JSON 타입 등
    Ajax 애플리케이션은 실행을 위한 플랫폼으로 위에서 열거한 기술들을 지원하는 웹 브라우저를 이용한다.
    이것을 지원하는 브라우저로는 모질라 파이어폭스, 인터넷 익스플로러, 오페라, 사파리, 구글 크롬 등이 있다.
    ★ 결국 "웹에서의 API 통신은 모두 비동기이다. 이런 비동기적인 API 호출방식을 Ajax API 호출이라 한다."는 것만 알아두면 된다.
