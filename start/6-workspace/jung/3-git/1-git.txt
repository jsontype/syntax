[git]

1. Git Workflow 작업환경 일람
  local : 내 PC안의 git 작업폴더
    working directory : 작업하고 있는 폴더
    staging area : 버전 히스토리에 저장할 준비가 되어있는 스테이징 지역
      working directory에서 untracked / tracked 중 tracked만 staging에 갈 수 있다.
      working directory의 tracked 중에서 unmodified / modified 중 modified만 staging에 갈 수 있다.
    .git directory : (내 PC에 있는) 버전 히스토리를 가지고 있는 깃 리포지토리
  remote : 깃허브 서버안의 git 작업폴더
    .git directory : (깃혀브 서버에 있는) 버전 히스토리를 가지고 있는 깃 리포지토리


        
1. Git 관련 용어
  add . : 트럭에 바뀐 택배를 싣는 것 = staging
  commit -m "" : 택배 송장에 무슨 물건이지 적는 것
  pull request : develop 브랜치에 merge 해달라고 리뷰자에게 요청
  clone : 빈 폴더에 해당 develop 브랜치를 복제 
  branch : 나뭇가지, 각 개발자가 해결해야할 이슈마다 다른 브랜치를 갖고 있다
  checkout : 보고있는 브랜치를 이동
  merge : 브랜치끼리 병합하는 것 (develop <- feat/이슈번호)
  conflict : 브랜치끼리 병합할 때에 소스가 서로 달라 충돌이 일어나는 것
    


1. 다수 프로젝트 작업의 흐름
  초기 권한 세팅
    PL : 깃허브에서 세팅 - manage access - collaborator 깃 유저네임으로 추가
    PG : 메일로 권한 받음 - git 환경구축 - 클론

  $ git clone : 맨 처음 세팅하기
    git clone [url] : url에 해당하는 레포지토리를 클론한다. 부른 위치에서 새 폴더로 생성된다.

  $ git fetch : 이슈를 판 뒤, 우선적으로 할 일
    git fetch origin : 리모트 레포지토리에 있는 git을 전부 fetch한다.
    git pull origin feat/1 : 리모트 레포지토리에 있는 (신규 fetch된) git들로 local을 갱신한다. 
      작업 시작하기 전이나 작업중간에 타 브랜치로부터 merge가 완료된 경우 늘 이를 진행한다.

  $ git status : 현재 상태 확인하기
    -h : 헬프모드로 모든 옵션을 알려준다.
    -s : 간단하게 확인한다.
  
  $ git checkout : 체크아웃
    git checkout feat/1 : "github등을 통해 만들어져서 local에 이미 존재하는" feat/1이라는 branch에 체크아웃
    * git checkout -b feat/1 : local에 feat/1이라는 branch를 생성하면서 체크아웃
        이슈를 해결할 브랜치를 github를 통해 만들지 않을 경우 이 방법을 쓴다. 단, 이때는 commit 명에 #이슈번호를 써서 연동해두는 게 좋다.    

  $ git diff : 깃허브 브런치내의 기존 / 현재의 diff를 비교 조사한다. (vscode를 못 믿어서, 푸시가 되었는지 확실히 확인하고 싶을 때)

  $ git push : 제조 후엔 add, commit, push. 외워둘 것
    git add 올릴파일명(전부일경우에는 .)
    git commit -m "메시지"
    git push origin feat/1 : remote branch에도 해당 branch를 작성하며 올리기

  MR : merge request - 병합있을 시 해결 - 리뷰자에 PR 요청 연락 - merged의 흐름
    각자가 브랜치 작업 후 각자 브랜치에 올리기     
    기능이 완료되었으면 기트허브에 들어가 branch에 커밋한 것의 new pull request를 누른다.
        커밋할 때의 주의사항을 지켰는지 확인한다.
        리뷰자를 지정한다.
        PR을 실시한다.
    기존 master와 충돌이 일어나서 풀리퀘스트가 안될 경우, 로컬 feat/1에 체크아웃한 상태로 master 최신 브랜치를 선택후 패치 - 머지(충돌 both ok 작업)한 뒤 진행한다.
        git checkout feat/1
        기존소스를 다른 폴더에 백업한다.
        git merge master : master 소스를 현 feat/1이라는 branch에 머지한다.
        vscode에서 current/incoming/both changes를 통해서 머지를 완료한다.   
    메신져로 리뷰자에게 PR 리뷰를 요청한다고 연락한다.
    깃허브의 PR창에서 리뷰자가 master 브랜치에 feat/1을 병합해준다. (실습에선 master, 현장에선 develop에 할 것이다)

  Closing : merged된 후 기존 branch삭제
    git checkout master : 최신 master 깃을 리모트에서 체크아웃하고 master 로컬 branch를 생성한다.
    git branch -d feat/1 : 로컬 branch 삭제. -D는 commit 이력이 남아있어도 강제로 branch를 삭제한다는 옵션임.
    git push origin --delete feat/1 : 원격 remote branch 삭제(1)
    * 다른 방법으로, 깃허브의 PR창에서 Delete Branch를 눌러서 할 수도 있다.
    * 다른 방법으로, 소스트리를 사용하면 모든 브랜치를 한눈에 볼 수 있어 편리하다.
    깃허브의 issue를 close한다.

  Reopen : 새로운 이슈에 대응
    git checkout -b feat/2 : 새로운 이름(feature/2)의 로컬 branch 생성

  $ git stash : 커밋을 하기전의 "퀵 세이브포인트"이다. 
    - ★ 스태시를 사용할 때
      * 아직 완료하지 않은 일을 Commit 하고 싶지 않을 때
      * 하던 작업을 멈추고 잠시 브랜치를 변경해야 할 때
      * 하던 작업 내용을 타 브랜치로 이동시켜야 할 때
      * 구현후 에러가 나서 안 돌아갈 때, 이전 커밋에서는 돌아갔었는지 확인해볼 때
    - 스태시를 한 개만 사용할 때 : 퀵 스타트
      git stash : 현재 브랜치의 이름과 마지막 커밋 이름으로 Stash 이름을 지정한 뒤 저장한다.
      git stash apply : 가장 최근의 stash를 가져와 적용한다.
    - 스태시를 여러 개 사용할 때
      git stash -m "stash되는 작업 내용 설명" : 코멘트를 붙여서 stash 배열에 unshift 형태로(0번째 인덱스에) 추가한다.
      git stash list : stash 목록을 확인한다. 여기서 stash@{0}, stash@{1} 등 인덱스 순으로 스택이 쌓여져서 저장되는 것을 확인할 수 있다.
      git stash apply 0 : 0번째 인덱스에 있는 stash@{0}를 가져와 작업한다.
      git stash drop : 가장 최근의 stash를 삭제한다.
      git stash drop 0 : 0번째 인덱스에 있는 stash를 삭제한다.
      git stash pop : 가장 최근의 stash를 가져와 적용하면서, 동시에 불러온 stash를 제거한다. (apply + drop)

  $ ★★ git rebase -i HEAD~ : 이전 커밋들의 수가 많을 경우, 다시 하나의 커밋으로 통합한다.
    git rebase -i HEAD~2 : 최근에 한 두개의 커밋을 하나의 커밋으로 통합한다.
    git rebase -i HEAD~3 : 최근에 한 세개의 커밋을 하나의 커밋으로 통합한다.
    git rebase -i HEAD~4 : 최근에 한 네개의 커밋을 하나의 커밋으로 통합한다.
      이 명령어를 실행하면 vi 텍스트 편집기가 열린다.
        i를 눌러 삽입모드에 들어간다.
        여기서 첫번째 커밋을 제외한 나머지 커밋들의 pick을 squash 또는 s로 바꾼다.
        (squash는 해당 커밋을 이전 커밋과 합치라는 명령이다.)
        ESC를 눌러 일반모드로 빠져나간다.
        :wq를 입력하고 엔터를 눌러 저장하고 종료한다.
      이제 vi 텍스트 편집기가 다시 한번 열린다.
        i를 눌러 삽입모드에 들어간다.
        3개의 커밋메시지 외에는 다 주석 처리(#)가 되어 있을 것이다.
        주석 처리를 제외한, 세개의 커밋 메시지 중 원하는 메시지 하나만 남겨두고 나머지를 삭제한다. 
        ESC를 눌러 일반모드로 빠져나간다.
        :wq를 입력하고 엔터를 눌러 저장하고 종료한다.
    git rebase --abort : git rebase 시도하던 것을 취소한다.

  $ ★★ git reset HEAD^ : 이전 커밋을 취소하고 add 하기 전 상태로 돌려놓는다.
    git log : 리셋 하기 전 커밋 몇번까지 돌려놔야하는지 확인한다.
    git reset HEAD^ : 최근에 한 한개의 커밋을 되돌려놓는다.
    git reset HEAD^^ : 최근에 한 두개의 커밋을  되돌려놓는다.
    git reset HEAD^^^ : 최근에 한 세개의 커밋을  되돌려놓는다. (= git reset HEAD~3)

  $ ★★ git push origin master 뒤에 -f 또는 --force-with-lease : 충돌이 없을 경우 강제로 푸시한다.
    git push origin [branch name] -f
      기본 제공되는 강제 푸시 방법으로, "상대적으로 과거의, 타인의 수정과 충돌할 경우 해당 수정내역을 삭제하며 강제로 푸시"한다.
      git reset HEAD 되었거나, git rebase -i HEAD 된 것을,
      되돌려진 상태에서 새로 commit을 한 것을, 강제로 다시 푸시한다. 
      -f를 걸지 않으면 fast forward error에 걸릴 것이다.
      그러나, 현장에서는 -f를 왠만하면 쓰지 않고, 아래와 같은 명령어를 쓴다.
    ★★ git push origin master --force-with-lease
      현장에서 쓰게 될 강제 푸시 방법으로 "상대적으로 과거의, 타인의 수정과 충돌할 경우 푸시가 실패하고, 충돌이 없을 경우에만 강제로 푸시"한다.
      타인과 함께 쓰는 브랜치인 경우, 코드가 덮어씌우기 되어버리기 때문이다.
      보다 더 좋은 방법으로, PUSH때 로컬 ref와 리모트 ref를 비교해 로컬이 최신인지 판정해, 최신이 아니면 PUSH를 실패시킨다.
      --force-with-lease가 꽤 길기 때문에, 일반적으로는 아래와 같이 별칭으로 등록해 사용한다.
      git config --global alias.push-f "push --force-with-lease"
      git push-f origin master (* push-f는 붙여서 사용한다.)



1. 숙지사항들
  핵심내용 : 브랜치, 머지, 풀리퀘스트
    코드는 로컬브랜치로 관리된다. (커밋시 로컬브랜치에 커밋후 리모트 브랜치에 푸시한다)
    머지를 사용한다.
    master를 직접 쓰지 않고, develop 브랜치를 master처럼 사용한다.

  커밋할 때의 주의사항
    로컬브랜치를 만들때 원칙에 따라 한다. (예: feature/name+?)
    커밋전에 로그상 버그는 전부 디버깅이 원칙이다.
    커밋전에 콘솔로그 정리
    커밋전에 함수는 앞 주석부분에 @param지정을 해준다.
    커밋전에 let이 있으면 가능한 한 const(상수변수, 배열, 객체, 함수 주소참조 하는 것들)로 바꾼다.

  PR시의 절차
    만일을 대비해 지금까지 한 코드를 어딘가에 잘 백업해두자.
    상기 주의사항을 잘 지킨 상태로 커밋을 해둔다.
    내 로컬 브랜치(feature/name)를 체크아웃으로 해서 develop 최신버전(소스트리의 리모트에 있는 origin/develop)을 팻치후에 내 브랜치로 머지한다. (풀 옆에 숫자 뱃지가 없어질 거임)
    컨플릭트가 있을 경우 대응해준다. (incoming할 지 current 쓸지 both를 쓸지 등을 결정한다.)
    로컬상의 브랜치(feature/name)을 푸시해 리모트(origin/feature/name)으로 내려보낸다.
    풀리퀘스트를 누르고, 기능명 쓰고, 리뷰자 지정하고, PR후 리뷰자에게 슬랙을 보내준다.
    automatically merge가 불가능한 상황이면 소스트리에서 디벨롭 최신 머지부터 다시하고(풀에 숫자가 안뜨면 팻치 후에 풀해보자) 빨간 줄 충돌이 있으면 처리 후 다시 풀리퀘스트 한다.

  PR 후, 코드에 문제가 있어서 수정대응 요청이 올 시
    커멘트가 달렸을 때는 커멘트의 대응을 해준다.
    머지 컨플릭트 대응을 하라고 할 때에는 최신화된 소스를 클릭후 내 브랜치에서 "머지"한 뒤 충돌이 난 부분을 대응한다.

  PR 후, 코드에 문제가 없어서 머지 완료가 됐을 시
    다음 머지 전까지 코드 대대적 수정은 안하고, 주석정리나 에러잡기 하며 대기
    closed request 누른 뒤, 삭제
    리모트 브랜치 삭제, 로컬 브랜치 삭제
    git삭제, 모든 워크스페이스 내의 파일 백업후 삭제
    $ npm i , $ npm start 후 테스트
    feature/name으로 새 로컬 브랜치 작성
  