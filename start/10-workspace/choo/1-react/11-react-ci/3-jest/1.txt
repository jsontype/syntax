[Jest]

1. 사전준비 : 프로젝트를 새로 깔지 않고, 이전 챕터에서의 코드를 그대로 카피해서 가지고 온다.

1. Jest
  JEST는 Unit Test의 자동화를 하는데 필요한 라이브러리이다.
  Unit Test는 함수 하나하나와 같이 코드의 작은 부분을 테스트하는 것이다.
  즉, 모든 함수와 메소드에 대한 테스트 케이스(Test case)를 작성하는 절차를 말한다.

1. @testing-library를 프로젝트에 설치
  $ npm i @testing-library/react @testing-library/jest-dom
  $ npm i -D --exact jest-watch-typeahead@0.6.5
  $ npm audit fix // critical 취약점 해결

1. App.spec.js 생성 : App.js의 테스트 코드 생성
  import React from 'react'
  import { render, screen, fireEvent } from '@testing-library/react'
  import '@testing-library/jest-dom/extend-expect'
  import App from './App'

  describe('App', () => {
    it('Hello React! 텍스트가 정상적으로 렌더링되는지 확인한다.', () => {
      render(<App />)
      const textElement = screen.getByText(/Hello React!/i)
      expect(textElement).toBeInTheDocument()
    })

    it('onClick 이벤트가 발생했을 때 console.log가 호출되는지 확인한다.', () => {
      // 스파이를 이용해 console.log가 호출되었는지 확인한다.
      const consoleSpy = jest.spyOn(console, 'log')

      render(<App />)
      const textElement = screen.getByText(/Hello React!/i)
      fireEvent.click(textElement)

      expect(consoleSpy).toHaveBeenCalledTimes(1)
      expect(consoleSpy).toHaveBeenCalledWith('Hello React!')

      // 테스트 후 원래 console.log를 복원한다.
      consoleSpy.mockRestore()
    })  
  })

1. .eslintrc 수정 : env 부분에 아래와 같이 jest를 추가한다.
  "env": {
    ...
    "jest": true
  },

1. 용어 설명
  TDD(Test Driven Development) : 테스트주도개발
    E2E TEST : 사용자관점에서 시스템을 테스트하는 것 (CYPRESS)
    UNIT TEST : 함수 하나하나와 같이 코드의 작은 부분을 테스트하는 것 (JEST)

1. 테스트
  $ cd app1
  $ npm run test
  a키
  테스트가 잘 통과하는지 확인
