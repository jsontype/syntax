[맥 처음 샀을 때 / 받았을 때의 세팅]
참조URL: https://support.apple.com/ko-kr/HT212749 (포맷)

1. 맥북 포맷 : 개인용 맥북을 중고로 샀을 경우
  맥북 포맷 : 시스템 설정 -> 일반 -> 전송 또는 재설정 -> 모든 콘텐츠 및 설정 지우기
  마이그레이션 : 필요하다면 기존 맥북으로부터 데이터 마이그레이션도 이행한다. (https://support.apple.com/ko-kr/HT204350 참조)



1. dock 정리
  dock의 불필요한 아이콘들을 모두 삭제 (맵, 미리알림 등)
  cmd + shift + 5 눌렀을 때, 녹화 마이크의 동작 확인



1. 시스템 환경설정
  최적화된 배터리 충전 켜기 : 왼쪽상단 애플 마크 -> 시스템환경설정 -> 배터리 -> 배터리탭 -> 최적화된 배터리 충전
  배터리모드 절전 설정 : 왼쪽상단 애플 마크 -> 시스템환경설정 -> 배터리 -> 배터리탭 -> 디스플레이 끄기 1시간
  어탭터모드 절전 설정 : 왼쪽상단 애플 마크 -> 시스템환경설정 -> 어탭터 -> 어탭터탭 -> 디스플레이 끄기 3시간
  화면보호기 설정 : 왼쪽상단 애플 마크 -> 시스템환경설정 -> 화면보호기 검색 -> Flurry 선택
  마우스, 마우스 스크롤 설정 : 왼쪽상단 애플 마크 -> 시스템환경설정 -> 마우스 검색 -> 속도 최고 빠름에서 두단계 아래, 자연스러운 스크롤 선택 해제



1. homebrew 설치
  크롬에 "brew install"이라고 검색 후 명령어 복붙
  command + space 누르고 terminal 열기
  해당 명령어 붙여넣고 실행하여 설치
  설치 후, 터미널에 지시 따라 입력완료하기
    ```
    // 터미널 지시 예시 : 아래의 두 스텝을 터미널에 입력
      Run these two commands in your terminal to add Homebrew to your PATH:
        (echo; echo 'eval "$(/opt/homebrew/bin/brew shellenv)"') >> /Users/d.yang/.zprofile
        eval "$(/opt/homebrew/bin/brew shellenv)"
    ```



1. 필수앱 설치
  - vscode 설치
    $ brew install --cask visual-studio-code 또는 구글링으로 설치
    별도 문서 확인 : vscode에 깃허브 로그인하여 동기화하거나, 별도 문서를 참조해서 확장 설치, 설정
  - chrome 설치
    $ brew install --cask google-chrome 또는 구글링으로 설치
    별도 문서 확인 : chrome 확장 설치, 개인 계정 연동
  - rectangle mac 설치 : spectacle mac도 있지만, rectangle은 화면끝으로 끌어서 정렬하는 기능도 되므로 더욱 추천한다.
    $ brew install --cask rectangle 또는 구글링으로 설치
    설치 후 손쉬운 사용 메뉴에서 사용 허가를 해야한다.
    설치 후 초기 선택화면에서 spectacle 모드를 선택하면, 한번에 spectacle과 동일한 단축키 설정이 가능하다.
  - nvm으로 node 설치
    별도 문서 확인 : nvm ls-remote로 검색한 뒤 최신 LTS 버전 설치
  - sourcetree 설치
    $ brew install --cask sourcetree 또는 구글링으로 설치
  - insomnia mac 설치
    $ brew install --cask insomnia 또는 구글링으로 설치
  - anydesk 설치
    $ brew install --cask anydesk 또는 구글링으로 설치
  - zoom 설치
    $ brew install --cask zoom 또는 구글링으로 설치
  - slack 설치
    $ brew install --cask slack 또는 구글링으로 설치
  - docker 설치
    $ brew install docker
    docker ui는 구글링으로 설치



1. iterm2 설치
  iterm2 검색 후 설치
  iterm2을 열고, 위쪽 메뉴에서 iterm2 탭에서 settings 클릭
  appearance 탭 - general - theme - minimal 선택
  profiles 탭 - session - status bar 체크 - 최하단 configure status bar 버튼 클릭
    Battery, CPU, RAM, Network, Clock을 아래로 드래그
    최하단 Auto-Rainbow 옆 풀다운 클릭 - Light Colors 선택 - OK 버튼 선택
  profiles 탭 - color - 우측 하단 color presets 풀다운 - Dark background 선택


  
1. oh my zsh 설치
  chrome에서 oh my zsh 검색 (z shell : bash보다 많은 기능과 플러그인으로 개선된 터미널)
  설치 명령어를 복사해서 터미널에 붙여넣기
  powerlevel 10k 검색후 깃허브에 들어간다.
  밑으로 내려서 installation 클릭
  oh my zsh 클릭
  git clone 으로 시작하는 명령어 터미널에 복붙
  터미널에 code ~/.zshrc 입력하고 vscode에서 .zshrc 파일을 연다.
    * code해도 vscode가 안열리는 경우
      vscode를 연다
      shift + command + p
      그 다음 밑에 Shell Command: Install 'code' command in PATH 를 눌러주면 끝이다.
    해당 파일안에 다음 변수값을 수정 : ZSH_THEME="powerlevel10k/powerlevel10k"    전부 다 끈 뒤 iterm을 다시 켠다.
  iterm을 재기동한 다음, y 입력 후 엔터해서 nerd 폰트를 다운받는다.
  iterm을 다시 한번 끈다.
  vscode에서 터미널을 연다.
  vscode 세팅 - settings - terminal font 검색 - 최상단 font family - MesloLGS NF 입력
  vscode terminal 폰트 안 깨진 것 확인
  그래도 가운데 그림문자에 다이아몬드가 안 보인다면, 다음의 명령어를 통해 iterm2를 재설치한다.
    brew reinstall --cask iterm2
    연 다음 check automatically 클릭
  터미널 명령어에 따라 다음과 같이 세팅한다.
    다이아몬드가 보인다면 y
    소용돌이가 보인다면 y
    오버랩 안되어 있다면 y
    Classic 2번
    Unicode 1번
    Light 2번
    24-hour format 2번
    Angled 1번
    Sharp 1번
    Flat 1번
    One line 1번
    Sparse 2번
    Many icons 2번
    Fluent 2번
    문제없으면 y - Verbose 1 - y
    터미널을 종료한다.



1. 클라우드 로그인
  애플아이콘 - 시스템 설정 - icloud 선택 - 애플 아이디 입력 후 로그인 - mac 찾기 - 온
  


1. 개발 현장에서 받은 맥북일 경우의 추가 세팅
  현장의 슬랙 아이폰 연동 : 
    아이폰 슬랙앱에서 왼쪽 워크스페이스 익스플로러를 열고, "워크스페이스 추가" 버튼 클릭
    "다른 워크스페이스에 사인인한다"를 클릭
    해당 현장 이메일로 로그인하면 추가 완료
  현장의 구글 캘린더와 애플 캘린더 연동 : 
    아이폰 설정 - 계정 - 계정 추가 - 해당 현장 이메일 계정 로그인 - Mail, 연락처, 캘린더 추가


    
1. 개발자 입장에서 보는 주관적인 맥북 장단점
  장점: 
    쉘, 배시등 리눅스 기반 터미널을 쓸때 단축키가 맥os ui를 쓸때와 같다. cmd + c, v 등
    깃 푸시가 훨씬 빠르다.
    빌드가 빠르다.
    타 애플 기기와의 연동성이 좋다는 점은 일반 유저 뿐 아니라 아이폰 등 주변 기기를 보조로 사용하는 개발자 입장에서도 꽤 편리하다는 장점이 된다.
    영상제작 앱, 스프레드시트, 피그마 등 넓은 화면의 경우 수평이동이 편리하다.
    화상의 캡쳐가 더 직관적이며 편리하다.
  
  단점:
    크롬 브라우져 상의 번역이 원활치 않다.
    윈도우를 기준으로 설계된 일부 앱 또는 웹앱과 호환성 이슈가 있다. (나의 경우 스프레드시트)
    브라우저 확대 축소에서 윈도우의 컨트롤 + 휠업다운이 훨씬 직관적이다. 
    코덱, 영상 뷰어등의 인터페이스는 윈도우기반이 훨씬 직관적이다.
