[백준 알고리즘 문제푸는 방법]

1. 사전 확인 사항 : Javascript 개발자의 경우
  당신이 프론트라면, NodeJS의 경우가 될텐데, 그럼 브론즈5만 풀어보고 그냥 넘어가도 된다.
  BOJ가 입력받는 부분을 nodejs에서 지원하지 않아서 이상한데에 시간이 너무 지체되기 때문이다.
  출제 문제는 많아서 아쉽지만 nodejs라면 BOJ가 어떤 느낌인지만 파악하고, 깔끔하게 프로그래머스로 넘어가자.
  시간은 한정적이므로, 백준 자체는 스킵해도 된다.
  실무에서 쓰지도 않는 입출력 부분에 투자할 시간을 아껴서, 알고리즘 자체에 집중하자.

1. 백준 알고리즘 문제푸는 방법
  백준 사이트에 접속 후 회원가입을 한다.
    https://acmicpc.net
  상단 메뉴 "문제 탭" 풀다운의 "단계별로 풀어보기"에 들어간다.
    https://www.acmicpc.net/step
  1번부터 문제의 문제조건을 본다.
    시간 제한: 내가 만든 프로그램이 그 시간 안에 수행되어야 한다는 것
    메모리 제한: 내가 만든 프로그램이 그 용량을 넘어가면 안된다는 것
  제출 버튼을 누른다.
  언어를 선택하고 소스코드를 입력한다.
  제출을 입력한다.
  BOJ(Backjun Online Judge) 머신을 통해서 채점된 결과를 확인한다.

1. 백준 2단계의 문제부터, "틀렸습니다"가 뜨는 이유
  백준을 파면서 정말 많이 보게 될 오답 요인이다.
  맞왜틀을 외치기 전에 아래 사항들을 확인해보자.
  - 이 문제는 1 + 2 = 3을 묻는 문제가 아니다.
    1 2를 입력받고 3을 출력하는 문제이다.
    출력을 실제로 해야 한다.
    return은 출력하는 함수가 아니므로 주의한다.
  - 조건쪽의 0 < A, B < 10를 확인하는 건 당신의 몫이 아닌 출제자의 몫이다. 
    즉, 입력 데이터가 0 < A, B < 10을 만족하는지 확인하는 코드를 작성할 필요가 없으며, 
    그러한 입력 데이터만 존재한다고 믿고 풀어도 좋다.
    단, A와 B에 0 초과 10 미만의 어떠한 자연수 두 개가 입력으로 들어오더라도 A + B의 올바른 값을 출력해야 한다.
  - BOJ는 기계이다. 2와 3이 입력되면 ‘5’ 정확히 한 글자만 출력해야 하며, 
    코드 실행 도중 어떠한 잡담도 출력하면 안 된다.
  - 인풋의 경우, 특별한 라이브러리가 필요하다. Node.js의 경우, 입력값을 받는 방법으로 Prompt가 아니라, readline이나 fs를 쓸 수 있다.
    단, 시간 초과가 나는 것을 막기 위해서는 속도가 빠른 fs 모듈을 쓰는 것이 낫다.
    ★★ fs를 쓸 때에 "String(fs.readFileSync('/dev/stdin'))"를 쓰면 입력받은 값을 문자열로 받을 수 있다.
    "/dev/stdin"은 Unix / Linux 시스템에서 표준 입력을 나타내는 파일 디스크립터(Descriptor)이다. 
      (* 파일 디스크립터는 입출력 리소스에 대한 추상적 지시자이다.)
      (* 예를 들어, Unix 기반 시스템에서는 일반적으로 세가지 표준 파일 디스크립터가 있다.)
        0: 표준 입력 (stdin) = standard input의 약자로 "에스티디 인" 라고 읽는다.
        1: 표준 출력 (stdout) = standard output의 약자로 "에스티디 아웃" 라고 읽는다.
        2: 표준 에러 (stderr) = standard error의 약자로 "에스티디 에러" 라고 읽는다.
    즉, "String(fs.readFileSync('/dev/stdin'))"는 사용자가 표준 입력한 데이터인 "stdin"를 동기적으로 읽어서 가져오는 것이다.
    다음은 fs를 썼을 때의 정답 코드이다.
      const fs = require('fs');
      const input = String(fs.readFileSync('/dev/stdin')).split(' ');
      const a = Number(input[0]);
      const b = Number(input[1]);
      console.log(a+b);
  - 테스트를 하기 전에는, 적어도 직접 테스트코드를 적어서 실행해보고 제대로 들어오는지 확인한 다음 제출한다.
    이때 인풋의 경우, 테스트코드의 sample.js와 같은 형식으로, 인풋쪽을 라이브러리 없이 간단히 테스트해볼 수도 있다.

1. 백준 코딩 테스트 대비 : 백준 양질의 문제만 빠르게 푸는 방법
  더보기 > 강의 탭에서 알고리즘 기초 1/2, 2/2 의 문제들을 풀어본다. (강의는 안 들어도 좋다.)
  더보기 > 강의 탭에서 알고리즘 중급 1/3, 2/3, 3/3 의 문제들을 풀어본다.
  중급까지 하면 충분하다. 
  그 정도면 어려운 문제 100 문제 이상 풀게 될 거고, 
  대기업 코딩테스트 붙는 정도로는 충분하다.

1. 백준 티어 올리기 : 티어별 문제 풀이
  솔브드AC에 접속한다.
    https://solved.ac/problems/level
  브론즈부터 차례대로 문제를 푼다.
  브론즈 5문제를 풀면 실버 5문제를 풀고, 
  실버 5문제를 풀면 골드 5문제를 푼다.
  골드 5문제를 풀면 플래티넘 5문제를 푼다.
  플래티넘 5문제를 풀면 다이아몬드 5문제를 푼다.
  다이아몬드 5문제를 풀면 루비 5문제를 푼다.
  루비 5문제를 풀면 마스터 5문제를 푼다.

1. 백준 티어 확인 방법
  https://solved.ac/problems/level
  위 사이트에 접속한다.
  백준 아이디를 입력하고 로그인한다. (연동 필요)
  우측 상단의 유저 아이콘에서, 티어를 확인한다.  

1. 백준 막히는 문제 대처법
  - 만일 두번째 문제인 1000번 문제에서 막히면 고민하지말고 "백준 1000 javascript" 이런 식으로 구글 검색해보자. 
    초반에는 이렇게 해서 시간낭비하지 않고, "백준을 파는" 방법이나 감을 빨리 익힐 수 있다.
  - 실버 1260번 알고리즘 문제 같은 경우, 처음 하는 사람이 고민해서 바로 풀려면 어려울 수 있다. (처음 하는데 바로 풀면 천재이지. 나도 못했다.)  
    막힌다고 놔두지말고 그냥 고민하지말고 바로 "백준 1260 javascript"로 검색해보자.
    답을 보고 이해를 하면 된다. 이해가 안되면 백준이나 타 강사의 알고리즘 강의를 들으면서 이해하는 방법도 있다.
  - 1920, 10816, 1654번 문제 같은 경우는 이분탐색 알고리즘이다. 그런데 만약 이걸 모른다면, 이렇게 모르는 알고리즘이 있다면, 검색을 하는 방법도 있다.
    예를 들어, "이분탐색 알고리즘"이 뭔지 모른다면, 검색을 해서, 확인해보면서, 이해를 하면 된다.

1. 백준을 마스터 했다면... 알고리즘 문제풀이 사이트 명단
  - 인지도 있는 사이트
    백준, 솔브닥 : https://acmicpc.net/step, https://solved.ac/problems/level
    프로그래머스, PS : https://programmers.co.kr/learn/challenges
    코드업 : https://codeup.kr/problemsetsol.php?psid=33
    SW Expert Academy : https://swexpertacademy.com/main/main.do
    정올 : http://www.jungol.co.kr/bbs/board.php?bo_table=pbank&sca=30
    알고스팟 : https://algospot.com/judge/problem/list/
  
  - 외국 사이트 (국내는 잘 모르는 사이트)
    코드챌린지 : https://www.codechef.com/
    코드포스 : https://codeforces.com/problemset
    탑코더 : https://www.topcoder.com/

  - 수학과 결합
    프로젝트 오일러 : https://projecteuler.net/

  - 해킹 기술 / 웹 보안 / 리버싱
    웹해킹 : https://www.hackthissite.org/
    루트미 : https://www.root-me.org/?lang=en/
    크랙미 : https://crackmes.one/
    해커랭크 : https://www.hackerrank.com/dashboard/
