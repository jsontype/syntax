[next 설치]
참조URL: https://dev-yakuza.posstree.com/ko/react/nextjs/start

1. 리액트는 라이브러리, 넥스트는 프레임워크인 이유
  Next.js는 React 라이브러리의 프레임워크이다. 
  아니 안그래도 잘 되어있는 react를 쓰면서 왜 또 프레임워크가 필요하지? 라는 생각이 제일 먼저 든다.
  Next.js를 통해 얻는 가장 큰 장점은? Plain React 앱의 한계?
  많은 블로그 포스트들을 읽어보면 Next.js를 사용하는 가장 큰 이유로 
  "SEO(Search Engine Optimization)를 위한 Server-Side Rendering(SSR)을 가능하게 하기 때문에"
  라고 말하고 있다.
  왜냐하면, 기본적으로 React는 Client Side Rendering(CSR)을 한다. 
  이는 위 그림처럼 웹사이트를 요청했을 때 빈 html을 가져와 script를 로딩하기 때문에, 
  첫 로딩 시간도 오래걸리고 Search Engine Optimization(SEO)에 취약하다는 단점이 있다.
  반면, next.js는 pre-reloading을 통해 미리 데이터가 렌더링된 페이지를 가져올수 있게 해주므로 
  사용자에게 더 좋은 경험을 주고, 검색 엔진에 잘 노출 될 수 있도록 해주는 SEO에서도 장점을 얻을 수 있다. 
  pre-reloading은 SSR 뿐만 아니라 정적 사이트 생성(Static-Site Generate (SSG))도 가능하게 해준다. 
  또, SSR과 CSR도 혼합하여 사용 가능하다.

1. 사전준비
  create-next-app 설치
    $ npm i -g create-next-app
    $ create-next-app --version

1. next 앱 설치
  $ npx create-next-app app1
  - 옵션 선택
    Typescript, ESLint: Yes
    그 외: No
    alias: 기본값 @

1. 구조 살피기
  /public: 이미지 등 정적 파일 폴더
  /pages: 뷰 폴더
    index.js: 초기 페이지
    _app.js: 레이아웃 등, 모든 페이지에 공통으로 사용되는 컴포넌트
  /styles: 스타일 파일(css)을 저장하는데 사용하는 폴더
    globals.css: 전체 페이지에 적용하는 스타일
    Home.module.css: index.js 파일에서 사용하는 스타일
  .eslintrc.json: 정적 코드 분석 툴인 ESLint 설정
  next.config.js: Next.js 프로젝트 설정
  tsconfig.json: 타입스크립트 설정
  package.json: 라이브러리 관리

1. 테스트
  $ cd app1
  $ npm run build
  $ npm start
  http://localhost:3000
