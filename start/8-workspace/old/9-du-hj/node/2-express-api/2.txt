[MockDB와 백엔드 연동, Postman / Insomnia 사용법]

1. package.json 수정 : scripts 수정을 통해 npm start로 작동할 수 있도록 변경한다.
  {
    "name": "app1",
    "version": "1.0.0",
    "description": "",
    "main": "app.js",
    "scripts": {
      "start": "node app"
    },
    "dependencies": {
      "express": "^4.18.2",
    }
  }

1. 설치
  $ npm i

1. models/User.js 생성 : MockDB 생성
  module.exports = [
    { userId: "hihihi", password: "password12*", info: "hi!" },
    { userId: "bybyby", password: "password12*", info: "by!" },
    { userId: "gogogo", password: "password12*", info: "go!" },
  ]

1. routes/users.js 생성 : DB 정보에 get, post로 액서스할 API 로직 생성
  const express = require("express")

  // API URI를 라우팅하는 객체
  const router = express.Router()

  // Mock DB 객체
  const User = require("../models/User")

  /** API 라우트 리스트 */
  // 유저 생성 API : Create user
  router.post("/", (req, res) => {
    const { userId, password, info } = req.body
    User.push({ userId, password, info })
    return res.send(User)
  })

  // 유저 조회 API : Read users
  router.get("/:userId?", (req, res) => {
    // 1. ID에 해당하는 유저 조회 : "/:userId?" 정보(=req.params.userId)가 있을 때
    const { userId } = req.params
    // req.params.userId가 있을 시 해당 유저 정보를 리턴한다.
    if (userId) {
      for (let i = 0; i < User.length; i++) {
        if (User[i].userId == userId) {
          return res.send(User[i])
        }
      }
      // req.params.userId의 해당 유저 정보가 존재하지 않으면 404를 리턴한다.
      return res.status(404).send("user not found")
    }
    // 2. 전체 유저 목록 조회 : "/:userId?" 정보가 없을 때 모든 유저 정보를 리턴한다.
    return res.send(User)
  })

  // Delete user
  router.delete("/:userId", (req, res) => {
    for (let i = 0; i < User.length; i++) {
      // userId를 가진 유저 정보를 찾는다.
      if (User[i].userId == req.params.userId) {
        // 유저 정보를 삭제하고 남은 유저들의 정보를 리턴한다.
        User.splice(i, 1)
        return res.send(User)
      }
    }
    // userId를 가진 유저가 없으면 404를 리턴한다.
    return res.status(404).send("user not found")
  })

  module.exports = router



1. index.js 생성
  const express = require("express")
  const app = express()
  const port = 3000

  // app.get("/", (req, res) => res.send("Hello World!"))
  // app.use("/", (req, res) => res.sendFile(__dirname + "/index.html"))

  // api doc 연결
  const readme = `
    <div>
      <h2>API 리스트</h2>
      <ul>
        <li><a href="#">[GET] https://jsontype.github.io/api</a> : API DOCUMENTATION</li>
        <li><a href="#">[GET] https://jsontype.github.io/api/users</a> : 전체 유저 목록 조회</li>
        <li><a href="#">[GET] https://jsontype.github.io/api/users/:userId</a> : ID에 해당하는 유저 조회</li>
      </ul>
    </div>
  `
  app.get("/", (req, res) => {
    return res.send(readme)
  })

  // api 연결
  app.use(express.json())
  app.use(express.urlencoded({ extended: false }))
  const userRouter = require("./routes/users")
  app.use("/users", userRouter)

  // port listner 연결
  app.listen(port, () => console.log(`listening on port ${port}!`))



1. GET외의 API 테스트 준비 : Postman 또는 Insomnia를 활용한다.
  insomnia 설치

1. [GET] Get 확인 - 유저목록 조회
  REST (POST) : http://localhost:3000/users
  SEND 버튼 클릭
  우측 Response Preview 탭에서 Response Body 확인
    
1. [GET] Get 확인 - ID 해당 유저 조회
  REST (GET) : http://localhost:3000/users/hihihi
  SEND 버튼 클릭
  우측 Response Preview 탭에서 Response Body 확인

1. [POST] Create 확인
  REST (POST) : http://localhost:3000/users/create
  Request Body (JSON) : 
    {
      "userId":"zzz",
      "password":"password12*",
      "info":"sleep!"
    }
  SEND 버튼 클릭
  우측 Response Preview 탭에서 Response Body 확인 (DB에 제대로 Create 되었는지 확인)
  
1. [DELETE] Delete 확인
  REST (DELETE) : http://localhost:3000/users/zzz
  SEND 버튼 클릭
  우측 Response Preview 탭에서 Response Body 확인 (DB에 제대로 Delete 되었는지 확인)



1. ★★ 에러 났을 때 백엔드쪽에 보내야 하는 정보
  cURL 카피
  Insomnia 리퀘스트바디 / 프리뷰 화면 캡쳐
