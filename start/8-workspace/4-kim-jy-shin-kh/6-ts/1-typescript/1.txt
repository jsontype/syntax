[Typescript 소개]

1. Typescript 정의
  JavaScript는 weakly typed 언어이다.
  변수에 문자열, 숫자, null, 배열 등등 뭘 넣어도 그냥 들어간다.
    let value = 5
    value = '안녕하세요'
    value = [1,2,3,4,5]
    value = null
  게다가, 암묵적캐스팅을 통해 다른 타입을 넣어도 계산이 된다.
    let value = 5
    value = value + '5'
    console.log(value) // 10
  그러나 이는 시스템을 위협할 수도 있는 위험한 타입 에러를 걸러내지 못하므로, 데이터의 무결성 측면에서 좋지 않다. 
  Typescript에서는 사전에 변수에 타입을 지정해주어, 아무 타입이나 들어갈 수 있게 하지 않는 라이브러리다.

1. Typescript를 쓰지 않았을 때의 벌어지는 일들의 예시
  JavaScript만 쓰고 작업을 하면, 타입의 덮어씌우기가 가능해져버린다.
  이 때문에, 타 개발자들이 자꾸 기존 변수에 타입 덮어씌우기를 해서 작업을 해버릴 수가 있다.
  과거 다른 개발자들이 Typescript를 쓰지 않고 개발을 마무리 한 뒤, 
  이를 유지보수해야하는 프로젝트가 있었다.
  코드를 받은 시점부터 버그때문에 돌아가지 않았고, 어디서부터 잘못 되었는지 버그를 찾기 위해서
  Typescript를 적용을 한 적이 있었다.
  이때 수백개의 타입 에러가 나와서, 엄청 많은 작업을 한 적이 있었다.
  이런 일들 때문에, 처음부터 Typescript를 적용해서 작업을 하는 것이다.

1. Typescript 장점(1) : 실수방지
  변수에 지정되지 않은 잘못된 타입을 넣었을 때 에러를 표시해주어, 실수에 의한 (또는 다른 초보 개발자에 의한?) 에러 방지가 가능하다.
    함수, 컴포넌트 등의 타입 추론이 되다보니, 만약에 우리가 사소한 오타를 만들면 코드를 실행하지 않더라도 IDE 상에서 바로 알 수 있게 된다.
    그리고, 예를 들어 null이나 undefined일 수도 있는 값의 내부 값 혹은 함수를 호출한다면(예: 배열의 내장함수) 사전에 null 체킹을 하지 않으면 오류를 띄우므로 null 체킹도 확실하게 할 수 있게 된다.

1. Typescript 장점(2) : IDE 활용성 증가
  IDE상에서 컴포넌트별 변수나 함수들의 자동완성을 편하게 해준다. (컴포넌트마다 타입을 객체로 설정해서)
  IDE상에서 변수나 함수들에 들어갈 state, props, param, return 값에 알맞은 타입을 확인하며 작업할 수 있게 된다. (변수마다 타입을 설정해서)
    함수를 사용 할 때 해당 함수가 어떤 params를 필요로 하는지, 그리고 어떤 값을 return하는지 코드를 따로 열어보지 않아도 알 수 있다.
    추가적으로, 리액트 컴포넌트의 경우 해당 컴포넌트를 사용하게 될 때 props에는 무엇을 전달해줘야하는지, JSX를 작성하는 과정에서 바로 알 수 있다.
    컴포넌트 내부에서도 자신의 props에 어떤 값이 있으며, state에 어떤 값이 있는지 알 수 있다.
    리덕스와 함께 사용하게 될 때에도 스토어 안에 어떤 상태가 들어있는지 바로 조회가 가능해서 굉장히 편리하다.



[TypeScript 설치 및 설정하기]

1. package.json 생성 : 노드패키지 설정파일
  $ npm init -y (= yarn init -y)
  
1. tsconfig.json 생성 : 타입스크립트 설정파일
  $ npm i typescript
  # 글로벌로 할 때 : $ npm i -g typescript (= yarn global add typescript)
  $ tsc --init

  위 명령어를 통해 자동생성이 되지만, 다음과 같이 직접 쳐서 작성해도 된다.
  {
    "compilerOptions": {
      "target": "es5",
      "module": "commonjs",
      "strict": true,
      "esModuleInterop": true
    }
  }

  tsconfig.json은 타입스크립트가 컴파일 될 때 필요한 옵션들을 지정한다.
  tsc --init 명령어를 통해서 기본적으로 설정되는 옵션들은 다음과 같다.
    - target: 컴파일된 코드가 어떤 환경에서 실행될 지 정의한다. 
      예를 들어서,
      화살표 함수를 사용하고 target을 es5로 한다면 일반 function 키워드를 사용하는 함수로 변환한다.
      하지만 이를 es6로 설정한다면 화살표 함수를 그대로 유지한다.
    - module: 컴파일된 코드가 어떤 모듈 시스템을 사용할지 정의한다.
      예를 들어서,
      이 값을 common으로 하면, 
      export default Sample을 하게 됐을 때 컴파일 된 코드에서는
      exports.default = helloWorld 로 변환해주지만,
      이 값을 es2015로 하면,
      export default Sample을 그대로 유지하게 된다.
    - strict: 모든 타입 체킹 옵션을 활성화한다는 것을 의미한다.
    - esModuleInterop: commonjs 모듈 형태로 이루어진 파일을 es2015 모듈 형태로 불러올 수 있게 해준다.

1. tsconfig.json 수정 : "outDir": "./dist" 이라는 속성을 추가해서, 컴파일된 파일들이 저장되는 경로를 "./dist"로 지정하기
  {
    "compilerOptions": {
      "target": "es5",
      "module": "commonjs",
      "strict": true,
      "esModuleInterop": true,
      "outDir": "./dist" // 컴파일된 파일들이 저장되는 경로 지정
    }
  }

1. src/practice.ts 생성 : 첫 타입스크립트 파일 만들기
  // ↓ ": string"로 해당 상수 값이 문자열 이라는 것을 명시, 숫자로 값 설정시 에디터 상에서 오류 표시됨
  const message: string = 'hello world'
  console.log(message)

1. 타입스크립트 컴파일
  $ cd app1
  $ tsc
  dist/practice.js 경로에 파일 생성 내용 확인
    "use strict";
    var message = 'hello world';
    console.log(message);
  ts 파일에서 명시한 값의 타입은 컴파일이 되는 과정에서 모두 사라지게 된다.



[TypeScript 변수타입정의]

1. TypeScript 변수타입정의
  TypeScript를 사용하면 이렇게 특정 변수 또는 상수의 타입을 지정 할 수 있고,
  사전에 지정한 타입이 아닌 값이 설정 될 때 바로 에러를 발생시킨다.
  에러나는 부분을 주석 해제하고 tsc 명령어를 입력해서 컴파일을 시도하면, 실패 메시지가 뜨며 컴파일이 되지 않는다.

  const a: number = 1
  const b: string = 'hello'
  const done: boolean = true // 불리언 값
  const numbers: number[] = [1, 2, 3] // 숫자 배열
  const messages: string[] = ['hello', 'world'] // 문자열 배열
  let mightBeUndefined: string | undefined = undefined // string 일수도 있고 undefined 일수도 있음
  let nullableNumber: number | null = null // number 일수도 있고 null 일수도 있음
  let color: 'red' | 'orange' | 'yellow' = 'red' // red, orange, yellow 중 하나임. 유니온 타입(Union Type)
  // color = 'green' // -> 에러!



[TypeScript 함수타입정의]

1. TypeScript 함수타입정의
  이번에는 함수에서 타입을 정의하는 방법을 알아보겠다.

1. src/practice.ts 수정
  // 1. 함수의 파라미터, 리턴값 타입 정의
  function sum(x: number, y: number): number {
      return x + y
  }
    sum(1, 2) // 함수명에 마우스를 가져다대면, 함수의 파라미터, 리턴값 타입을 바로 알 수 있다.
    // sum(1, null)// -> 에러! : 함수가 파라미터나 리턴값이 null이 된다면 오류가 뜨게 된다.

    // 1. sumArray 함수 선언 : 숫자 배열의 총합을 구하는 함수를 선언한다.
    function sumArray(numbers: number[]): number {
        return numbers.reduce((acc, current) => acc + current, 0)
    }
    const result1 = sumArray([1, 2, 3, 4, 5])
        
    // 1. returnNothing 함수 선언 : 리턴값이 없는 함수라면 반환 타입을 void로 설정하면 된다.
    function returnNothing(): void {
        console.log('1')
    }
    returnNothing()

    // 1. 유니온 타입(Union Type) : string | number 처럼 앰퍼센드를 이용해서 두개 이상의 타입을 지니게 하는 것이다.
    function plusOne(a: string | number): number {
        return Number(a) + 1
    }
    console.log(plusOne('1')) // 2

1. 테스트
    $ cd app1
    $ tsc
    app1/dist/practice.js에서 컴파일 확인
    $ node dist/practice

