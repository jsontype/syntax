[REST vs BFF]

1. REST API (SQL)란?
  예: https://yts.mx/api/v2/list_movies.json?sort_by=rating

  DB를 SELECT 할때는 GET,
  DB를 INSERT, UPDATE 할때는 POST,
  DB를 DELETE 할때는 DELETE,
  등의 메소드를 사용한다.
  이는 백엔드에서, SQL를 통해서 만드는 API들의 메소드를 의미힌다.

  지금까지 우리는 GET만 사용해서, 호출만 해봤다.
  그러나, 만일 POST를 사용해서 DB를 INSERT 하는 경우라면, fetch를 이런식으로 할 것이다.
    fetch("https://yts.mx/api/v2/insert_movie", { 
      method: "POST",
      body: { title: 'Titanic', year: 1998, ... },
    })
      .then(res => res.json() );
      .then(json => console.log(json));

  REpresentational State Transfer의 약어로, "구체적으로 상태를 정의한 정보의 교환"을 의미한다.
  REST API는 다음의 RESTful 4원칙에 따라 설계된다.
    - 통일된 인터페이스 : 다음의 4가지 요청 형식으로 통일하는 것을 말한다.
      GET	: 정보 받아오기
      POST : 정보 입력하기
      PUT / PATCH : 정보 수정하기
      DELETE : 정보 삭제하기
    - Address 가능성
      모든 정보가 고유한 URI로 표현되어야 한다.
    - Access성
      하나의 링크에서 다른 정보에 링크 할 수 있어 RESTful 시스템끼리 원활하게 정보 연계를 할 수 있어야 한다.
    - Stateless성
      State 없이, 교환이 1회 마다 완결되어야 한다.

  REST API의 요청형식별 URI 예시는 다음과 같다.
    GET	: localhost:3000/api/team
    GET	: localhost:3000/api/team/{id 번호}
    GET	: localhost:3000/api/people
    GET	: localhost:3000/api/people?{변수}={값}&{변수}={값} ...
    GET	: localhost:3000/api/team/{id 번호}/people
    POST : localhost:3000/api/team
    PUT	: localhost:3000/api/team/{id 번호}
    DELETE : localhost:3000/api/team/{id 번호}

  REST API의 단점은 다음과 같다.
    - 딱 필요한 정보들만 받아올 수가 없다.
    - 하나의 정보를 얻기 위해 여러 번의 요청을 보내야 한다.
      예를 들면, "team별 people"이라는 하나의 정보인데, 이를 위해서는
      "localhost:3000/api/team" 부르고 또 "localhost:3000/api/people" 부르고 등등...

  ★★ 사실 지금까지의 React 앱은 백엔드를 모두 REST API로 다룬 것이다!



1. BFF (GraphQL)란?
  BFF란 Backend for Frontend의 약어로, "프론트엔드를 위한 백엔드"를 의미한다.
  BFF는 프론트엔드와 백엔드 사이에서, 프론트엔드의 요청에 따라 백엔드의 데이터를 가공하여 프론트엔드에게 전달하는 역할을 한다.
  BFF를 하기 위해서는 GraphQL을 쓸 줄 알아야한다.

1. GraphQL이란?
  REST API의 단점을 보완하기 위해 페이스북에서 만든 쿼리 언어이다.
  REST API는 URL을 통해 데이터를 요청하는 반면, GraphQL은 쿼리를 통해 데이터를 요청한다.
  REST API는 요청에 대한 응답으로 JSON을 반환하는 반면, GraphQL은 쿼리에 대한 응답으로 JSON을 반환한다.
  REST API는 하나의 Endpoint에 하나의 데이터만 반환하는 반면, GraphQL은 하나의 Endpoint에 여러 데이터를 반환한다.
  REST API는 Overfetching이 발생할 수 있다. (필요한 정보보다 많은 정보를 서버에서 받는 것) 반면, 
    GraphQL은 필요한 정보만 받을 수 있다.
  REST API는 Underfetching이 발생할 수 있다. (하나의 정보를 얻기 위해 여러 번의 요청을 보내야 하는 것) 반면, 
    GraphQL은 하나의 요청으로 여러 정보를 얻을 수 있다.
  
  GraphQL 사용의 예시
    - 팀 전체 조회
      query { : 쿼리이다. REST API로 치면 "GET"이다.
        teams { : "teams 쿼리"이다. (teams 쿼리 객체에는 해당 쿼리를 날렸을 때의 반환될 필드들을 지정한다)
          id : "id등"은 필드이다.
          manager
          office
          extension_number
          mascot
          cleaning_duty
          project
        }
      }
    - 팀 하나 조회
      query {
        team(id: 1) { : "id: 1"은 파라미터이다.
          manager
          office
          members {
            first_name
            last_name
          }
        }
      }
    - 팀 추가
      mutation { : 뮤테이션이다. REST API로 치면 "POST, PUT, PATCH, DELETE" 등이다.
        postTeam (input: { : 인풋값의 타입이다. 뮤테이션의 파라미터가 된다.
          manager: "John Smith"
          office: "104B"
          extension_number: "#9982"
          mascot: "Dragon"
          cleaning_duty: "Monday"
          project: "Lordaeron"
        }) { : 리턴값의 타입이다.
          manager
          office
          extension_number
          mascot
          cleaning_duty
          project
        }
      }
    - 팀 수정
      mutation {
        editTeam(id: 2, input: { : "id: 2"는 뮤테이션의 또다른 파라미터가 된다.
          manager: "Maruchi Han"
          office: "105A"
          extension_number: "2315"
          mascot: "Direwolf"
          cleaning_duty: "Wednesday"
          project: "Haemosu"
        }) {
          id,
          manager,
          office,
          extension_number,
          mascot,
          cleaning_duty,
          project
        }
      }
    - 팀 삭제
      mutation {
        deleteTeam(id: 3) {
          id,
          manager,
          office,
          extension_number,
          mascot,
          cleaning_duty,
          project
        }
      }
  이렇게, 원하는 정보의 명세를 작성해두는 것만으로 DB에 접근하여 정보를 얻을 수 있다.
  
1. Apollo란?
  GraphQL은 명세, 형식일 뿐이며,
  실제로 GraphQL을 사용하기 위해서는 GraphQL을 지원하는 서버와 클라이언트가 필요하다.
  Apollo는 GraphQL을 사용하기 위한 서버와 클라이언트를 모두 제공한다.
  설정이 간편하고 쉬우며, 많은 기능을 제공한다.