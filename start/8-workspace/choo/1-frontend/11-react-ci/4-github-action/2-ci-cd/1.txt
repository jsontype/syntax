[Github Actions를 이용한 CI 테스트 자동화 : Continuous Integration]
참조URL: https://creampuffy.tistory.com/190 

1. 사전준비 : 프로젝트를 새로 깔지 않고, 이전 챕터에서의 코드를 그대로 카피해서 가지고 온다.

1. 깃이 연결된 프로젝트 폴더의 master 브랜치에서 작업
  $ cd app1
  $ git checkout master

1. CI/CD (지속적 통합/배포)
  CI/CD의 뜻은, 지속적인 통합/서비스제공/배포이다. (= Continuous Integration/Delivery/Deployment)
  CI/CD가 하는 일은, 애플리케이션 개발 단계를 자동화한다. 
  새로운 코드의 통합으로 인해 개발 및 운영팀에 발생하는 문제(일명 통합 지옥)를 해결하기 위한 솔루션이다.
  특히, 애플리케이션의 통합 및 테스트 단계에서부터 제공 및 배포에 이르는 애플리케이션의 라이프사이클 전체에 걸쳐 
  지속적인 자동화와 지속적인 모니터링을 제공한다.
  이러한 구축 사례를 일반적으로 “CI/CD 파이프라인”이라 부르며,
  개발 및 운영팀의 애자일 방식 협력을 통해 DevOps 또는 SRE(사이트 신뢰성 엔지니어링) 방식으로 지원된다.

1. github/workflows/ci.yml 생성 : ci 설정파일이다. *.yml 파일로 작성하면 ci.yml 파일명 대신 아무거나 상관없다.
  # 파일 이름: .github/workflows/ci.yml
  name: CI

  # on: 어떤 이벤트에 워크플로우가 실행되는지 설정
  on:
    # push 이벤트에 master 브랜치와 develop 브랜치에서 실행
    push:
      branches:
        - master
        - develop
    # pull_request 이벤트에 master 브랜치와 develop 브랜치에서 실행
    pull_request:
      branches:
        - master
        - develop

  # jobs: 워크플로우에서 실행할 작업들을 정의
  jobs:
    # build: 작업명
    build:
      # runs-on: 작업이 실행되는 가상 환경을 설정
      runs-on: ubuntu-latest
      steps:
      # name: 워크플로우 이름
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Run Prettier
        run: npm run format     
        working-directory: ./src

      - name: Run ESLint
        run: npm run lint
        working-directory: ./src

      - name: Run Jest
        run: npm test
        working-directory: ./src

      - name: Build project
        run: npm run build

1. github 폴더를 클론을 딴 프로젝트에 마이그레이션
  github 폴더명에 .을 붙여서 .github 폴더로 만들고, init 폴더에 이동시킨다.
  - 현 폴더에 .을 붙이지 않은 이유는, .을 붙이면 변경점으로 인식하지 않기 때문이다.

1. master 브랜치에 푸시
  $ git add .
  $ git commit -m "feat: ci-cd"
  $ git push origin master



[PR할 때마다 CI 테스트자동화 되는지 실제로 확인해보기]

1. feat/1 브랜치 생성
  $ git checkout -b feat/1

1. src/App.js 수정 : CI 테스트를 위한 수정
  Hello React! 문자열을 살짝 바꿔본다.

1. feat/1 브랜치에 푸시
  $ npm run format:fix
  $ git add .
  $ git commit -m "feat: change text"
  $ git push origin feat/1

1. 테스트
  github 사이트에서 PR 날려보기 : https://github.com/jsontype/init
  깃허브 사이트에서 ci가 돌아가는지 확인
  * 혹시 PR을 날렸는데 ci 테스트가 돌지 않는다면 
    ci.yml 파일 내의 push branches가 main인지, master인지 잘 확인해 볼 것 !



[Github상의 CI 테스트 실패시 대응]

1. CI 테스트 실패시 대응
  npm run build(=yarn build) 후 나오는 에러 전부 수정하기
  필요시 베이스 브랜치을 최신화해서 현재 브랜치에 머지하기
  https://creampuffy.tistory.com/190



[Github Actions를 이용한 CD 배포 자동화 : Continuous Delivery]

1. CD란?
  CD(지속적인 배포)는 자동화를 사용하여 소프트웨어 업데이트를 게시하고 배포하는 방법이다.
  일반적인 CD 프로세스의 일부로 코드는 배포 전에 자동으로 "빌드"되고 테스트됩니다.
  GitHub 이벤트가 발생할 때(예: 새 코드가 리포지토리의 기본 분기에 푸시될 때) 실행되도록
  CD 워크플로를 구성할 수 있다.
  한편, GitHub Actions는 배포를 더 잘 제어할 수 있는 기능을 제공하기도 한다.
  예를 들어 환경을 사용하여 작업을 진행하기 위한 승인을 요구하거나,
  워크플로를 트리거할 수 있는 분기를 제한하거나, 비밀에 대한 액세스를 제한할 수 있다.
  동시성을 사용하여 CD 파이프라인을 최대 1개의 진행 중인 배포와 1개의 보류 중인 배포로 제한할 수 있다.
