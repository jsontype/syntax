[useReducer 를 사용하여 상태 업데이트 로직 분리하기]

1. useReducer란?
  상태를 관리하게 될 때 useState 외에도 useReducer를 사용할 수 있다. 
  이 Hook 함수를 사용하면 컴포넌트 상태 업데이트 로직을 컴포넌트에서 분리시킬 수 있다. 
  상태 업데이트 로직을 컴포넌트 바깥에 작성 할 수도 있고, 심지어 다른 파일에 작성 후 불러와서 사용 할 수도 있다.

1. src/Counter.js 생성 : useState가 아닌 useReducer로 state를 선언하기
  // 1. useReducer 임포트
  import React, { useReducer } from "react";

  // 2. reducer 만들기
  function reducer(state, action) {
    switch (action.type) {
      case "INCREMENT":
        return state + 1;
      case "DECREMENT":
        return state - 1;
      default:
        return state;
    }
  }

  export default function Counter() {
    // 3. useReducer로 state 선언하기 : setState를 dispatch로 변경, 인자값은 reducer를 초기값 앞에 추가
    const [number, dispatch] = useReducer(reducer, 0);

    // 4. 함수는 setState로 직접 바꾸는 게 아니라, reducer에서 작성한 액션 타입을 dispatch하는 방식으로 변경
    const onIncrease = () => {
      dispatch({ type: "INCREMENT" });
    };
    const onDecrease = () => {
      dispatch({ type: "DECREMENT" });
    };

    return (
      <div>
        <h1>{number}</h1>
        <button onClick={onIncrease}>+1</button>
        <button onClick={onDecrease}>-1</button>
      </div>
    );
  }

1. src/App.js 수정 : Counter 렌더링
  import React from "react";
  import "./App.css";
  import Counter from "./Counter";

  export default function App() {
    // JS

    // XML
    return (
      <div>
        <Counter />
      </div>
    );
  }

1. 중간 테스트
  $ cd app1
  $ npm start

1. src/CounterReducer.js 생성 : 로직 나누기
  export default function reducer(state, action) {
    // action.type에 따라 다른 작업 수행
    switch (action.type) {
      case "INCREMENT":
        return state + 1
      case "DECREMENT":
        return state - 1
      default:
        // 아무것도 해당되지 않을 때 기존 상태 반환
        return state
    }
  }

1. src/Counter.js 수정 : 로직 나누기
  import React from "react"
  import { useReducer } from "react"
  import reducer from "./CounterReducer"

  export default function Counter() {
    // Local State : 지역에서만 적용이 가능하다.
    const [count, dispatch] = useReducer(reducer, 0)

    const onIncrease = () => {
      dispatch({ type: "INCREMENT" })
    }

    const onDecrease = () => {
      dispatch({ type: "DECREMENT" })
    }

    return (
      <div>
        <h2>{count}</h2>
        <button onClick={onIncrease}>+</button>
        <button onClick={onDecrease}>-</button>
      </div>
    )
  }

1. 테스트 : 똑같이 작동하는지 확인
  $ cd app1
  $ npm start

1. 마무리
  useReducer를 쓰는 것의 핵심은
  action 함수들의 모음인 reducer 함수를 사용함으로써,
  로직을 뷰가 아닌 다른 파일에 담을 수 있다는 것이다.
  수백개의 로직이 있는 컴포넌트가 있다고 가정해보면,
  컴포넌트가 너무 복잡해지고, 유지보수가 어려워진다.
  그러나 이렇게 하면 컴포넌트 파일이 깔끔해지고, 재사용성도 높아진다.
  또한, 로직을 다른 파일에 작성하면 테스트도 쉬워진다.
  이렇게 로직을 분리하는 것은 컨텍스트나 리덕스를 사용할 때도 동일하게 적용된다.
