[리뷰하기]

1. [PR 자체] 수정 파일 수는 10개를 넘지 않는가? : 넘는다면 비즈니스 로직에 대해 설명해줄 수 있는지 질문하고, 리뷰하기 어려우니 가능하면 수정 파일 수는 10개 넘지 않게 해달라고 부탁하자.
1. [PR 자체] github상의 pull request 탭에서, merge branch의 대상이 제대로 되어 있는가? : 이상하게 수정 파일 수가 많다면 merge branch 대상을 확인하자.
1. [PR 자체] master 혹은 develop 브랜치에서, 해당 pr로 인해 삭제되는 파일은 없는가? : 있다면 돌려놓아라.
1. [Library] 라이브러리를 추가했다면, 혹시 외부 CDN을 썼는가? : 외부 CDN 장애 시 서비스에 영향이 있기 때문에, 스태틱 리소스로 다운받아서 사용을 권장한다.
1. [Library] 라이브러리를 추가했다면, 버전은 최신 버전을 썼는가? 아니라면, 해당 올드 버전의 라이브러리에는 취약점 문제는 없는가? : npm audit fix를 통해 만일 취약점이 새로 추가됐다면, 해당 라이브러리의 버전을 가능한한 최신으로 업데이트하는 것을 권장한다.
1. [Lint] 스펠링등에 오타가 있는가? : 처음에는 가벼운 마음으로 쭉 오타를 찾아본다.
1. [Lint] console.log()가 남아있는가?
1. [Lint] 그 외 현장에서 지정한 case naming rule, lint, convention, 기타 개발 rule에 대한 오류가 있는가?
1. [CSS] css가 중복되는 부분은 @mixin과 @include를 써서 함수화했는가?
1. [Variable] 변수에 var를 썼는가? : var는 중복 선언이 가능하며, var는 함수 코드블럭만 지역스코프로 인정되므로 전역변수를 남발시 문제가 될 수 있다. var는 변수 호이스팅에 의해 선언문이 스코프의 위쪽으로 끌어올려진 것 처럼 동작하며, 오류를 발생할 여지를 남긴다.
1. [Variable] 변수에 let을 썼다면, 이를 const로 수정할 수 있는가? : const는 의도치 않은 재할당을 방지해 주기 때문에, 꼭 필요한 상황이 아니라면 const를 쓰는 것을 안전하다. 처음에 싹 다 const로 쓰고 바꿔야하는 값이라면 그때 let으로 바꾸는 방법도 추천한다.
1. [For] for i 형태의 반복문을 쓰는가? : foreach로 변경할 수 있는지 물어본다. for i는 동적으로 컬렉션이 바뀌는 경우에 오류가 날 수 있으므로, 무조건 ForEach를 쓰는 것이 좋다. 만일 for i를 쓴 이유가 인덱스 조작 때문이라면, ForEach에서도 인덱스 접근이 가능하다.
1. [Object: DOM] DOM element 객체를 재사용하는데도 변수화하지 않았는가? : JS 실행시 DOM 탐색이 가장 비싼 연산이므로, DOM element 객체는 다시 찾지 않도록 변수로 저장해놓는게 좋다. 
1. [Object: deep copy] 깊은 복사를 위해서 JSON.parse(JSON.stringify(item))를 사용한 곳이 있는가? : 깊은 복사를 하는 거라면 JSON 함수 쓰지 않고 { ...item } 같은 스프레드 방법으로 쓰는게 낫다. 아니면 Object.assign({}, item)와 같이 Object.assign 함수를 써도 된다.
1. [Type: String] string 변수에 '' + '' 와 같은 처리가 있는가? : `${} ${}`와 같이 바꾸는 것을 권장한다. 문자열은 원래 연산 타입이 아니므로, 잠재적 오류를 없애기 위해 가급적이면 template literal을 사용하는 것이 좋다.
1. [Type: Interface] 인터페이스 정의에 { key1: string[], key2: string, ... } 이런 식으로 항목마다 콤마 ,를 썼는가? : 인터페이스는 뎁스가 없어서 세미콜론 쓰거나 아무것도 안 쓰는 것으로 바꿔라. 객체를 type과 구별하기 위해서도 콤마를 없애는 것이 필요하다.
1. [Type: any] type 지정에에 any type이 있는가? : 그러면 ts를 쓰는 의미가 없으므로 불가피한 경우가 아니면 상세 타입을 지정하는 것을 권장한다.
1. [Type: any] ": any[]"를 쓰고 있는가? : 그러면 "<T>: [T]"처럼 제네릭스를 쓰는 방법으로 바꿔주는 것이 좋다. 디버깅용이거나 임시용도가 아니라면 any 타입은 쓰지 않는게 좋다. map, forEach 등 배열고차함수를 사용한다면 배열이므로 타입을 generics로 대체할 수 있다. 또한 객체가 들어있다면 내용이 어떤 구조인지 알 수 없으니 interface 같은거 만들어서 지정해주는게 좋겠다.
1. [Type: unknown] type 지정에에 unknown type이 있는가? : 그러면 ts를 쓰는 의미가 없으므로 불가피한 경우가 아니면 상세 타입을 지정하는 것을 권장한다.
1. [Type: undefined] 타입 설정중에 "key: string | undefined"와 같이 설정된 타입이 있는가? : 그러면 "key?: string"로 바꾸자. 뒤에 undefined 타입 추가보다는 옵셔널타입인 ?를 뒤에 붙이는게 좋다. 단, ?은 undefined만 되지, null은 허용하지 않으므로 주의.

[질문하기]

1. 이 변수명은 무엇을 뜻하는가?
1. 이 비즈니스 로직이 어떻게 돌아가는가? : 질문받은 사람은 이를 설명하면서 다시 복기할 수 있고 질문한 사람은 답변을 보고 로직에 관한 지식을 얻는 게 목적
1. 이거는 ~을 하는 목적인 건가? 그 목적이 맞는다면 이렇게 해보면 어떨까?
