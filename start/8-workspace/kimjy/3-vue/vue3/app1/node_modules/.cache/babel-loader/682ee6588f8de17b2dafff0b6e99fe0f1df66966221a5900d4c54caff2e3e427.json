{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, reactive, onMounted } from \"vue\";\nexport default {\n  __name: 'TodoApp',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const todos = reactive([]);\n    // setTodos([...todos, newTodo]) // 리액트\n    //\n    const newTodo = ref(\"\");\n    // const [newTodo] = useState(\"\") // 리액트 state\n    // newTodo.current = \"바꿀 값\" // 리액트 ref\n    // newTodo.value = \"바꿀 값\" // 뷰 ref\n\n    // * TODO (예시): 아래의 초기값을, \"로그인했을 때의 회원아이디\"로 변경할 것\n    const loginUserId = ref(1);\n    function getTodos() {\n      fetch(\"https://jsonplaceholder.typicode.com/todos\").then(res => res.json()).then(json => {\n        console.log(json);\n        for (let i = 0; i < json.length; i++) {\n          if (json[i].userId === loginUserId.value) {\n            todos.push(json[i]); // reactive로 선언을 할 때는 value를 사용하지 않는다.\n          }\n        }\n        console.log(todos[0]);\n        console.log(todos[1]);\n        console.log(todos[2]);\n      });\n    }\n    function toggleTodo(item) {\n      item.completed = !item.completed;\n    }\n    function addTodo() {\n      if (newTodo.value === \"\") {\n        alert(\"할 일을 입력해주세요.\");\n        return;\n      }\n      const todo = {\n        id: todos.length + 1,\n        title: newTodo.value,\n        completed: false,\n        userId: loginUserId.value\n      };\n      todos.push(todo);\n    }\n    function delTodo(id) {\n      // 해당 id를 가진 todo 찾기\n      const index = todos.findIndex(todo => todo.id === id);\n      // 찾은 todo가 있으면 삭제\n      todos.splice(index, 1);\n      console.log(todos);\n    }\n    onMounted(() => {\n      getTodos();\n    });\n    const __returned__ = {\n      todos,\n      newTodo,\n      loginUserId,\n      getTodos,\n      toggleTodo,\n      addTodo,\n      delTodo,\n      ref,\n      reactive,\n      onMounted\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","reactive","onMounted","todos","newTodo","loginUserId","getTodos","fetch","then","res","json","console","log","i","length","userId","value","push","toggleTodo","item","completed","addTodo","alert","todo","id","title","delTodo","index","findIndex","splice"],"sources":["/Users/dev/Desktop/workspace/syntax/start/8-workspace/kimjy/3-vue/vue3/app1/src/components/TodoApp.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>Todo App</h1>\n    <div id=\"addTodo\">\n      <input type=\"text\" v-model=\"newTodo\" />\n      <button @click=\"addTodo\">추가</button>\n    </div>\n    <div id=\"todos\">\n      <div v-for=\"todo in todos\" :key=\"todo.id\" class=\"todo\">\n        <span @click=\"toggleTodo(todo)\">\n          <span>#{{ todo.id }} / </span>\n          <span>{{ todo.title }} / </span>\n          <input type=\"checkbox\" :checked=\"todo.completed\" />\n        </span>\n        <span>\n          <button @click=\"delTodo(todo.id)\">삭제</button>\n        </span>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, reactive, onMounted } from \"vue\"\n\nconst todos = reactive([])\n// setTodos([...todos, newTodo]) // 리액트\n//\nconst newTodo = ref(\"\")\n// const [newTodo] = useState(\"\") // 리액트 state\n// newTodo.current = \"바꿀 값\" // 리액트 ref\n// newTodo.value = \"바꿀 값\" // 뷰 ref\n\n// * TODO (예시): 아래의 초기값을, \"로그인했을 때의 회원아이디\"로 변경할 것\nconst loginUserId = ref(1)\n\nfunction getTodos() {\n  fetch(\"https://jsonplaceholder.typicode.com/todos\")\n    .then((res) => res.json())\n    .then((json) => {\n      console.log(json)\n      for (let i = 0; i < json.length; i++) {\n        if (json[i].userId === loginUserId.value) {\n          todos.push(json[i]) // reactive로 선언을 할 때는 value를 사용하지 않는다.\n        }\n      }\n      console.log(todos[0])\n      console.log(todos[1])\n      console.log(todos[2])\n    })\n}\n\nfunction toggleTodo(item) {\n  item.completed = !item.completed\n}\n\nfunction addTodo() {\n  if (newTodo.value === \"\") {\n    alert(\"할 일을 입력해주세요.\")\n    return\n  }\n  const todo = {\n    id: todos.length + 1,\n    title: newTodo.value,\n    completed: false,\n    userId: loginUserId.value,\n  }\n  todos.push(todo)\n}\n\nfunction delTodo(id) {\n  // 해당 id를 가진 todo 찾기\n  const index = todos.findIndex((todo) => todo.id === id)\n  // 찾은 todo가 있으면 삭제\n  todos.splice(index, 1)\n  console.log(todos)\n}\n\nonMounted(() => {\n  getTodos()\n})\n</script>\n\n<style lang=\"css\" scoped>\n.movieTitle {\n  display: block;\n}\n</style>\n"],"mappings":";AAuBA,SAASA,GAAG,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,KAAI;;;;;;;IAE7C,MAAMC,KAAK,GAAGF,QAAQ,CAAC,EAAE;IACzB;IACA;IACA,MAAMG,OAAO,GAAGJ,GAAG,CAAC,EAAE;IACtB;IACA;IACA;;IAEA;IACA,MAAMK,WAAW,GAAGL,GAAG,CAAC,CAAC;IAEzB,SAASM,QAAQA,CAAA,EAAG;MAClBC,KAAK,CAAC,4CAA4C,EAC/CC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,EACxBF,IAAI,CAAEE,IAAI,IAAK;QACdC,OAAO,CAACC,GAAG,CAACF,IAAI;QAChB,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,IAAI,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;UACpC,IAAIH,IAAI,CAACG,CAAC,CAAC,CAACE,MAAM,KAAKV,WAAW,CAACW,KAAK,EAAE;YACxCb,KAAK,CAACc,IAAI,CAACP,IAAI,CAACG,CAAC,CAAC,CAAC,EAAC;UACtB;QACF;QACAF,OAAO,CAACC,GAAG,CAACT,KAAK,CAAC,CAAC,CAAC;QACpBQ,OAAO,CAACC,GAAG,CAACT,KAAK,CAAC,CAAC,CAAC;QACpBQ,OAAO,CAACC,GAAG,CAACT,KAAK,CAAC,CAAC,CAAC;MACtB,CAAC;IACL;IAEA,SAASe,UAAUA,CAACC,IAAI,EAAE;MACxBA,IAAI,CAACC,SAAS,GAAG,CAACD,IAAI,CAACC,SAAQ;IACjC;IAEA,SAASC,OAAOA,CAAA,EAAG;MACjB,IAAIjB,OAAO,CAACY,KAAK,KAAK,EAAE,EAAE;QACxBM,KAAK,CAAC,cAAc;QACpB;MACF;MACA,MAAMC,IAAI,GAAG;QACXC,EAAE,EAAErB,KAAK,CAACW,MAAM,GAAG,CAAC;QACpBW,KAAK,EAAErB,OAAO,CAACY,KAAK;QACpBI,SAAS,EAAE,KAAK;QAChBL,MAAM,EAAEV,WAAW,CAACW;MACtB;MACAb,KAAK,CAACc,IAAI,CAACM,IAAI;IACjB;IAEA,SAASG,OAAOA,CAACF,EAAE,EAAE;MACnB;MACA,MAAMG,KAAK,GAAGxB,KAAK,CAACyB,SAAS,CAAEL,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKA,EAAE;MACtD;MACArB,KAAK,CAAC0B,MAAM,CAACF,KAAK,EAAE,CAAC;MACrBhB,OAAO,CAACC,GAAG,CAACT,KAAK;IACnB;IAEAD,SAAS,CAAC,MAAM;MACdI,QAAQ,CAAC;IACX,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}