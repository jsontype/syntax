/Users/dev/Desktop/workspace/syntax/frontend/5-react/1-react/12-BFF/1-bff-server/1-graphql-and-apollo/1.txt <<<

[GraphQL]

1. REST API란？
[GraphQL]

1. REST API란？
  REpresentational State Transfer の略で、"具体的に状態を定義した情報の交換"を意味する。
  次のRESTful 4 原則に従って設計される。
    - 統一されたインタフェース:次の4つの要請形式で統一することをいう。
      GET : 情報受信
      POST : 情報入力する
      PUT / PATCH : 情報を修正する
      DELETE : 情報を削除する
    - アドレス可能性
      全ての情報が固有のURIで表現されなければならない。
    - Access성
      一つのリンクから他の情報にリンクすることができ、RESTfulシステム同士が円滑に情報連携ができることが必要である。
    - Stateless성
      Stateなしで、交換が1回ごとに完結しなければならない。
  RESTAPI の要求形式別URI 例は以下の通りである。
    GET	: localhost:3000/api/team
    GET	: localhost:3000/api/team/{id 번호}
    GET	: localhost:3000/api/people
    GET:localhost:3000/api/people?{変数}={値}&{変数}={値}···
    POST : localhost:3000/api/team/write
    POST : localhost:3000/api/team/modify
    POST : localhost:3000/api/team/delete    
    PUT	: localhost:3000/api/team/{id 번호}
    DELETE : localhost:3000/api/team/{id 번호}
  RESTAPI の限界は以下の通りである。
    - 必要な情報だけを受け取ることはできない。
    - 一つの情報を得るために数回の要請を送らなければならない。
      team情報、people情報の2つが必要な場合、APIに持ってきたら2回呼び出しをしなければなりませんが、
      クエリで持ってくれば、クエリの中に以下のように入れて、一度に持ってくることができる。 以下はその例である。
        query {
          equipments {
              id
              used_by
              count
              new_or_used
          },
          supplies {
            id
          }
        }
  ★★実はこれまでのReact、NextアプリはバックエンドをすべてRESTAPIで扱ったものだ！

  1. GraphQLとは？
  RESTAPIの短所を補完するためにフェイスブックで作ったクエリ言語だ。
  RESTAPIはURLを通じてデータを要請する反面、GraphQLはクエリーを通じてデータを要請する。
  RESTAPIはOverfetchingが発生する可能性がある。 （必要な情報より多くの情報をサーバから受け取ること）反面、GraphQL は必要な情報しか受け取ることができない。
  RESTAPIはUnderfetchingが発生する可能性がある。 （一つの情報を得るために複数の要請を送らなければならないこと）反面、GraphQL は一つの要請で複数の情報を得ることができる。
  
  GraphQLの使用例
    - チーム全体照会
      query {: クエリである。 REST API で言えば"GET"である。
        teams {: "teams クエリ" である。(teams クエリオブジェクトには、そのクエリーを飛ばしたときに返されるフィールドを指定する)
          id:「id 等」はフィールドである。
          manager
          office
          extension_number
          mascot
          cleaning_duty
          project
        }
      }
    - チーム一つ照会
      query {
        team(id:1) {: "id:1" はパラメータである。
          manager
          office
          members {
            first_name
            last_name
          }
        }
      }
    - チーム追加
      mutation {: ミューテーションである。 REST API で言えば"POST, PUT, PATCH, DELETE"などである。
        postTeam (input: {: インプット値のタイプである。 ミューテーションのパラメータとなる。
          manager: "John Smith"
          office: "104B"
          extension_number: "#9982"
          mascot: "Dragon"
          cleaning_duty: "Monday"
          project: "Lordaeron"
        }） {:リターン値のタイプである。
          manager
          office
          extension_number
          mascot
          cleaning_duty
          project
        }
      }
    - チーム修正
      mutation {
        editTeam(id:2、input:{:"id:2"はミューテーションのもう一つのパラメータとなる。
          manager: "Maruchi Han"
          office: "105A"
          extension_number: "2315"
          mascot: "Direwolf"
          cleaning_duty: "Wednesday"
          project: "Haemosu"
        }) {
          id、
          manager、
          office、
          extension_number、
          mascot、
          cleaning_duty、
          project
        }
      }
    - チーム削除
      mutation {
        deleteTeam(id: 3) {
          id、
          manager、
          office、
          extension_number、
          mascot、
          cleaning_duty、
          project
        }
      }
  このように、必要な情報の明細を作成しておくだけで、DB にアクセスして情報を得ることができる。
  
1. Apollo란？
  GraphQLは明細·形式であるだけで、
  実際にGraphQL を使用するためには、GraphQL をサポートするサーバとクライアントが必要である。
  Apollo は、GraphQL を使用するためのサーバとクライアントの両方を提供する。
  設定が簡単で簡単で、多くの機能を提供する。



[準備:nodemon設置]

1. nodemon設置
  $ cd app1
  $ npm init
  PJ名:app1
  エンターを連打
  $ npm i -D nodemon

1. package.json 修正: "scripts" 項目に以下を追加
  ... ,
  "start": "nodemon index.js"  

1. index.js作成
  console.log('Hello Apollo Server')

1. テスト
  $ npm start
