[극단적으로 사고하고, 애매모호함을 견디기]

1. 극단적으로 사고하는 것이 초심자의 필수덕목인 이유
    내가 공부하고 있는 프로그램이 비록 초보 수준의 쉬운 코드로 쓰여있을 지라도,
    늘 이것을 가지고, 굉장히 복잡한 코딩을 했다고 늘 가정하고 생각할 수 있어야 한다.
    예를 들어, 내가 개발하는 프로그램이 실제로는 숫자 카운터 같은 조잡한 프로그램이었어도,
    "함수나 변수의 수는 1억개, 유저의 수는 100억명, 서비스 기간은 10000년인 프로그램."
    같은 식으로 상상하며 개발해야 한다.
    그러면 당연히 "좋은 개발의 특성"들을 지키기 위한 고민이 생길 것이고,
    지켜야하는 절대적인 이유를 알게 될 것이고,
    그래야 선임 개발자들이 왜 프레임워크를 도입하고, 신기술들을 도입하게 되는 건지
    더 빨리 이해할 수 있게 되어,
    애매모호함과 무지로부터 오는 불안함을 남들보다 더 빨리, 미리, 벗어날 수 있을 것이다.
    (비록 추후에 현장에 가게 되면 다 알게 되는 문제일 지라도...)
    그래서 이것은 현장 가기전의 초심자가 프로그래밍을 공부할 때 반드시 가져야할 마음가짐이다.

1. 애매모호함을 견디는 수용력이 초심자의 필수덕목인 이유
    공부를 잘하는 사람의 특징은 모두 "애매모호함"에 내성이 있다는 특성이 있다.
    "처음 들었을 때 이해가 전혀 안가도 나중에 언젠간 100% 알게될 거라는 확신"을 경험으로부터 갖고 있기 때문이다.
    어려운 수준의 내용을, 처음 들으면서 다 이해하는 학생은 절대 없다.
    그런 사람들은 "노력"해서, 수학의 복잡한 공식의 증명이나 알고리즘을 "언젠간 이해"하게 되는 것이다.
    개발의 공부는 특히나 복잡하기 때문에 이것이 아주 정확히 적용된다.
    이 마음가짐을 기억하자. (당신이 비록 지금까지 공부를 등한시했다 하더라도... 이것은 인생의 진리이다.)
    현장에 가기전까지는 아무리 이론을 빠삭하게 공부한 들, 모든 것을 다 알 수도, 이해할 수도 없다.
    이론에는 아무리 나와있다 하더라도 오래, 여러번, 봐야, 혹은 직접 경험을 해야, 알 수 있는 것들이 있다.
    이것은 경험부족의 한계이다. 그러나, 경험이 쌓이면, 언젠간 알게 된다.
    현장에 가기전까지는 애매모호함을 견뎌라.
