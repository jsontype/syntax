[Vue2 Get]

1. 이전 앱 복사 후 구동 확인하기
  $ cd app1
  $ npm run serve
  http://localhost:8080/



1. VSCode 확장 설치
  Vue Language Features (Volar) : vue 개발용
  Vue VSCode Snippets : vbase라고 치면 vue 확장자에 한해서 자동 컴포넌트 생성

1. 라이브러리 설치
  $ cd app1
  $ npm i vuex@3.6.2 # 글로벌스테이트 관리 라이브러리
  $ npm i axios # REST API 호출 라이브러리

1. src/main.js 수정 : vuex store 연결
  import Vue from "vue"
  import App from "./App.vue"
  import store from "./store/index.js"

  Vue.config.productionTip = false

  new Vue({
    store,
    render: (h) => h(App),
  }).$mount("#app")

1. src/store/mutations.js 생성 : global state용 setState 함수 만들기
export default {
  // setState 함수 정의
  SET_MOVIES(state, movies) {
    state.movies = movies
  },
}

1. src/store/actions.js 생성 : API 호출 액션 만들기
  import axios from "axios"

  export default {
    FETCH_MOVIE({ commit }) {
      axios
        .get("https://yts.mx/api/v2/list_movies.json?sort_by=rating")
        .then((res) => {
          // setState 함수를 실행하여 store에 담는다.
          commit("SET_MOVIES", res.data.data.movies)
        })
    },
  }

1. src/store/index.js 생성 : 스토어 만들기 (setState 함수자체와, 구체적인 setState 액션이 필요하다.)
  import Vue from "vue"
  import Vuex from "vuex"
  import mutations from "./mutations.js" // setState 함수자체
  import actions from "./actions.js" // 구체적인 setState 액션

  Vue.use(Vuex)

  export default new Vuex.Store({
    state: {
      movies: [],
    },
    mutations,
    actions,
  })

1. src/components/MovieList.vue 생성 : 화면 만들기
  ```

    <template>
      <div>
        <h2>{{ title }}</h2>

        <!-- 무비리스트화면 -->
        <div v-if="movies.length > 0">
          <div class="movie" v-for="item in movies" :key="item.id">
            <a class="movieTitle" :href="item.url">{{ item.title }}</a>
            <img class="movieImage" :src="item.large_cover_image" />
          </div>
        </div>

        <!-- 로딩화면 -->
        <div v-else class="red">
          로딩중...
        </div>
      </div>
    </template>

    <script>
    export default {
      name: 'HelloWorld',
      props: {
        title: String
      },
      // 메소드 : computed(값을 캐싱하는 함수) - watch(특정변수가 변할 때 실행) - methods(함수)
      computed: {
        movies() {
          return this.$store.state.movies
        }
      },
      watch: {},
      methods: {},
      // 라이프사이클 : created - updated - mounted - destroyed
      // 모든 라이프사이클 : beforeCreate - created - beforeUpdate - updated - beforeMount - mounted - beforeDestory - destroyed
      created() {
        // ★★ this.$store.dispatch() : 정해진 vuex store 함수 호출 방법이다. actions, mutations로 생성된 store 함수를 불러온다.
        this.$store.dispatch('FETCH_MOVIE') // $store.dispatch를 하면 store 폴더안의 actions, mutations를 거쳐서,
        console.log(this.$store.state.movies) // $store.state.movies에 들어온다.
      },
      updated() { },
      mounted() { },
      destroyed() { },
    }
    </script>

    <style scope>
    .red {
      color: red;
    }

    .movie {
      display: flex;
      border: 1px solid gray;
      border-radius: 5px;
      padding: 5px;
    }

    .movie .movieImage {
      width: 200px;
    }

    .movie .movieTitle {
      flex-grow: 1;
      text-decoration: none;
      color: black;
    }

    .movie .movieTitle:hover {
      background-color: pink;
    }
    </style>

  ```

1. src/App.vue 수정 : 부모로부턴 MovieList를 호출
  ```

    <template>
      <div class="app">
        <MovieList title="무비앱" />
      </div>
    </template>

    <script>
    import MovieList from './components/MovieList.vue'

    export default {
      name: 'App',
      components: {
        MovieList
      }
    }
    </script>

    <style>
    .app {
      margin: 20px;
    }
    </style>

  ```

1. src/components/HelloWorld.vue 삭제 : 불필요해진 컴포넌트 삭제

1. 테스트 : API 취득 결과 확인
  $ cd app1
  $ npm run serve
