[useState로 선언한 State의 데이터타입 관리하기 - Counter 컴포넌트 편]

1. Counter 컴포넌트 만들기  
    정말 간단한 예제인 useState를 사용하는 카운터부터 만들어보자.

1. 사전준비 : 이전 파일 삭제
    Greetings.tsx 삭제


    
1. src/Counter.tsx 생성 : Generics를 사용하여 state의 데이터타입을 설정하기
    import { useState } from 'react'

    export default function Counter() {
        // useState를 사용할 때는 Generics를 사용하여 데이터타입을 설정해도 되고, 초기값으로 데이터타입이 유추되므로 안 해도 된다.
        // 단, state가 null일 수도 있고 아닐수도 있을 때는 Generics를 사용하여 데이터타입을 설정하는 게 좋다.
        // 예를 들면, 이런 느낌이다.
        // type NewsProps = { name: string; description: string }
        // const [news, setNews] = useState<NewsProps | null>(null)

        // Generics를 사용하여 state의 데이터타입을 설정하기
        const [count, setCount] = useState<number>(0)

        const onIncrease = () => setCount(count + 1)
        const onDecrease = () => setCount(count - 1)
        
        return (
            <div>
                <h1>{count}</h1>
                <div>
                    <button onClick={onIncrease}>+1</button>
                    <button onClick={onDecrease}>-1</button>
                </div>
            </div>
        )
    }



1. src/App.tsx 수정 : Counter를 렌더링
    import React from 'react'
    import Counter from './Counter'

    const App: React.FC = () => {
        return <Counter />
    }

    export default App



1. 테스트
    $ cd app1
    $ npm start



[useState로 선언한 State의 데이터타입 관리하기 - Input 컴포넌트 편]

1. Login 컴포넌트 만들기  
    이번에는 Input의 State를 관리하는 방법을 다뤄보자.
    이벤트를 다뤄야 하기 때문에 데이터타입을 지정하는것이 처음에 헷갈릴 수도 있지만, 알고나면 매우 쉽다.



1. src/Login.tsx 생성 : Login 컴포넌트 만들기
    import React, { useState } from 'react'

    type LoginProps = {
        onSubmit: (form: { id: string, pw: string }) => void
    }

    export default function Login({ onSubmit }: LoginProps) {
        const [form, setForm] = useState({
            id: '',
            pw: ''
        })

        // Destructuring
        const { id, pw } = form

        // onChange의 e 객체의 데이터타입은 React.ChangeEvent<HTMLInputElement>로 지정해서 구현할 수 있다.
        // 또는 그냥 e만 입력한 뒤, e에 hovering하고, 빠른 수정으로 간 뒤, "매개형식 유추"로 유추된 데이터타입을 지정하면 된다.
        const onChange = (e: { target: { name: any; value: any } }) => {
            // input의 name별 value를 입력값으로부터 취득
            const { name, value } = e.target
            // input 내용으로 form 데이터 수정
            setForm({
                ...form,
                [name]: value
            })
        }

        // onSubmit의 e 객체의 데이터타입은 React.FormEvent<HTMLFormElement>로 지정해서 구현할 수 있다.
        // 또는 그냥 e만 입력한 뒤, e에 hovering하고, 빠른 수정으로 간 뒤, "매개형식 유추"로 유추된 데이터타입을 지정하면 된다.
        const handleSubmit = (e: { preventDefault: () => void }) => {
            // 기존 form submit 기능 끄기
            e.preventDefault()
            // submit : 부모 컴포넌트로 form 내용 보내기
            onSubmit(form)
            // submit 후 : 인풋창 초기화
            setForm({
                id: '',
                pw: ''
            })
        }

        return (
            <form onSubmit={handleSubmit}>
                <input name="id" type="text" placeholder="ID를 입력해주세요." value={id} onChange={onChange} />
                <input name="pw" type="password" placeholder="PW를 입력해주세요." value={pw} onChange={onChange} />
                <button type="submit">등록</button>
            </form>
        )
    }



1. src/App.tsx 수정 : Input을 렌더링
    import React from 'react'
    import Login from './Login'

    const App: React.FC = () => {
        const onSubmit = (form: { id: string, pw: string }) => {
            // TODO: 이곳에 Submit의 처리가 들어갈 것이다.
            console.log(form)
        }
        return <Login onSubmit={onSubmit} />
    }

    export default App



1. 테스트
    $ cd app1
    $ npm start
