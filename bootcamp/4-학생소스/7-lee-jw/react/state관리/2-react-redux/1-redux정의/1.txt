[Redux 정의]

1. Redux
    ★★ Redux는, "Global State 관리 라이브러리"이다. 
        Global State 관리라는 것은,
            (useState Hook과 같이 일부 컴포넌트에서만 선언해서 사용하는 State가 아니라 모든 컴포넌트에서 사용할 수 있는)
            "Redux Store에 있는 전역 State값"을 조회하고,
            "그 State들의 수정 방법인 Actions의 Dispatch"를 포괄한다.
        왜 쓰는가? Redux를 사용하면 컴포넌트의 Global State 관련 로직을 다른 파일로 분리시켜서 관리할 수 있어서 컴포넌트의 재사용성이 향상되기 때문이다.
        왜 재사용성이 향상되는가? 파일을 분리하지 않으면, 매번 동일 State를 불러오는 모든 컴포넌트에 중복된 로직을 계속 사용해야하기 때문이다.
    ★★ 더 구체적으로 Redux는, "함수형 컴포넌트에서 Redux Hook인 useSelector를 통해 Store의 state 값을 props로 받아와서 사용하거나,
        useDispatch를 통해 action dispatch를 props로 받아와서 사용할 수 있게 해준다."

    Redux를 써야만 state를 관리할 수 있는 것은 아니다.
        Context API도 useReducer Hook을 사용해 위 처리가 가능하다.
        클래스형 컴포넌트도 hook은 못쓰지만 connect 함수를 사용해 위 처리가 가능하다.
        
    Redux가 React에 전속된 것은 아니다.
        Angular에서 쓰는 것은 angular-redux라 불리고,
        React에서 쓰는 것은 react-redux라고 불린다.



[Redux를 사용하는 것 과 Context API를 사용하는 것의 차이]

1. Redux에는 미들웨어(Middleware)라는 개념이 존재한다.
    Redux의 미들웨어를 사용하면,
    action 객체가 리듀서에서 처리되기 전에 다양한 작업을 수행 할 수 있다.
        - 특정 조건에 따라 action이 무시되게 만들 수 있다.
        - action을 콘솔에 출력하거나, 서버쪽에 로깅을 할 수 있다.
        - action이 디스패치 됐을 때 이를 수정해서 리듀서에게 전달되도록 할 수 있다.
        - 특정 action이 발생했을 때 특정 자바스크립트 함수를 실행시킬 수 있다.
        - 특정 action이 발생했을 때 특정 action이 발생되도록 할 수 있다.
    미들웨어는 주로 비동기 작업을 처리 할 때 많이 사용된다.

1. 유용한 함수와, Hooks
    Context API 와 useReducer를 사용 할 때에는,
    Context도 새로 만들고, 
    Context의 Provider 설정도 하고,
    Context를 편하게 사용하기 위해 전용 커스텀 Hook을 따로 만들어서 사용하기도 했다.

    Redux에서는 이 작업을 더 편하게 해주는 여러 기능들이 존재한다.
    connect 함수를 사용하면,
    Redux의 state 또는 action 생성 함수를 컴포넌트의 props로 받아올 수 있으며, 
    useSelector, useDispatch 같은 Hooks를 사용하면,
    쉽게 state를 조회할 수 있고,
    action을 디스패치할 수도 있다.

    connect 함수와 useSelector 함수에는 내부적으로 최적화가 잘 이루어져있어서,
    실제 state가 바뀔때만 컴포넌트가 리렌더링되지만,
    Context API를 사용할 때에는 그러한 최적화가 자동으로 이루어져있지 않기 때문에,
    Context가 지니고 있는 state가 바뀌면 해당 Context 의 Provider 내부 컴포넌트들이 모두 리렌더링된다.



[Redux를 쓰기 전에 숙지해야 할 키워드]

1. 액션 (Action)
    상태에 변화가 필요할 때 발생시킴 (객체하나로 표현)
    type을 필수로 그외의 값들은 개발자 마음대로 생성
    {
        type: "ADD_TODO",
        data: {
            id: 0,
            text: "리덕스 배우기"
        }
    }
    
1. 액션 생성함수 (Action Creator)
    컴포넌트에서 더욱 쉽게 액션을 발생시키기 위해, 다른 파일에서 import해서 사용
    필수 아님    
    export function addTodo(data) {
        return {
            type: "ADD_TODO",
            data
        }
    }

1. 리듀서 (Reducer)
    변화를 일으키는 함수
    현재의 상태와 액션을 참조하여 새로운 상태를 반환
    function counter(state, action) {
        switch (action.type) {
            case 'INCREASE':
                return state + 1;
            case 'DECREASE':
                return state - 1;
            default:
                return state;
        }
    }

1. 스토어 (Store)
    한 애플리케이션당 하나의 스토어
    현재의 앱 상태와, 리듀서, 내장함수 포함

1. 디스패치 (dispatch)
    스토어의 내장함수
    액션을 발생 시키는 것

1. 구독 (subscribe)
    스토어의 내장함수
    subscribe()가 함수를 인자로 전달해주면, 액션이 디스패치 되었을 때 마다 해당 함수가 호출
    (리액트에서는 잘 안쓰고 대신 connect 함수 또는 useSelector라는 Redux Hook을 사용)
