[개발의 특성]

1. 나쁜 개발자와 좋은 개발자의 차이는 바로 코드에서 이 개발의 특성을 지키고 있느냐에서 드러난다.

1. 외적특성
    * 정밀성(accuracy, 精密性): 구성된 시스템에 오류가 없는 정도
    * 적응성(adaptablility, 適応性): 시스템을 변경하지 않고 설계된 환경에서 뿐만 아니라 다른 응용 분야나 환경에서도 사용될 수 있는 정도
    * 무결성(integrity, 無欠性): 시스템이 프로그램이나 데이터에 대한 허용되지 않거나(권한이 없거나) 잘못된 접근(타입이 다르거나)을 막는 정도
    * 최적화(performance-tuning, 最適化): 메모리와 실행 시간 같은 시스템 리소스를 최소로 사용하도록 성능을 향상시키는 것

1. 내적특성
    * 중복제거 : 중복된 부분을 합쳐서 사용하는 것.
    * 재사용성(reusability, 再使用性) : 시스템의 일부분을 다른 시스템에서 사용할 수 있는 정도나 편의성
    * 유지보수성(maintainability, 維持保守性) : 소프트웨어 시스템의 기능을 변경하거나 기능을 추가하거나 성능을 향상시커거나 결함을 수정하기 위해서 시스템을 변경할 때의 편의성
    * 가독성(readability, 可読性) : 시스템의 소스 코드를 상세한 명령문 수준에서 읽고 이해할 때의 편의성 (주석, 변수, 함수의 네이밍 이슈를 포함), 시스템의 일관성(coherence)과도 관련이 있다.

1. 내적특성의 연계성
    * 내적인 특성은 사실 다 유기적으로 연결되어 있어서, 하나를 충족하면 다른 것들도 향상된다.
    * ★ 중복제거가 모든 "아름다운 코드"의 시작이다.
        중복제거가 되면, 그것이 재사용성을 보장하고, 그것이 가독성과 연관이 되고, 그것이 유지보수성에 영향을 준다.
        그래서 중복제거를 계속 달성해나가다 보면 결국 시니어 개발자들이 만들어놓은 디자인 패턴들에 가까워지게 되어 있다.
