[코딩 vs 프로그래밍]

1. 디자인 : UI/UX 디자인을 한다는 뜻이다.
    UI : User Interface
    UX : User Experience

1. 코딩 : 코드를 작성한다는 뜻이다.
    부호화(符号化, Hugo-ka, Coding)를 통해 컴퓨터가 이해할 수 있는 언어로 바꾸는 것을 말한다.

1. 프로그래밍 : 프로그램을 작성하는 뜻이다.
    설계와 코딩, 에러 수정 등의 단계를 거쳐서 프로그래밍을 작성하는 과정이고, 그 과정에 코딩이 포함된다.
    주니어 프로그래머가 보통은 프로그래머가 아닌 코더인 이유 :
        주니어 프로그래머는 간단한 자신의 프로그래밍은 할 수 있을지라도,
        그 아키텍쳐를 전부 이해하지 못하므로 사실 현장 레벨의 프로그래밍은 할 수 없을 것이다.
        즉, 현장에서 시키는 대로 코딩만 할 뿐이다.
        그러니 현장에서는 코더라고 인식되는 경우가 많다.
        즉, 실상은 코더(코드몽키) - 주니어 프로그래머 - 인터 프로그래머 - 시니어 프로그래머 순이다.
        물론 비전공자는 코더에서 시작하는 것이 현실이다.
        그런데, 이쪽 세계에서 이 보이지 않는 계급의 실력차이는, 실로 어마어마 하다. (1명의 천재가 10000명분의 일을 할 수도 있다.)
        그래서인지, 하는 일에 비해 주니어는 더 받고, 시니어는 사실 돈을 덜 받는다는 인식도 있다.



[개발직군]

1. 웹디자이너 혹은 퍼블리셔 : 단순 마크업, 퍼블리싱 업무 등, 프로그래밍과는 전혀 관련이 없다.
    퍼블리싱 업무 : CMS(Contents Management System, 워드프레소나 피그마 등)으로 디자인만 하는 것

1. 프론트엔드 엔지니어 : 비교적 최근 생겨난 포지션으로, 백엔드 개발자와 퍼블리셔의 중간 역할을 담당. 화면 디자인보다는 JS 언어로 코딩하는 업무
    JS 언어로 코딩하는 업무 : 서버와 클라이언트를 이어주거나, 화면상에 기능을 구현하거나, 최적화 등의 개발에 집중하는 포지션
    ★ 맥북 없을 시, 1-2달 이내에 맥북 필요

1. 백엔드 엔지니어 : API 개발이 주가 된다.
    프론트에서 요구하는 데이터의 포맷 검증, 데이터베이스 입출력, 비즈니스 프로세스(특정 데이터 취득을 위해 로직을 짜는 것)를 코드로 구현한다.
    프로그래밍, 데이터베이스, 웹서버, 네트워크, 인프라 등에 대한 기술이 필요하다.

1. 풀스택 엔지니어 : 프론트와 백을 모두 다 할줄 아는 엔지니어이다.

1. 인프라 엔지니어 : 그들의 업무는 인프라 설계, 인프라 구축, 인프라 운영 세 단계로 분류된다.
    인프라 설계는 만드는 목적에 따라 필요한 조건을 정리하고 기획서와 설계서를 작성하는 일이다.
    인프라 구축은 기기를 들여와서 설치하는 하드웨어 관련 작업, 서버나 스토리지 설정, 네트워크 장비 설정 등으로 나뉜다.
    인프라 운영은 가동후에 24시간 365일 내내 가동되는 것을 확인하며 교대로 운영하며, 하드웨어 고장, 급격한 액세스 증가, 인프라 외 문제 등의
        여러 장애가 발생시 수용량 설정 변경 등으로 직접 대응하거나, 관련 부서에 대응 요청 등을 한다.
