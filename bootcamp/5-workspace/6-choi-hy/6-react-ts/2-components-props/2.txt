[새로운 컴포넌트 만들기]

1. src/Greetings.tsx 생성 : 새로운 컴포넌트를 작성
    // 컴포넌트가 받을 프롭스의 데이터타입 정의
    type GreetingsProps = {
        // props로 받아오는 변수의 데이터타입 정의
        name: string
        mark: string
        optional?: string // ?는 컴포넌트에서 없어도 되는 props
        // props로 받아오는 함수의 데이터타입 정의
        onClick: (name: string) => void // void는 아무것도 리턴하지 않는 함수
    }

    // 컴포넌트 선언
    export default function Greetings({ name, mark, optional, onClick }: GreetingsProps) {
        const handleClick = () => onClick(name)
        return (
            <div>
                Hello, {name} {mark}
                {optional && <p>{optional}</p>}
                <div>
                    <button onClick={handleClick}>Click Me</button>
                </div>
            </div>
        )
    }

    // 컴포넌트가 받는 프롭스의 값이 없을 때의 기본값
    Greetings.defaultProps = {
        mark: '!'
    }



1. src/App.tsx 수정 : App에서 해당 컴포넌트를 렌더링
    import Greetings from './Greetings'

    function App() {
        const onClick = (name: string) => {
            console.log(`${name} says hello`)
        }

        // 모든 props를 제대로 입력해야 에디터에 오류가 뜨지 않는다. 아래는 오류가 뜰 것이다.
        // return <Greetings name="Hello" />

        // 어떤 props가 필요한지 보려면 커서를 올려보거나, Ctrl + Space 를 눌러보면 된다.
        return <Greetings name="Hello" onClick={onClick} />
    }

    export default App



1. 테스트
    $ cd app1
    $ npm start



[새로운 컴포넌트 만들기]

1. 함수형 컴포넌트를 선언하는 또 다른 방법 : 화살표함수 + React.FC로 선언하기
    function 키워드가 아니라, 이렇게 화살표함수를 사용하여 선언하고, React.FC라는 것을 사용하여 컴포넌트의 데이터타입을 지정해도 된다.
    React.FC를 사용 할 때는 props의 데이터타입을 Generics로 넣어서 사용한다. 

1. 화살표함수 + React.FC를 사용할 때의 장점
    장점1 : props에 기본적으로 children이 들어가있다.
    장점2 : 컴포넌트의 defaultProps, propTypes, contextTypes를 설정 할 때 자동완성이 될 수 있다.

1. 화살표함수 + React.FC를 사용할 때의 단점
    단점1 : React.FC는 (아직까지는) defaultProps가 제대로 작동하지 않는다.
        예를 들어 Greetings 같이 defaultProps가 있는 컴포넌트에서는 쓰지 못한다.
    단점2 : children이 옵셔널 형태로 들어가다보니 컴포넌트의 props의 데이터타입이 명백하지 않다. 
        예를 들어 어떤 컴포넌트는 children이 반드시 있어야 하는 경우도 있을 것이고, 어떤 컴포넌트는 children 이 들어가면 안되는 경우도 있을텐데, 
        React.FC 를 사용하면 기본적으로는 이에 대한 처리를 제대로 못하게 된다.
        만약에 하고 싶다면 결국 Props 데이터타입 안에 children 을 설정해야한다.



1. src/App.tsx 수정 : App
    import React from 'react'
    import Greetings from './Greetings'

    const App: React.FC = () => {
        const onClick = (name: string) => {
            console.log(`${name} says hello`)
        }
        return <Greetings name="Hello" onClick={onClick} />
    }

    export default App



1. 테스트
    $ cd app1
    $ npm start
