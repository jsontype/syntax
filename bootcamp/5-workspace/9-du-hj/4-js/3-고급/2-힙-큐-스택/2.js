/*
    [힙 - (대기실 - 큐) - 스택]
    
    1. JS가 웹브라우저에서 동작하는 원리
        웹브라우져는 다음과 같은 공간들이 있다.
            Heap : i = { age: 20 }, j = { name: 'kim' } 과 같이 변수를 담아두는 공간이다.
            대기실 : 대기시간이 끝나면, que라는 대기실로 넘겨준다.
                대기실 보내는 코드들 : async function (ajax api 호출요청코드, io, setTimeout 등 비동기 함수들과, 이벤트리스너 함수들)
            Que(ue) : 대기실에서 "처리가 완료된" 코드 스텝들을 줄을 세워서 Que에 세운 뒤, stack으로 하나씩 올려보내준다.
                Que(ue) 보내는 코드들 : async function (ajax api 호출요청코드, io, setTimeout 등 비동기 함수들과, 이벤트리스너 함수들)
                단, stack이 비어있을 때만 올려보낸다.
            Stack : 코드를 실행해주는 곳. 단, 코드 한줄씩만 들어간다. (그래서 js는 보통 single threaded language라고 한다.)
                즉, 여기서, setTimeout 이하의 함수는 1초 뒤에 실행을 해줘야 하기 때문에 stack에 넣지 않고 대기실로 보낸다.

    1. JS를 웹브라우저에서 사용할 때의 주의점
        js에는 10초 이상 걸리는 어려운 연산을 넣으면 안된다.
        예를 들어, 천만번 반복 계산하는 for문 같은 것이 stack을 채우게 되면, 
        그동안 js기반 사용자 기능이 (버튼 누르면 모달창 띄워주는 이벤트리스너 등등) 모두 동작을 하지 않는다.
        stack이 비었을 때만 que에 있는 동작을 올려보내기 때문이다.
        그래서 "응답 대기중입니다" 메시지 같은, 브라우져 프리징을 띄운다.
        stack을 바쁘게 하지말기. queue를 바쁘게 하지 말기. 이 두 가지가 중요하다.
*/

// "힙-스택-큐"를 코드로 이해하기 : 아래 코드의 예상 순서는 2, 4, 6일 것 같지만, 2, 6, 4가 된다. 이렇게 js는 코드 위에서 적든, 밑에 적든, 빠른 것부터 실행해준다.
// heap에 싣고, 바로 1줄만 들어가는 "stack"으로 간다.
console.log("실행순서 1번째: ", 1 + 1);
// setTimeout 비동기함수 때문에 우선 "대기실"에 보낸다. 그 뒤 1000ms(1초)가 지나면 "que"를 거쳐, 1줄만 들어가는 "stack"에 넣는다. 즉 1초뒤 실행한다.
setTimeout(function () {
  console.log("실행순서 3번째: ", 2 + 2);
}, 1000);
// heap에 싣고, 바로 1줄만 들어가는 "stack"으로 간다. 대기실을 거치지 않으므로 위 코드보다 먼저 실행된다.
console.log("실행순서 2번째: ", 3 + 3);
