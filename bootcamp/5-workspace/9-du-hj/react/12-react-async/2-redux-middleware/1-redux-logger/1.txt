[리덕스 미들웨어 정의]

1. 리덕스 미들웨어
    리덕스 미들웨어는 리덕스가 지니고 있는 핵심 기능으로, 
    주로 API 연동등 비동기 작업을 처리 할 때 비동기 작업을 더 효율적으로 만들어준다.
    그냥 axios를 써도 되지만, 미들웨어를 함께 사용하면,
    액션이 디스패치 된 다음, 리듀서에서 해당 액션을 받아와서 업데이트하기 전에 추가적인 작업을 할 수 있다. 
    (리덕스가 Context API, MobX와 차별화가 되는 부분이다.)
    추가적인 작업들은 다음과 같다.
        특정 조건에서 액션을 무시
        특정 액션이 발생했을 때 다른 액션, 함수 실행
        액션이 디스패치 됐을 때 수정해서 리듀서에게 전달

1. 리덕스 + 리덕스 미들웨어를 도입해야할 때
    프로젝트의 규모가 커졌을 때
    상태를 전역적으로 사용해야 할 때
    비동기 작업을 자주 하게 될 때

1. 리덕스 미들웨어 종류
    redux-saga
    redux-thunk


    
[Redux-logger와 DevTools를 함께 사용해서 객체와 상태를 로깅하는 미들웨어 간단히 만들기]

1. 설치
    $ cd app1
    $ npm i redux-logger : redux-logger를 설치한다.


    
1. src/index.js 수정
    import React from 'react'
    import ReactDOM from 'react-dom'
    import App from './App'
    // 미들웨어를 적용하는 함수 applyMiddleware를 임포트한다.
    import { createStore, applyMiddleware } from 'redux'
    import { Provider } from 'react-redux'
    import rootReducer from './modules'
    import logger from 'redux-logger'
    import { composeWithDevTools } from 'redux-devtools-extension'

    // 스토어에 applyMiddleware를 넣어서 미들웨어를 적용한다.
    const store = createStore(
        // 1. 루트리듀서 적용 : 한개의 루트리듀서를 적용한다.
        rootReducer,

        // 2. 미들웨어 적용 : applyMiddleware(미들웨어함수)를 스토어에 넣으면 적용할 수 있다.
        // applyMiddleware(logger) // 여기서 logger는 직접 만든 미들웨어가 아니라, Redux-logger 라이브러리에서 가져온 미들웨어 함수이다.

        // 3. 미들웨어에 데브툴즈 적용 : applyMiddleware(미들웨어함수)를 composeWithDevTools로 감싸면 해당 미들웨어에 DevTools를 적용할 수 있다.
        composeWithDevTools(applyMiddleware(logger))

        // 4. 미들웨어 추가 가능 : 이 밑으로, 여러개의 미들웨어를 추가 적용할 수도 있다.
        // composeWithDevTools(applyMiddleware(다른 미들웨어함수))
    )

    ReactDOM.render(
        <Provider store={store}>
            <App />
        </Provider>,
        document.getElementById('root')
    )



1. src/middlewares 폴더 삭제
    redux-logger로 구현을 했기 때문에, 직접 만든 미들웨어는 이제 불필요하므로 삭제해준다.



1. 테스트 : console탭에서 redux-logger가 잘 작동하여 (콘솔로그에) 출력되는지, redux탭에서 devTools가 잘 작동하여 출력되는지 각각 확인
    $ cd app1
    $ npm start
    