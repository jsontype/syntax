[프레임워크 vs 라이브러리]

1. 프레임워크 : 전체 구조에 맞춰서 코딩해야하는 강요성이 생기는 큰 뼈대.
    동일한 방식으로 코딩 규칙들을 통일시키기 위해 코딩 방식에 강요성이 있다.
    한번 정해지면 바꾸지 못한다.
    사용시 유지보수성이 급격히 상승하므로 실무 현장에서는 필수가 된다.    
    (유지보수성 상승 이유 : 모든 개발자가 코딩 방식을 동일하게 알고 있기 때문이다.)

1. 라이브러리 : 특정기능을 위해 끼워쓰는 코드 부품
    취사선택이며, 강요성 없다.
    쉽게 바꿀 수 있다.
    만일, 프레임워크가 크롬브라우저라면, 라이브러리는 크롬확장(플러그인) 같은 개념이다.
    (추후 nodejs 배우고 npm i ... 쓸 때 배움)

1. 프레임워크는 라이브러리와 어떤 차이가 있는가?
    라이브러리는 개발자가 임의로 도입해서 사용하는 애드온(확장) 같은 개념이다.
    프레임워크와 헷갈릴 수 있는데,
    ★ "프레임워크는 전체적인 흐름을 자체적으로 가지고 있지만, 라이브러리는 전체적인 흐름을 사용자가 제어하고 있다"는 중요한 차이점이 있다.
    개발자가 개발하는 데 필요한 것들을 모아둔 도구들의 나열로, 필요할 때 호출해서 사용하고,
    필요없으면 도중에 뺀다던지, 다른 걸로 갈아끼운다던지, 이런 것들이 프레임워크와 다르다.    

1. 프레임워크가 도입된 배경
    이게 없을 땐 자기들 마음대로 개발을 했는데, 그러다보니 유지보수가 안된다는 문제가 있었다.    
    예를 들면, 글씨를 쓰는 기능을 세 개발자에게 만들라고 하면,
    개발자1는 펜으로 글씨를 쓰는 것을,
    개발자2는 연필로 글씨를 쓰는 것을,
    개발자3는 매직으로 글씨를 쓰는 것을 코딩했다고 치자.
    함수명도 write, writing, record 등 제각각이었다고 하자.
    그러면 이게 재사용도 안되고, 중복된 함수도 생기고, 개발자1,2,3끼리 서로 자기가 만든 것 외에는 코드를 이해하지 못하는 현상이 발생했다.
    설상가상으로 개발자3이 프로젝트를 나가면서, 그가 만든 코드는 어떻게 수정해야할지 몰라 결국 폐기하고 개발자1,2가 다시 만들었다.
    이런 문제들이 반복되어가면서, 어느 개발자가 보더라도 "통일된" 개발 프레임이 필요하게 되었다.
