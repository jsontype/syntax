[TypeScript 소개]

1. TypeScript 정의
    JavaScript는 weakly typed 언어이다.
    변수에 문자열, 숫자, null, 배열 등등 뭘 넣어도 그냥 들어간다.
        let value = 5
        value = '안녕하세요'
        value = [1,2,3,4,5]
        value = null
    게다가, 암묵적캐스팅을 통해 다른 타입을 넣어도 계산이 된다.
        let value = 5
        value = value + '5'
        console.log(value) // 10
    그러나 이는 시스템을 위협할 수도 있는 위험한 타입 에러를 걸러내지 못하므로, 데이터의 무결성 측면에서 좋지 않다. 
    TypeScript에서는 사전에 변수에 타입을 지정해주어, 아무 타입이나 들어갈 수 있게 하지 않는 라이브러리다.

1. TypeScript 장점(1) : 실수방지
    변수에 지정되지 않은 잘못된 타입을 넣었을 때 에러를 표시해주어, 실수에 의한 (또는 다른 초보 개발자에 의한?) 에러 방지가 가능하다.
        함수, 컴포넌트 등의 타입 추론이 되다보니, 만약에 우리가 사소한 오타를 만들면 코드를 실행하지 않더라도 IDE 상에서 바로 알 수 있게 된다.
        그리고, 예를 들어 null이나 undefined일 수도 있는 값의 내부 값 혹은 함수를 호출한다면(예: 배열의 내장함수) 사전에 null 체킹을 하지 않으면 오류를 띄우므로 null 체킹도 확실하게 할 수 있게 된다.

1. TypeScript 장점(2) : IDE 활용성 증가
    IDE상에서 컴포넌트별 변수나 함수들의 자동완성을 편하게 해준다. (컴포넌트마다 타입을 객체로 설정해서)
    IDE상에서 변수나 함수들에 들어갈 state, props, param, return 값에 알맞은 타입을 확인하며 작업할 수 있게 된다. (변수마다 타입을 설정해서)
        함수를 사용 할 때 해당 함수가 어떤 params를 필요로 하는지, 그리고 어떤 값을 return하는지 코드를 따로 열어보지 않아도 알 수 있다.
        추가적으로, 리액트 컴포넌트의 경우 해당 컴포넌트를 사용하게 될 때 props에는 무엇을 전달해줘야하는지, JSX를 작성하는 과정에서 바로 알 수 있다.
        컴포넌트 내부에서도 자신의 props에 어떤 값이 있으며, state에 어떤 값이 있는지 알 수 있다.
        리덕스와 함께 사용하게 될 때에도 스토어 안에 어떤 상태가 들어있는지 바로 조회가 가능해서 굉장히 편리하다.

[TypeScript 설치 및 설정하기]

1. package.json 생성 : 노드패키지 설정파일
	$ mkdir app1
	$ cd app1
	$ npm init -y (= yarn init -y)
  
1. tsconfig.json 생성 : 타입스크립트 설정파일
	$ npm i -g typescript (= yarn global add typescript)
	$ cd app1
	$ tsc --init

	위 명령어를 통해 자동생성이 되지만, 다음과 같이 직접 쳐서 작성해도 된다.
	{
		"compilerOptions": {
			"target": "es5",
			"module": "commonjs",
			"strict": true,
			"esModuleInterop": true
		}
	}

	tsconfig.json은 타입스크립트가 컴파일 될 때 필요한 옵션들을 지정한다.
	tsc --init 명령어를 통해서 기본적으로 설정되는 옵션들은 다음과 같다.
		- target: 컴파일된 코드가 어떤 환경에서 실행될 지 정의한다. 
			예를 들어서,
			화살표 함수를 사용하고 target을 es5로 한다면 일반 function 키워드를 사용하는 함수로 변환한다.
			하지만 이를 es6로 설정한다면 화살표 함수를 그대로 유지한다.
		- module: 컴파일된 코드가 어떤 모듈 시스템을 사용할지 정의한다.
			예를 들어서,
			이 값을 common으로 하면, 
			export default Sample을 하게 됐을 때 컴파일 된 코드에서는
			exports.default = helloWorld 로 변환해주지만,
			이 값을 es2015로 하면,
			export default Sample을 그대로 유지하게 된다.
		- strict: 모든 타입 체킹 옵션을 활성화한다는 것을 의미한다.
		- esModuleInterop: commonjs 모듈 형태로 이루어진 파일을 es2015 모듈 형태로 불러올 수 있게 해준다.

1. tsconfig.json 수정 : "outDir": "./dist" 이라는 속성을 추가해서, 컴파일된 파일들이 저장되는 경로를 "./dist"로 지정하기
	{
		"compilerOptions": {
			"target": "es5",
			"module": "commonjs",
			"strict": true,
			"esModuleInterop": true,
			"outDir": "./dist" // 컴파일된 파일들이 저장되는 경로 지정
		}
	}

1. src/practice.ts 생성 : 첫 타입스크립트 파일 만들기
	// ↓ ": string"로 해당 상수 값이 문자열 이라는 것을 명시, 숫자로 값 설정시 에디터 상에서 오류 표시됨
	const message: string = 'hello world'
	console.log(message)

1. 타입스크립트 컴파일
	$ cd app1
	$ tsc
	dist/practice.js 경로에 파일 생성 내용 확인
		"use strict";
		var message = 'hello world';
		console.log(message);
	ts 파일에서 명시한 값의 타입은 컴파일이 되는 과정에서 모두 사라지게 된다.

