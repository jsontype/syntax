[Redux Container 최적화하기]

1. Redux 컨테이너에서 불필요한 리렌더링 체크 : 할일 목록 추가시 counter앱이 리렌더링 됨을 확인



1. 최적화하는 방법 1 : src/components/Counter/CounterContainer.js에서, useSelector를 여러번 사용하기
    const number = useSelector(state => state.counter.number)
    const diff = useSelector(state => state.counter.diff)

    이렇게 하면 해당 값들 하나라도 바뀌었을 때에만 컴포넌트가 리렌더링 된다.



1. 최적화하는 방법 2 : src/components/Counter/CounterContainer.js에서, react-redux의 shallowEqual 함수를 useSelector의 두번째 인자로 전달하기
    import { useSelector, useDispatch, shallowEqual } from 'react-redux'
    
    function CounterContainer() {
        const { number, diff } = useSelector(
            state => ({
                number: state.counter.number,
                diff: state.counter.diff
            }),
            shallowEqual
        )

    useSelector의 두번째 파라미터는 equalityFn이다.
        equalityFn?: (left: any, right: any) => boolean
        이전 값과 다음 값을 비교하여 true가 나오면 리렌더링을 하지 않고 false가 나오면 리렌더링을 한다.
    shallowEqual은 react-redux에 내장되어있는 함수로써, 객체 안의 "가장 겉에 있는 값"들을 모두 비교해줍니다.
        여기서 겉에 있는 값이란, 만약 다음과 같은 객체가 있다면
        const object = {
            a: { x: 3, y: 2, z: 1 },
            b: 1,
            c: [{ id: 1 }]
        }
    가장 겉에 있는 값은 object.a, object.b, object.c 이므로 여기 값들만 비교하고,
    shallowEqual 에서는 해당 값들만 비교하고 object.a.x 또는 object.c[0] 값은 비교하지 않는다.