[useEffect를 사용하여 마운트/언마운트/업데이트시 할 작업 설정하기]

1. useEffect : 파라미터에 함수, deps 배열을 넣어서 life cycle method을 구현하는 Hook이다.
    life cycle method : 함수를 특정 시점에서만 실행하는 구현 방식. 
    life cycle 시점 :
        mounted : 컴포넌트가 열리는 created 시점, updated 후 실제 화면에 랜더링되는 시점
        updated : 컴포넌트가 수정되는 updated 시점
        unmounted : 컴포넌트가 닫히는 destroy 시점

    // useEffect(() => { 실행문 }, []) // Deps가 빈 배열 : initial mounted 될 때 실행해라.
    // useEffect(() => { 실행문 }, [number]) // Deps에 state 변수가 있을 때 : 해당 state가 updated 될 때 실행해라.
    // useEffect(() => { return () => { 실행문 } }, []) // Deps가 빈 배열이면서 return 값이 함수 : unmounted 될 때 실행해라.
    
    

1. src/App.js 수정 : button을 누를 때마다 isCounter라는 state를 on, off로 토글해서 <Counter /> 컴포넌트를 켰다 끄도록 수정한다.
    import React, { useState } from 'react'
    import Counter from './Counter'

    export default function App () {
        const [isCounter, setIsCounter] = useState(false)

        const onClick = () => {
            console.log('isCounter: ', isCounter, ' → ', !isCounter)
            setIsCounter(isCounter => !isCounter) // 함수형 업데이트 전 : setIsCounter(!isCounter)
        }
        
        return (
            <>
                <button onClick={onClick}>{ isCounter ? 'On' : 'Off' }</button>
                { isCounter && <Counter /> }            
            </>
        )
    }



1. src/Counter.js 수정 : useEffect의 deps를 빈 배열로 할 경우 컴포넌트의 Created, Distroyed 시점을 구현할 수 있다.
    최상단에 다음과 같이 useEffect를 추가
        import React, { useState, useEffect } from 'react'

    export default function Counter() 함수 밑에, return 위에 다음을 추가        
        // create -> update -> mount -> unmount

        // 컴포넌트의 탄생과 죽음 : Create, unmount
        useEffect(() => { 
            // create
            console.log('Created')
            // unmount
            return () => { 
                console.log('Unmounted')
            }        
        }, []) // deps가 빈 배열

        // 컴포넌트의 변경 : update
        useEffect(() => { console.log('Updated: ', number) }, [number]) // deps가 업데이트 watch(감시) 대상



1. 테스트
    $ cd app1
    $ npm start
