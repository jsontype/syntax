[redux-saga로 프로미스 다루기]

1. redux-thunk와 redux-saga 차이
    redux-thunk에서는 thunk 함수를 만들어서,
    - thunk 함수가 디스패치 될 때 비동기 작업을 처리하고, 
    - 필요한 시점에 특정 액션 객체를 디스패치하거나 
    - 스토어의 현재 상태를 조회 할 수도 있었다.
    아래는 그 예시이다.
        export const getPosts = () => async dispatch => {
            dispatch({ type: GET_POSTS }) // 요청 시작
            try {
                const posts = postsAPI.getPosts() // API 호출
                dispatch({ type: GET_POSTS_SUCCESS, posts }) // 성공
            } catch (e) {
                dispatch({ type: GET_POSTS_ERROR, error: e }) // 실패
            }
        }
    redux-saga는 비동기 작업을 처리 할 때 다른 방식으로 처리한다.
    - saga 함수가 특정 액션을 모니터링하고 있다가, 
    - 특정 액션이 주어지면 이에 따라 제너레이터 함수를 실행하여, 비동기 작업을 처리하고, 액션을 디스패치한다.

1. src/modules/posts.js 수정 : 기존에 redux-thunk로 구현했던 posts 모듈을 redux-saga로 바꾼다.
1. src/lib/asyncUtils.js 수정 : API 호출 등, 간단한 로직일 경우 saga를 직접 만들기보단 유틸 함수로 saga를 손쉽게 만들어서 쓰면 굉장히 편하다.
1. src/modules/index.js : 루트사가에 postsSaga 적용
1. 테스트 : 동일하게 처리되는지 확인
