[Thunk에서 라우터 연동하기]

1. Thunk에서 라우터 연동하기
    프로젝트를 개발하다보면, thunk 함수 내에서 라우터를 사용해야 될 때도 있다. 
    예를 들자면, 로그인 요청을 하는데 로그인이 성공 할 시 / 경로로 이동시키고, 
    실패 할 시 경로를 유지 하는 형태로 구현 할 수도 있다.
    이번엔 그러한 상황엔 어떻게 구현을 해야하는지 알아보도록 하겠다.



1. src/modules/posts.js 수정 : 모듈 소스의 최하단에, 홈으로 돌아가는 thunk 함수 "goToHome()"을 추가한다. 1번 주석 참조.
    // 1. 홈으로 돌아가는 thunk 함수를 만든다. navigate 함수는 컨테이너에서 디스패치하면서 프롭으로 넘겨받을 예정이다.
    export const goToHome = (navigate) => (dispatch, getState) => {
        navigate("/")
    }


    
1. src/conatiners/PostContainer.js 수정 : 만든 thunk 함수를 디스패치하면서 navigate()를 프롭으로 함께 넘겨준다. 2~4번 주석 참조.
    import React, { useEffect } from 'react'
    import { useSelector, useDispatch } from 'react-redux'
    import { getPost, goToHome } from '../modules/posts'
    import Post from '../components/Post'
    // 2. useNavigate()를 임포트한다.
    import { useNavigate } from "react-router-dom"

    function PostContainer ({ postId }) {
        const { data, loading, error } = useSelector(
            state => state.posts.post[postId]
        ) || {
            loading: false,
            data: null,
            error: null
        }
        const dispatch = useDispatch()
        // 3. useNaviagte()를 가져와, naviagte()에 담는다.
        const navigate = useNavigate()

        useEffect(() => {
            dispatch(getPost(postId))
        }, [dispatch, postId])

        if (loading && !data) return <div>로딩중...</div> // 로딩중이고 데이터 없을때만
        if (error) return <div>에러 발생!</div>
        if (!data) return null

        return (
            <>
                {/* 4. thunk 함수인 goToHome()를 dispatch하는 곳에, naviagte()를 프롭으로 넘긴다. */}
                <button onClick={() => dispatch(goToHome(navigate))}>홈으로 이동</button>
                <Post post={data} />
            </>
        )
    }

    export default PostContainer



1. 테스트
    $ cd app1
    $ npm start
