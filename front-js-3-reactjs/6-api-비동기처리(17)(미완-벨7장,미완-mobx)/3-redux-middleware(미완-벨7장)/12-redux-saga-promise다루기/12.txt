[redux-saga 로 프로미스 다루기]

이번에는 redux-saga를 사용하여 프로미스를 다루는 방법을 배워보도록 하겠습니다. 
우리가 이전에 redux-thunk를 배울 때에는 thunk함수를 만들어서 이 함수가 디스패치 될 때 비동기 작업을 처리하고, 
액션 객체를 디스패치하거나 스토어의 현재 상태를 조회 할 수도 있죠.
redux-thunk를 배울 때 사용했던 thunk 함수를 다시 한번 확인해볼까요?

export const getPosts = () => async dispatch => {
  dispatch({ type: GET_POSTS }); // 요청이 시작됨
  try {
    const posts = postsAPI.getPosts(); // API 호출
    dispatch({ type: GET_POSTS_SUCCESS, posts }); // 성공
  } catch (e) {
    dispatch({ type: GET_POSTS_ERROR, error: e }); // 실패
  }
};

edux-thunk에서는 이렇게 함수를 만들어서 해당 함수에서 비동기 작업을 하고 필요한 시점에 특정 액션을 디스패치합니다.
redux-saga는 비동기 작업을 처리 할 때 다른 방식으로 처리합니다.
redux-saga에서는 특정 액션을 모니터링하도록 하고, 
해당 액션이 주어지면 이에 따라 제너레이터 함수를 실행하여 비동기 작업을 처리 후 액션을 디스패치합니다.
기존에 redux-thunk로 구현했던 posts 모듈을 redux-saga로 구현해봅시다.

1. modules/posts.js
기존에 redux-thunk로 구현 할 때에는 getPosts 와 getPost 는 thunk 함수였는데, 
이제는 redux-saga를 사용하니까 순수 액션 객체를 반환하는 액션 생성 함수로 구현 할 수 있습니다.
액션을 모니터링해서 특정 액션이 발생했을 때 호출할 사가 함수에서는 파라미터로 해당 액션을 받아올 수 있습니다.
그래서 getPostSaga의 경우엔 액션을 파라미터로 받아와서 해당 액션의 id 값을 참조 할 수 있죠.
예를 들어서, dispatch({ type: GET_POST, payload: 1, meta: 1 })이란 코드가 실행 되면
액션에서 action.payload값을 추출하여 API를 호출 할 때 인자로 넣어서 호출하는 것 입니다.
여기서 meta 값이 있는 이유는 우리가 이전에 만들었던 handleAsyncActionsById 를 호환시키기 위함입니다.
만약 handleAsyncActionsById를 사용하지 않는다면 meta 를 생략하셔도 됩니다.
그리고 추후 우리가 리팩토링 과정에서 프로미스를 처리하는 사가 함수를 쉽게 만드는 함수를 만들건데요,
만약에 리팩토링을 하지 않을거라면 사실상 { type: GET_POST, id } 이런식으로 파라미터를 꼭 payload 라고 설정 할 필요는 없습니다.
코드를 다 작성하셨다면 rootSaga에 우리가 방금 만든 postsSaga를 등록해주세요.

이제 기존의 컨테이너 컴포넌트들이 잘 작동하는지 확인해보세요.
redux-saga를 사용하면 이렇게 순수 액션 객체만을 디스패치해서 비동기 작업을 처리 할 수 있게 됩니다.

1. 프로미스를 처리하는 사가 리팩토링
기존에 우리가 작성했던 사가함수들을 다시 확인해봅시다.
우리가 까다로운 사가 함수를 만들게 될 때에는 사가 함수 안에서 여러 종류의 비동기 작업을 할 수 있습니다.
하지만, 우리가 방금 만든 기능 처럼 단순히 하나의 API를 요청해서 결과물을 가지고 액션을 디스패치 하는일이 꽤나 많이 발생하기도 합니다.
까다로운 작업을 할 때에는 사가 함수를 직접 작성하고,
지금처럼 간단한 비동기 작업을 처리 할 때에는 
우리가 이전에 redux-thunk를 배울 때 createPromiseThunk, createPromiseThunkById 를 만들어서 사용했던 것 처럼
비슷한 방식으로 반복되는 로직들을 함수화 하여 재사용하면 훨씬 깔끔한 코드로 작성을 할 수 있고, 생산성도 높일 수 있습니다.
그럼, createPromiseSaga와 createPromiseSagaById를 작성해보도록 하겠습니다.
기존 createPromiseThunk, createPromiseSaga 는 지우도록 하겠습니다(원하시면 유지하시거나 주석처리만 하셔도 좋습니다). 
참고로 handleAsyncActions 와 handleAsyncActionsById는 변동사항 없습니다.

1. lib/asyncUtils.js
이제 사가를 통해 비동기 작업을 처리 할 때에는 API 함수의 인자는 액션에서부터 참조합니다.
액션 객체에서 사용 할 함수의 인자의 이름은 payload 로 통일 시키도록 하겠습니다.
그리고, 특정 id를 위한 비동기작업을 처리하는 createPromiseSagaById와 handleAsyncActionsById에서는 
id값을 action.meta 에서 참조하도록 하겠습니다.

1. modules/posts.js
코드가 훨씬 깔끔해졌지요? 
매번 API 함수 호출을 위한 사가를 준비 할 때마다 사가 함수를 매번 직접 작성하는 것 보단, 
간단한 로직을 가지고 있는 사가 함수의 경우 우리가 만든 유틸 함수로 새로운 사가를 손쉽게 만들어서 쓰면 굉장히 편합니다.

1. 테스트 : 동일하게 처리되는지 확인
  $ cd app1
  $ npx json-server ./data.json --port 4000
  $ npm start
