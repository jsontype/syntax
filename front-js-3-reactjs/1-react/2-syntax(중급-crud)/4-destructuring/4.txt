[Destructuring]

1. 비구조화 할당이라고 한다. 보다 편하게 객체 state의 값을 수정할 수 있다.

1. src/App.js 수정 : 비구조화 할당 부분을 추가
    import { useState } from 'react'

    export default function App() {
        const [arr, setArr] = useState([1, 2, 3, 4, 5])
        const [obj, setObj] = useState({ id: 'yang123', pw: '3qeklfew12' })

        // destructing : 비구조화 할당
        const { id, pw } = obj

        const addArr = () => { setArr([ ...arr, 6]) }
        const modArr = () => { setArr(arr.map((item, index) => { return index === arr.length - 1 ? 999 : item })) }
        const delArr = () => { setArr(arr.filter((item, index) => { return index !== arr.length - 1 }))}

        const addObj = () => { setObj({ ...obj, email: 'test@example.com' }) }
        const modObj = () => { setObj({ ...obj, email: 'zzzz@example.com' }) }
        const delObj = () => { const { email, ...delObj } = obj; setObj(delObj) }

        return (
            <div>
                <div>{arr[arr.length - 1]} </div>
                <button onClick={addArr}>배열 추가</button>
                <button onClick={modArr}>배열 수정</button>
                <button onClick={delArr}>배열 삭제</button>

                {/* destructing : 비구조화 할당 사용 */}
                <div>{id} {obj.email} {pw}</div>
                <button onClick={addObj}>객체 추가</button>
                <button onClick={modObj}>객체 수정</button>
                <button onClick={delObj}>객체 삭제</button>
                
                {/* {console.log(arr)} */}
                {/* {console.log(obj)} */}
            </div>
        )
    }



1. 테스트 : 똑같이 작동하는 지 확인
    $ cd app1
    $ npm start


    
1. 과제: 다음 진도로 넘어가기전에, 이 틀에서 아래 API를 이용해서 userApp을 한번 만들어보자.
    API: https://jsonplaceholder.typicode.com/users
