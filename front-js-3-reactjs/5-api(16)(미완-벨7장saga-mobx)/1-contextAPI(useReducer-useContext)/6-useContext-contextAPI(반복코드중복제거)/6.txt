[중복제거 리팩토링하기]

1. 중복되는 코드를 함수화하여 재활용하기
    지금까지는 Context + 비동기 API 연동의 정석 패턴으로 구현했다.
    이제 여기서 조금 더 나아가서 반복되는 로직들을 함수화하여 재활용해보도록 하겠다.
    현재 코드는 getUsers()와 getUser() 함수가 반복되고 있다.
    이를 리팩토링 해보겠다.


    
1. src/api.js 생성 : 우선, api 들이 들어있는 파일을 따로 분리해준다.
    import axios from 'axios'

    export async function getUsers () {
        const response = await axios.get(
            'https://jsonplaceholder.typicode.com/users'
        )
        return response.data
    }

    export async function getUser (id) {
        const response = await axios.get(
            `https://jsonplaceholder.typicode.com/users/${id}`
        )
        return response.data
    }



1. src/asyncActionUtils.js 생성 : 
    // 1. 반복되는 함수 getUsers(), getUser()의 중복을 제거
    // 1-1. createAsyncDispatcher 함수를 만든다.
    // 이를 통해 UsersContext의 반복되는 함수 getUsers(), getUser()의 중복을 제거할 수 있다.
    // 이 함수는 파라미터로써 "액션의 타입"(예: GET_USER)과 "Promise를 만들어주는 함수"를 받아온다.
    export function createAsyncDispatcher (type, promiseFn) {
        // 성공, 실패에 대한 액션 타입 문자열을 준비한다.
        const SUCCESS = `${type}_SUCCESS`
        const ERROR = `${type}_ERROR`

        // 액션 핸들러 함수를 만든다. 이 때 ...rest를 사용하여 나머지 파라미터를 rest 배열에 담는다.
        async function actionHandler (dispatch, ...rest) {
            dispatch({ type }) // 요청 시작됨
            try {
                // Promise를 만들어주는 함수를 호출해서, data를 취득한다. 함수의 파라미터에는 인자값으로 rest 스프레딩 배열을 준다.
                const data = await promiseFn(...rest)
                // 성공시의 처리 : data를 가져온다.
                dispatch({
                    type: SUCCESS,
                    data
                })
            } catch (e) {
                // 실패시의 처리 : error를 가져온다.
                dispatch({
                    type: ERROR,
                    error: e
                })
            }
        }

        // 만든 함수를 반환한다.
        return actionHandler 
    }

    // 1-2. UsersContext.js 안에 다음을 임포트한다.
    // import createAsyncDispatcher from './createAsyncDispatcher'
    // import * as api from './api'

    // 1-3. 이제 UsersContext.js 안의 getUsers(), getUser() 함수 부분을 다음과 같이 줄일 수 있다.
    // export const getUsers = createAsyncDispatcher('GET_USERS', api.getUsers)
    // export const getUser = createAsyncDispatcher('GET_USER', api.getUser)



    // 2. 반복되는 리듀서 함수 usersReducer(state, action)의 중복을 제거
    // 2-1. 다음과 같이 initialAsyncState 객체를 만들어서 내보낸다. (2-1, 2-2는 UsersContext.js로부터 잘라내기 해오면 된다.)
    export const initialAsyncState = {
        loading: false,
        data: null,
        error: null
    }

    // 2-2. UsersContext 의 loadingState, success, error를 잘라내서 asyncActionUtils.js 안에 붙여넣는다.
    // 로딩중일 때 바뀔 state 객체
    const loadingState = {
        loading: true,
        data: null,
        error: null
    }

    // 성공했을 때의 state 만들어주는 함수
    const success = data => ({
        loading: false,
        data,
        error: null
    })

    // 실패했을 때의 state 만들어주는 함수
    const error = error => ({
        loading: false,
        data: null,
        error: error
    })

    // 2-3. createAsyncHandler라는 리듀서 함수도 만들어서 내보낸다.
    // 이 함수는 세가지 액션을 처리하는 리듀서이다.
    // type은 액션 타입, key는 리듀서에서 사용할 필드 이름이다. (예: user, users)
    export function createAsyncHandler (type, key) {
        // 성공, 실패에 대한 액션 타입 문자열을 준비한다.
        const SUCCESS = `${type}_SUCCESS`
        const ERROR = `${type}_ERROR`

        // 함수를 새로 만든다.
        function handler (state, action) {
            switch (action.type) {
                case type:
                    return {
                        ...state,
                        [key]: loadingState
                    }
                case SUCCESS:
                    return {
                        ...state,
                        [key]: success(action.data)
                    }
                case ERROR:
                    return {
                        ...state,
                        [key]: error(action.error)
                    }
                default:
                    return state
            }
        }

        // 만든 함수를 반환한다.
        return handler
    }

    // 2-4. UsersContext.js 안에 다음을 임포트한다.
    // import { createAsyncHandler, initialAsyncState } from './asyncActionUtils'

    // 2-5. 이제 UsersContext.js 안의 초기치 객체, state를 만들어주는 함수(유틸 함수로 변경), usersReducer(state, action) 리듀서 함수 총 세 부분을 다음과 같이 줄일 수 있다.
    // // 리팩토링된 초기치 객체
    // const initialState = {
    //     users: initialAsyncState,
    //     user: initialAsyncState
    // }
    // // 리팩토링된 유틸 함수
    // const usersHandler = createAsyncHandler('GET_USERS', 'users')
    // const userHandler = createAsyncHandler('GET_USER', 'user')
    // // 리팩토링된 usersReducer(state, action) 리듀서 함수
    // function usersReducer (state, action) {
    //     switch (action.type) {
    //         case 'GET_USERS':
    //         case 'GET_USERS_SUCCESS':
    //         case 'GET_USERS_ERROR':
    //             return usersHandler(state, action)
    //         case 'GET_USER':
    //         case 'GET_USER_SUCCESS':
    //         case 'GET_USER_ERROR':
    //             return userHandler(state, action)
    //         default:
    //             throw new Error(`Unhanded action type: ${action.type}`)
    //     }
    // }



1. src/UsersContext.js 리팩토링 : 1. getUsers(), getUser(), 2. usersReducer(state, action) 함수의 중복을 제거한 부분(<!-- --> 부분)을 보자.
    import React, { createContext, useReducer, useContext } from 'react'
    import {
        createAsyncDispatcher, // getUsers(), getUser()의 중복제거 처리용 dispatch 함수
        createAsyncHandler, // usersReducer(state, action)의 중복제거 처리용 dispatch 함수
        initialAsyncState // usersReducer(state, action)의 중복제거 처리용 state 함수
    } from './asyncActionUtils'
    import * as api from './api' // api 파일에서 내보낸 모든 함수들을 불러옴



    // <!-- 2. usersReducer를 리팩토링한 부분 Start -->
    // UsersContext에서 사용할 기본 state
    const initialState = {
        users: initialAsyncState,
        user: initialAsyncState
    }

    // UsersContext에서 사용할 유틸 함수
    const usersHandler = createAsyncHandler('GET_USERS', 'users')
    const userHandler = createAsyncHandler('GET_USER', 'user')

    // 위에서 만든 객체와 유틸 함수들을 사용하여 리듀서 작성 : 각 요청에 대하여 3가지 (시작, 성공, 실패) 액션을 처리하는 함수를 만들었다.
    function usersReducer (state, action) {
        // 하단의 switch 문에서는, 만약 return 또는 break를 하지 않으면, 여러개의 case 에 대하여 동일한 코드를 실행해준다. 
        switch (action.type) {
            // GET_USERS, GET_USERS_SUCCESS, GET_USERS_ERROR 액션이 발생하게 된다면 각각 usersHandler(state, action)을 호출해서 반환을 해준다.
            case 'GET_USERS':
            case 'GET_USERS_SUCCESS':
            case 'GET_USERS_ERROR':
                return usersHandler(state, action)
            // GET_USER, GET_USER_SUCCESS, GET_USER_ERROR 액션이 발생하게 된다면 각각 userHandler(state, action)을 호출해서 반환을 해준다.
            case 'GET_USER':
            case 'GET_USER_SUCCESS':
            case 'GET_USER_ERROR':
                return userHandler(state, action)
            // 그 외 지정되지 않은 액션 타입의 요청에는 모두 에러를 반환한다.
            default:
                throw new Error(`Unhanded action type: ${action.type}`)
        }
    }
    // <!-- 2. usersReducer를 리팩토링한 부분 End -->



    // State용 Context를 따로 만들어두기
    const UsersStateContext = createContext(null)
    // Dispatch용 Context를 따로 만들어두기
    const UsersDispatchContext = createContext(null)

    // 위에서 선언한 두가지 Context를 Provider로 감싸주는 컴포넌트
    export function UsersProvider ({ children }) {
        const [state, dispatch] = useReducer(usersReducer, initialState)
        return (
            <UsersStateContext.Provider value={state}>
                <UsersDispatchContext.Provider value={dispatch}>
                    {children}
                </UsersDispatchContext.Provider>
            </UsersStateContext.Provider>
        )
    }

    // State를 쉽게 조회 할 수 있게 해주는 커스텀 Hook
    export function useUsersState () {
        const state = useContext(UsersStateContext)
        if (!state) {
            throw new Error('Cannot find UsersProvider')
        }
        return state
    }

    // Dispatch를 쉽게 사용 할 수 있게 해주는 커스텀 Hook
    export function useUsersDispatch () {
        const dispatch = useContext(UsersDispatchContext)
        if (!dispatch) {
            throw new Error('Cannot find UsersProvider')
        }
        return dispatch
    }



    // <!-- 1. API 처리 함수를 리팩토링한 부분 Start -->
    // 모든 사용자 리스트를 받아오는 API
    export const getUsers = createAsyncDispatcher('GET_USERS', api.getUsers)
    // id값을 가지고, 특정 사용자의 정보를 가져오는 API
    export const getUser = createAsyncDispatcher('GET_USER', api.getUser)
    // <!-- 1. API 처리 함수를 리팩토링한 부분 End -->



1. 테스트 : 동일하게 작동하는지 확인
    $ cd app1
    $ npm start

1. 정리
    반복되는 코드가 많이 사라졌다.
    좋은 개발의 특성상, 이렇게 자주 사용되는 코드를 함수화해서 재사용하는 것이 더 좋다.
