[ContextAPI로 global request state 관리하기]

1. 리액트의 Context와 API 연동을 함께 하는 이유
    컴포넌트에서 필요한 외부 데이터들은 컴포넌트 내부에서 useAsync 같은 Hook을 사용해서 작업을 하면 충분하지만,
    가끔씩 특정 데이터들은 다양한 컴포넌트에서 필요하게 될 때도 있다. (예: 현재 로그인된 사용자의 정보, 설정 등)
    그럴 때에는 Context를 사용하면 개발이 편해진다.



1. src/UsersContext.js 생성 : Context 준비
    import React, { createContext, useReducer, useContext } from 'react'
    // API 호출을 위한 axios 라이브러리 임포트
    import axios from 'axios'

    // UsersContext에서 사용할 기본 state 객체
    const initialState = {
        users: {
            loading: false,
            data: null,
            error: null
        },
        user: {
            loading: false,
            data: null,
            error: null
        }
    }

    // 로딩중일 때 바뀔 state 객체
    const loadingState = {
        loading: true,
        data: null,
        error: null
    }

    // 성공했을 때의 state를 만들어주는 함수
    const success = data => ({
        loading: false,
        data,
        error: null
    })

    // 실패했을 때의 state를 만들어주는 함수
    const error = error => ({
        loading: false,
        data: null,
        error: error
    })

    // 위에서 만든 state 객체와 함수들을 사용하여 리듀서 작성
    function usersReducer (state, action) {
        switch (action.type) {
            case 'GET_USERS':
                return {
                    ...state,
                    users: loadingState
                }
            case 'GET_USERS_SUCCESS':
                return {
                    ...state,
                    users: success(action.data)
                }
            case 'GET_USERS_ERROR':
                return {
                    ...state,
                    users: error(action.error)
                }
            case 'GET_USER':
                return {
                    ...state,
                    user: loadingState
                }
            case 'GET_USER_SUCCESS':
                return {
                    ...state,
                    user: success(action.data)
                }
            case 'GET_USER_ERROR':
                return {
                    ...state,
                    user: error(action.error)
                }
            default:
                throw new Error(`Unhanded action type: ${action.type}`)
        }
    }

    // State용 Context를 따로 만들어두기
    const UsersStateContext = createContext(null)
    // Dispatch용 Context를 따로 만들어두기
    const UsersDispatchContext = createContext(null)

    // 위에서 선언한 두가지 Context를 Provider로 감싸주는 컴포넌트
    export function UsersProvider ({ children }) {
        const [state, dispatch] = useReducer(usersReducer, initialState)
        return (
            <UsersStateContext.Provider value={state}>
                <UsersDispatchContext.Provider value={dispatch}>
                    {children}
                </UsersDispatchContext.Provider>
            </UsersStateContext.Provider>
        )
    }

    // State를 쉽게 조회 할 수 있게 해주는 커스텀 Hook
    export function useUsersState () {
        const state = useContext(UsersStateContext)
        if (!state) {
            throw new Error('Cannot find UsersProvider')
        }
        return state
    }

    // Dispatch를 쉽게 사용 할 수 있게 해주는 커스텀 Hook
    export function useUsersDispatch () {
        const dispatch = useContext(UsersDispatchContext)
        if (!dispatch) {
            throw new Error('Cannot find UsersProvider')
        }
        return dispatch
    }

    // API 처리 함수 만들기 : 아래 함수들은 dispatch 를 파라미터로 받아오고, API에 필요한 파라미터도 받아오게 된다.

    // 모든 사용자 리스트를 받아오는 API
    export async function getUsers (dispatch) {
        dispatch({ type: 'GET_USERS' }) // 요청이 시작했을 때 액션을 디스패치
        try {
            const response = await axios.get(
                'https://jsonplaceholder.typicode.com/users'
            )
            dispatch({ type: 'GET_USERS_SUCCESS', data: response.data }) // 요청이 성공했을 때 액션을 다시 디스패치
        } catch (e) {
            dispatch({ type: 'GET_USERS_ERROR', error: e }) // 요청이 실패했을 때 액션을 다시 디스패치
        }
    }

    // id값을 가지고, 특정 사용자의 정보를 가져오는 API
    export async function getUser (dispatch, id) {
        dispatch({ type: 'GET_USER' }) // 요청이 시작했을 때 액션을 디스패치
        try {
            const response = await axios.get(
                `https://jsonplaceholder.typicode.com/users/${id}`
            )
            dispatch({ type: 'GET_USER_SUCCESS', data: response.data }) // 요청이 성공했을 때 액션을 다시 디스패치
        } catch (e) {
            dispatch({ type: 'GET_USER_ERROR', error: e }) // 요청이 실패했을 때 액션을 다시 디스패치
        }
    }



1. src/App.js 수정 : Context 사용
    import React from 'react'
    import Users from './Users'
    import { UsersProvider } from './UsersContext'

    function App () {
        return (
            // Context를 사용하기 위해서, App 컴포넌트를 UsersProvider로 감싸준다.
            <UsersProvider>
            <Users />
            </UsersProvider>
        )
    }

    export default App



1. src/Users.js 수정 : Users 컴포넌트의 코드를 Context를 사용하는 형태의 코드로 전환
    import React, { useState } from 'react'
    import { useUsersState, useUsersDispatch, getUsers } from './UsersContext'
    import User from './User'

    function Users () {
        const [userId, setUserId] = useState(null)

        // state를 가져온다.     
        const state = useUsersState()
        // dispatch 를 가져온다.
        const dispatch = useUsersDispatch()

        const { data: users, loading, error } = state.users
        const fetchData = () => {
            // 요청을 시작 할 때에는 getUsers() 함수 안에 dispatch를 넣어서 호출한다.
            getUsers(dispatch)
        }

        if (loading) return <div>로딩중..</div>
        if (error) return <div>에러가 발생했습니다</div>
        if (!users) return <button onClick={fetchData}>불러오기</button>

        return (
            <>
                <ul>
                    {users.map(user => (
                        <li
                            key={user.id}
                            onClick={() => setUserId(user.id)}
                            style={{ cursor: 'pointer' }}
                        >
                            {user.username} ({user.name})
                        </li>
                    ))}
                </ul>
                <button onClick={fetchData}>다시 불러오기</button>
                {userId && <User id={userId} />}
            </>
        )
    }

    export default Users



1. src/User.js 수정 : useEffect를 사용해서 id값이 바뀔 때마다 getUser() 함수를 호출
    import React, { useEffect } from 'react'
    import { useUsersState, useUsersDispatch, getUser } from './UsersContext'

    function User ({ id }) {
        // state를 가져온다.
        const state = useUsersState()
        // dispatch 를 가져온다.
        const dispatch = useUsersDispatch()

        // useEffect를 사용해서 id값이 바뀔 때마다, getUser() 함수를 호출한다.
        useEffect(() => {
            // 여기서 getUser() 함수를 호출 할 때에는 두번째 파라미터에 현재 props로 받아온 id값을 넣어준다.
            getUser(dispatch, id)
        }, [dispatch, id])

        const { data: user, loading, error } = state.user

        if (loading) return <div>로딩중..</div>
        if (error) return <div>에러가 발생했습니다</div>
        if (!user) return null

        return (
            <div>
                <h2>{user.username}</h2>
                <p>
                    <b>Email:</b> {user.email}
                </p>
            </div>
        )
    }

    export default User



1. 테스트
    $ cd app1
    $ npm start
