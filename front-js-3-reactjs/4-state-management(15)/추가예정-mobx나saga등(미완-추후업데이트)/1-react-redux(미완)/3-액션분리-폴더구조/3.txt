[Redux 액션 분리 - 폴더 구조]

1. 3.js 수정 : initialState를 수정한다.
    이렇게 설정된 initialState는 이후 함수들을 폴더와 파일로 분리하는 "기준"이 된다.

    const initialState = {
        user: {
            isLogIn: false,
            data: null,
        },
        post: [],
        comments: [],
        favorites: [],
        history: [],
        likes: [],
        followers: [],
    }


1. reducer 분리
    reducers 폴더를 생성한다.
    reducers/index.js 파일을 생성한다.
        const Reducer = ( ... 부분을 모두 잘라서 reducers/index.js 에 넣는다.
    끝에 다음 코드를 추가해서 모듈로 만들어준다.
        module.exports = reducer
    initialState.user 데이터구조가 바뀌었으므로 두 reducer의 구조도 바꿔준다.
        case 'LOG_IN':
            return {
                ...prevState,
                isLogIn: action.payload.isLogIn,
                user: action.payload.user,
            }
        case 'LOG_OUT':
            return {
                ...prevState,
                isLogIn: false,
                user: null,
            }
    3.js 상단에 다음 코드를 생성한다.
        const reducer = require('./reducers/index')
    


1. action 분리
    actions 폴더를 생성한다.
    actions/user.js 파일을 생성한다.
        const logIn = () => ... 과 const logIn = () => ... 액션을 잘라서 actions/user.js 에 넣는다.
        끝에 다음 코드를 추가해서 모듈로 만들어준다.
            module.exports = { logIn, logOut }
    actions/post.js 파일을 생성한다.
        const addPost = () => ... 액션을 잘라서 actions/post.js 에 넣는다.
        끝에 다음 코드를 추가해서 모듈로 만들어준다.
            module.exports = { addPost }
    3.js 상단에 다음 코드를 생성한다.
        const { logIn, logOut } = require('./actions/user')
        const { addPost } = require('./actions/post')



1. 3.js 상단에 나눠진 대로 action에 대한 임포트를 추가한다.
    const { addPost } = require('./actions/post')
    const { logIn, logOut } = require('./actions/user')


1. 3.js에서 4개의 dispatch 부분의 내용을 다음으로 수정한다.
    // dispatch 생성 : "logIn" action을 불러서 실행한다.
    store.dispatch(logIn({
        isLogIn: true,
        data: {
            id: 1,
            name: 'yang',
            admin: true,
        }
    }))
    // store 호출 : "logIn" action 일어난 후
    console.log('2. logIn 실행 후: ', store.getState())

    // dispatch 생성 : "addPost" action을 불러서 실행한다.
    store.dispatch(addPost({
        userId: 1,
        id: 1,
        content: 'Hello Redux',
    }))
    // store 호출 : "addPost" action 일어난 후
    console.log('3. addPost 실행 후: ', store.getState())

    // dispatch 생성 : "logOut" action을 불러서 실행한다.
    store.dispatch(logOut())
    // store 호출 : "logOut" action 일어난 후
    console.log('4. logOut 실행 후: ', store.getState())



1. node 3.js : 실행해보기
