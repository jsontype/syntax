[sdk와 playground react 앱의 조합을 모노레포로 만들기]

1. 모노레포란?
  모노레포는 여러 개의 패키지나 프로젝트를 하나의 저장소(repository)에서 관리하는 방식이다.
  이를 통해 코드의 재사용성을 높이고, 의존성 관리를 용이하게 할 수 있다.
  이 예시에서는 모노레포(Monorepo)를 설정하여 packages 폴더 내에
    패키지들은 전부 리액트앱이고,
    첫번째는 무비앱, (@https://yts.mx/api/v2/list_movies.json?sort_by=rating )
    두번째는 투두앱, (추가 수정 삭제 투두토글 가능)
    세번째는 뉴스 ( @https://api.hnpwa.com/v0/news.json  )
    네번째는 SNS ( @https://dummyapi.io/data/v1/user?limit=10 )
    다섯번째는 EC 사이트 ( @https://fakestoreapi.com/products )
  로 모노레포를 구성하려 한다.

1. 예상 폴더구조
  monorepo/
  └── packages/
      ├── ec-app/
      ├── movie-app/
      └── news-app/
      └── ...

1. package.json 수정: 루트 패키지(monorepo 폴더)에서 패키지에 워크스페이스 추가
  {
    "name": "monorepo",
    "version": "1.0.0",
    "private": true,
    "workspaces": [
      "packages/*"
    ],
    "scripts": {
      "dev": "concurrently \"npm run dev:movie\" \"npm run dev:todo\" \"npm run dev:news\" \"npm run dev:sns\" \"npm run dev:ec\"",
      "dev:movie": "cd packages/movie-app && BROWSER=none PORT=3001 npm start",
      "dev:todo": "cd packages/todo-app && BROWSER=none PORT=3002 npm start",
      "dev:news": "cd packages/news-app && BROWSER=none PORT=3003 npm start",
      "dev:sns": "cd packages/sns-app && BROWSER=none PORT=3004 npm start",
      "dev:ec": "cd packages/ec-app && BROWSER=none PORT=3005 npm start",
      "build": "npm run build --workspaces",
      "install:all": "npm install",
      "clean": "npm run clean --workspaces && rm -rf node_modules"
    },
    "devDependencies": {
      "concurrently": "^8.2.2"
    }
  }
  - private: true: 모노레포의 루트 패키지가 배포되지 않도록 설정
  - workspaces: 관리할 워크스페이스(패키지) 경로 지정
  - concurrently devDependencies: 모든 앱을 동시에 실행하기 위한 라이브러리

1. 의존성 설치
  $ npm i

  루트 디렉토리에서 의존성을 설치한다. 
  이는 워크스페이스 간의 의존성 관리를 용이하게 한다.

1. 패키지 생성 : sdk, test, tool 패키지 생성
  mkdir -p packages
  mkdir -p packages/home
  mkdir -p packages/movie-app
  mkdir -p packages/news-app
  mkdir -p packages/sns-app
  mkdir -p packages/todo-app
  mkdir -p packages/ec-app

1. 모노레포 생성
  각 폴더의 package.json 을 생성
  각 폴더의 앱을 구현

1. .gitignore 설정
  node_modules/
  packages/*/node_modules/
  dist/
  build/

1. 테스트
  # 루트 디렉토리에서 의존성 설치
  $ npm run install:all
  # 모든 앱을 동시에 실행
  $ npm run dev
  # 홈 앱에서 각 앱 실행 테스트
  localhost:3000

1. 요약
  모노레포는 여러 패키지를 하나의 저장소에서 관리하는 방식으로, 코드 재사용성과 의존성 관리를 용이하게 한다.
  npm 워크스페이스를 활용하여 모노레포를 설정하고, 각 패키지를 독립적으로 개발 및 실행할 수 있다.
  추가적으로 lerna나 turbo 같은 도구를 사용하여 모노레포 관리를 더욱 효율적으로 할 수 있다.

1. 참고: 모노레포 관리용 기타 라이브러리들
  lerna : 글로벌로 설치. 버전 관리 및 배포 자동화. lerna init으로 사용 가능.
  turbo : turbopack으로 웹팩보다 더 고성능의 빠른 빌드를 해주며, 캐싱 및 병렬 실행을 지원.     
  - packages.json 에서 devDependencies에 아래와 같이 turbo 항목을 추가한 후 npm i 를 한번 실행한 다음 사용한다.
    {
      "scripts": {
        "build": "turbo run build",
        "dev": "turbo run dev",
        "test": "turbo run test"
      },
      "devDependencies": {
        "turbo": "^1.0.0"
      },
      "turbo": {
        "pipeline": {
          "build": {
            "dependsOn": ["^build"],
            "outputs": ["dist/**"]
          },
          "test": {
            "dependsOn": ["build"]
          }
        }
      }
    }
