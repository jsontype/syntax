[Prettier]

1. Prettier
  .prettierrc.js 파일에 기록해둔 설정을 통해,
  함수, 세미콜론, 괄호 등 "표현식"의 컨벤션을 통일성있게 수정하는 라이브러리이다.

1. 사전준비 : 프로젝트를 새로 깔지 않고, 이전 챕터에서의 코드를 그대로 카피해서 가지고 온다.

1. VSCode의 format on save 세팅을 해제해둔다.

1. src/App.js 수정 : prettier가 잘 적용되는지 보기 위해 미리 코드를 작성해둔다.
  import './App.css'

  export default function App() {
    const onClick = text => {
      console.log(text)
    }

    return (
      <div className="App">
        <div onClick={() => {onClick("Hello React!")}} style={{color: 'gray'}}>
          Hello React!
        </div>
      </div>
    )
  }
  
1. prettier 설치
  $ npm i --save-dev prettier

1. .prettierrc.js 생성
  module.exports = {
    semi: false, // 스택 끝에 세미콜론(;)을 사용하지 않는다.
    singleQuote: true, // 문자열에 따옴표(')를 사용한다.
    tabWidth: 2, // 탭 문자의 스페이스바 개수를 지정한다.
    printWidth: 100, // 한 줄의 최대 길이를 지정한다.
    arrowParens: 'avoid', // 화살표 함수의 매개변수가 하나일 때, "always"면 괄호를 넣고 "avoid"면 괄호를 생략한다.
    bracketSpacing: true, // function App({text}) 같은 곳에서 text 괄호 안에 공백을 넣는다.
    jsxBracketSameLine: true, // JSX의 마지막 괄호 "/>"를 다음 줄에 둔다.
    trailingComma: 'all', // 변경 사항을 최소화하기위해, 콤마를 추가할 수 있으면, 마지막에 콤마를 추가한다.
  }

1. package.json 수정 : 설정한 Prettier를 사용하기 위해 다음과 같이 스크립트를 추가한다. 
  - 여기서는 --ignore-path 옵션으로 .gitignore 파일을 선택함으로써, Git으로 관리하지 않는 파일들은 검사하지 않도록 설정한다.
  "scripts": {
    ... ,
    "format": "prettier --check --ignore-path .gitignore .",
    "format:fix": "prettier --write --ignore-path .gitignore ."
  },

1. 테스트 : prettier 적용해보기
  App.js 코드를 VSCode 상에 띄운다.
  터미널을 연다.
  $ cd app1
  $ npm run format // 위반되는 파일을 검사한다. 있으면 수정할 파일 위치를 알려주고 에러를 리턴한다.
  $ npm run format:fix // 위반되는 파일을 수정한다.
  App.js 코드가 수정됐는지 확인한다.
  $ npm run format // 수정한 뒤 재검사하고, 위반되는 파일이 없다고 뜨는지 확인한다.
