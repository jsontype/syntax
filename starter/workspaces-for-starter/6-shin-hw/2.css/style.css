/* 선택자 : tag < class < id */

span {
    color: pink;
}

.title {
    background-color: #000;
    color: #FFF;
    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;
    font-size: 50px;
    font-weight: bolder;
    width: 100%;
    height: 100px;
    border: 1px solid gray;
    text-align: center;
}

#hello2 {
    color: red;
}

.p-1 {
    padding: 10px;
}

.b-1 {
    border: 1px solid gray;
}

.m-1 {
    margin: 10px;
}

.pl-10 {
    padding-left: 100px;
}

.pr-10 {
    padding-right: 100px;
}

.pt-10 {
    padding-top: 100px;
}

.pb-10 {
    padding-bottom: 100px;
}

.px-10 {
    padding: 0 100px 0 100px;
    /* padding-left: 100px;
    padding-right: 100px; */
}

.py-10 {
    padding: 100px 0 100px 0;
    /* padding-top: 100px;
    padding-bottom: 100px; */
}

.d-inline {
    display: inline;
}

.d-block {
    display: block;
}

.d-flex {
    display: flex;
}

/* 첫번째 자식에게 총 6자리 중 3자리를 먹으라고 주는 옵션 */
.d-flex>.first {
    flex: 3;
    background-color: blue;
}

/* 두번째 자식에게 총 6자리 중 2자리를 먹으라고 주는 옵션 */
.d-flex>.second {
    flex: 2;
    background-color: yellow;
}

/* 세번째 자식에게 총 6자리 중 1자리를 먹으라고 주는 옵션 */
.d-flex>.third {
    flex: 1;
    background-color: red;
}

/* 가상클래스 
    이벤트(사용자의 행동)에 따른 가상클래스
        :link : 아직 방문하지 않았을 때
        :visited : 이미 방문했을 때
        :hover : 사용자가 해당 요소에 커서를 가져다 댔을 때
        :active : 요소가 활성화 되었거나 클릭 되었을 때
        :focus : 해당 요소에 키보드 포커스가 맞춰졌을 때
    순서에 따른 가상클래스
        :first-child : li 중 첫번째 요소에 해당 CSS를 적용한다.
        :last-child : li 중 마지막에 해당 CSS를 적용한다.
        :nth-child(n) : li 중 앞에서 n번째 요소에 해당 CSS를 적용한다.
        :nth-last-child(n) : li 중 뒤에서 n번째 요소에 해당 CSS를 적용한다.
    부정(negation) 가상클래스
        :not(selector) : 파라미터 내의 selector가 아닌 것들에 적용한다. 일부를 필터링 처리할 수 있어 유용하다.
*/

a:visited {
    color: orange;
}

a:hover {
    color: red;
}

/* 
    가상요소(::) : 선택자 내의 특정 요소(element)를 선택할 수 있다.

    ::first-letter : 텍스트의 첫 문자에 적용
    ::first-line : 텍스트의 첫 줄에 적용 (브라우저 기준)
    ::selection : 드래그된 부분에 적용
    ::placeholder : 플레이스홀더에 적용
    ::before : 요소 앞에 적용
    ::after : 요소 뒤에 적용

    그 외 가상요소・가상클래스들은 인터넷을 검색하거나 다음 API를 참조해보자.
    
    https://www.w3schools.com/css/css_pseudo_classes.asp
    https://www.w3schools.com/css/css_pseudo_elements.asp
*/

p::first-letter {
    color: #ff0000;
    font-size: xx-large;
}

p::selection {
    color: white;
    background-color: orange;
}

/*
    미디어쿼리 (Media Query)

    미디어 쿼리는 CSS에서 어떤 스타일을 선택적으로 적용하고 싶을 때 사용합니다.
    다른 프로그래밍 언어의 if 조건문과 비슷한 개념이라고 생각하시면 이해가 쉬우실 겁니다.
    @media 키워드로 시작하는 미디어 쿼리의 문법 구조는 아래와 같습니다.
    @media (조건) { 스타일 }

    미디어 쿼리(Media Query)는 반응형 웹디자인의 기본이 됩니다.
    * 반응형 웹디자인은 디바이스 종류에 따라 웹에서 화면의 해상도에 따라 유연하게 컨텐츠를 배치하는 기술입니다.
*/
@media (max-width: 800px) {
    .small-tomato {
        background-color: tomato;
    }
}

@media (min-width: 800px) {
    .large-tomato {
        background-color: tomato;
    }
}