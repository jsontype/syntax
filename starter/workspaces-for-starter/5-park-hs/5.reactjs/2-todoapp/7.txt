[For - 배열 렌더링]

1. 다음 코드를 삭제
    src/InputSample.js



1. 리액트에서 배열을 수정하는 방법 : push, splice, sort 등의 함수를 사용하면 안 된다. 대신 기존의 배열을 한번 복사하고 나서 수정한 뒤, 갈아 끼워야 한다.    
    선언
        const arr = [] 대신, const [arr, setArr] = useState([])을 사용한다.
        const obj = {} 대신, const [obj, setObj] = useState({})을 사용한다.
    배열 추가
        arr.push() 대신 setUsers(users => users.concat(user))를 사용한다. (concat 함수를 사용하는 방법)
        arr.push() 대신 setUsers(users => [...users, user])를 사용해도 된다. (spread 연산자를 사용하는 방법)
    배열 삭제
        arr.splice 대신 setUsers(users => users.filter(user => user.id !== id))를 사용한다.
    for문 처리
        배열을 return하는 map이나 filter를 사용한다.
        map을 쓸 때는 반복문의 효율적 처리를 위해 key 값이 필요하다.

1. ★★배열에 쓰이는 Hooks의 역할
    useState의 역할
        배열을 선언한다.
    useEffect의 역할
        배열 안에서 변화가 일어났을 때를 캐치해서, Life Cycle Method를 구현한다.
    useRef의 역할
        컴포넌트 안에서 조회 및 수정 할 수 있는 변수 관리
        useRef로 관리되는 변수는 값이 바뀌어도 컴포넌트가 리렌더링 되지 않는다.



1. src/App.js 수정
    import React, { useRef, useState } from 'react'
    import UserList from './UserList'
    import CreateUser from './CreateUser'

    function App() {
        // CreateUser 컴포넌트에게 필요한 props를 준비 Start
        const [inputs, setInputs] = useState({
            username: '',
            email: ''
        })
        const { username, email } = inputs

        // 배열값
        const [users, setUsers] = useState([
            {
                id: 1,
                username: 'admin',
                email: 'admin@test.com',
                active: true
            },
            {
                id: 2,
                username: 'tester',
                email: 'test@test.com',
                active: false
            },
            {
                id: 3,
                username: 'yang',
                email: 'yang@test.com',
                active: false
            }
        ])

        // useRef() : 재랜더링 되지 않는 변수인 nextId를 만드는 함수이다.
        // .current : nextId의 값은 .current안에 담긴 값이 되며, 이 값을 조회, 수정할 때에는 .current값을 조회, 수정하면 된다.
        // useRef() 함수의 파라미터의 값 : .current의 초기값이 된다. 
        const nextId = useRef(4)
        
        // 인풋창에 값을 입력했을 때
        const onChange = e => {
            const { name, value } = e.target
                setInputs(inputs => ({
                ...inputs,
                [name]: value
            }))
        }

        // 작성 버튼을 눌렀을 때 : arr.push와 같음
        const onCreate = () => {
            // 작성 시 users 배열에 새 user 객체를 push
            const user = {
                id: nextId.current,
                username,
                email
            }

            // setUsers(users => [...users, user]) // arr.push 대신, spread 연산자를 사용하는 방법
            setUsers(users => users.concat(user)) // arr.push 대신, concat 함수를 사용하는 방법

            // 작성 시 인풋창 내용 초기화
            setInputs({
                username: '',
                email: ''
            })

            // ★화면 재랜더링 없이 아이디 Auto Increment 처리
            nextId.current += 1
        }

        // 삭제 버튼 눌렀을 때 : arr.splice와 같음. onRemove 함수를 UserList 컴포넌트에 전달하고, 이를 그대로 User 컴포넌트에게 전달해줄 것이다.
        const onRemove = id => {
            // user.id 가 파라미터로 일치하지 않는 원소만 추출해서 새로운 배열을 만듬
            // = user.id 가 id 인 것을 제거함
            setUsers(users => users.filter(user => user.id !== id));
        }

        // 배열의 수정 : for if 문 대신 map과 3항연산자 또는 && || 를 사용한다. onToggle 함수를 UserList 컴포넌트에 전달하고, 이를 그대로 User 컴포넌트에게 전달해줄 것이다.
        // 여기서는 유저를 클릭할 때마다 active Boolean 값을 반대로 수정한다.
        const onToggle = id => {
            setUsers(users =>
            users.map(user =>
                user.id === id ? { ...user, active: !user.active } : user
            )
            )
        }

        return (
            <>
                <CreateUser
                    username={username}
                    email={email}
                    onChange={onChange}
                    onCreate={onCreate}
                />
                <UserList users={users} onRemove={onRemove} onToggle={onToggle} />
            </>
        )
    }

    export default App



1. src/UserList.js
    import React, { useEffect } from 'react'

    const User = ({ user, onRemove, onToggle }) => {
        useEffect(() => {
            console.log(user);
        })
        return (
            <div>
                // 배열의 수정 : for if 문 대신 map과 3항연산자 또는 && || 를 사용한다
                // 여기서는 active 값에 따라 폰트의 색상을 바꿔준다. 
                // cursor 필드에 마우스를 올렸을때 커서를 손가락 모양으로 바꾼다.
                <b
                    style={{
                        cursor: 'pointer',
                        color: user.active ? 'green' : 'black'
                    }}
                    onClick={() => onToggle(user.id)}
                >
                    {user.username}
                </b>
                &nbsp;
                <span>({user.email})</span>
                <button onClick={() => onRemove(user.id)}>삭제</button>
            </div>
        )
    }

    function UserList({ users, onRemove, onToggle }) {
        // 배열을 컴포넌트화 해서 재사용할 때의 포인트
        // 포인트1. 컴포넌트를 map으로 돌려서 동적 배열크기에 대응
        // 포인트2. 컴포넌트에 map을 쓸 때 key를 설정하지 않으면 "중간의 값이 바뀌었을때 그 하위 값들이 전부 변해버린다." key값을 사용한다면 key를 이용해 "중간의 값만 추가하게 된다." 훨씬 효율적인 처리가 가능하므로 필수. 
        // 현재의 문제점 : 지금은 동일 username을 허용하므로 중복의 문제점이 있음(콘솔로그에 뜨는 에러 참조). 나중에, 보이지 않는 id라는 키를 사용해서 해결해야함.
        return (
            <div>
                {users.map(user => (
                    <User
                    user={user}
                    key={user.id}
                    onRemove={onRemove}
                    onToggle={onToggle}
                    />
                ))}
            </div>
        )
    }

    export default UserList



1. src/CreateUser.js
    import React from 'react'

    function CreateUser({ username, email, onChange, onCreate }) {
    return (
        <div>
        <input
            name="username"
            placeholder="계정명"
            onChange={onChange}
            value={username}
        />
        <input
            name="email"
            placeholder="이메일"
            onChange={onChange}
            value={email}
        />
        <button onClick={onCreate}>등록</button>
        </div>
    );
    }

    export default CreateUser



1. 테스트
    cd app1
    npm start
