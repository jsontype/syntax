[프론트엔드 제로베이스 설계 구체적으로 어떻게 하나?]

1. 리액트를 쓸까, 뷰를 쓸까 결정
  - 싱글페이지 OR 멀티페이지 결정
    SPA를 추천하는 경우
      B2B Saas이다.
      마이크로서비스 DDD 체제이다.
      빠른 개발이 필요하다.
      SEO가 중요하지 않다.
      백엔드 개발자다.
    MPA를 추천하는 경우
      B2C 서비스이며, 속도 때문에 SSR이 필요하다.
      SEO가 중요하다.    
      백엔드 개발자가 아니다.
  - 프론트엔드 프레임워크 결정
    Vue를 추천하는 경우
      규모가 작고 가벼운 프로젝트를 빠르게 만들고 싶다.
      속도 이슈에 매우 민감한 사이트이다.
      자바스크립트 문법에 미숙하다.
      회사에 퍼블리셔가 따로 존재한다.
      기존 html css js 구조로 작성된 코드를 SPA로 옮기고 싶다.
      개발자간 코드 통일성을 위한 커뮤니케이션 비용을 줄이고 싶다.
      백엔드 개발자다.
    React를 추천하는 경우
      프로젝트의 규모가 크다. 점점 더 확장 될 것이다.
      자바스크립트 문법에 능숙하다.
      컴포넌트를 작은 단위로 나누어 비슷한 UI 재사용을 많이 할 예정이다.
      커스터마이징 및 자유도가 높은 개발 환경을 좋아한다.
      타입스크립트를 사용할 것이다.
      넓은 커뮤니티 및 개발 인력시장의 혜택을 보고 싶다.
2. 화면기획서 작성
  Figma로 각 페이지 구성 (디자인 쪽 담당자 업무)
3. 화면정의서 작성 : 설계팀 또는 FE가 FE 설계를 하는 것으로, 화면기획서를 보면서 작성
  각 화면에서 쓰이는 컴포넌트들이 어떤 기능을 할 지 정의
4. 컴포넌트 설계 : 화면정의서를 보면서 작성
  무슨 컴포넌트들을 만들지 정의
  만드는 방법을 정의 : 어떤 UI 라이브러리, 어떤 폴더 구성(아토믹디자인 어떻게 정의할까?), 어떤 방법론(모듈 or BEM)을 쓸까 등을 결정
5. API 설계 : 각 컴포넌트들의 화면과 화면기능 정의가 된 상태에서 작성
  각 템플릿에 필요한 정보를 고려하여, 어떤 API가 필요한지 정의 (프론트엔드 설계는 반드시 API 설계까지 같이 따라오게 된다.)
  백엔드와 연계
6. 라이브러리 선정 : 라이브러리 뭐 쓸지 결정 후, README.md나 WIKI에 버전과 함께 적어두기
  | :------------------: | :--------: |
  |       Node.js        |  18.12.0   |
  |         npm          |   8.19.2   |
  |       next.js        |   13.2.4   |
  |        react         |   18.2.0   |
  |      react-dom       |   18.2.0   |
  |       graphql        |   16.6.0   |
  |    @apollo/client    |   3.7.3    |
  |    @apollo/server    |   4.3.0    |
  | @graphql-codegen/cli |   2.16.2   |
  |        eslint        |   8.36.0   |
  |       pretter        |   2.8.7    |
  |      typescript      |   5.0.2    |
7. 초기앱 설정
  yarn, npm 중 뭘 쓸지 결정 : 필수사항, package.json 내부 설정
  Prettier, ESLint 설정 : 필수사항, npm run format:fix 등 스크립트 설정
  타입스크립트 설정 : 선택사항(tsconfig 또는 jsconfig.json 중 무엇을 쓸지), 그 안에서 BaseURL 등 설정
  테스트 설정 : 선택사항, npm run test 등 jest 코드 설정
  스토리북 설정 : 선택사항, npm run storybook 등 스토리북 설정
  라우터 설정 : 선택사항, react-router-dom 설치 및 설정
  상태관리 설정 : 선택사항, redux, recoil, mobx 등 설치 및 설정
  UI 라이브러리 설정 : 선택사항, material-ui, antd, bootstrap 등 설치 및 설정
  폴더 구성 : 선택사항, 아토믹 디자인, 컴포넌트별 폴더 구성 등
  모듈 or BEM 설정 : 필수사항, 모듈 or BEM 설정
  커스텀 CSS용 UI 라이브러리 설정 : 선택사항, CSS/SASS/SCSS 중 어느것을 쓸지 설정
  컴포넌트 작성 : 필수사항, 디폴트 컴포넌트 일부 작성
8. 깃허브 설정
  브랜치 정책 설정 : 필수사항, 브랜치 정책 설정
  커밋 메시지 정책 설정 : 필수사항, 커밋 메시지 정책 설정
  이슈 정책 설정 : 필수사항, 이슈 정책 설정
  PR 정책 설정 : 필수사항, PR 정책 설정
  머지 정책 설정 : 필수사항, 머지 정책 설정
  릴리즈 정책 설정 : 필수사항, 릴리즈 정책 설정
9. 백로그 설정 : 매일, 매주 개발자들에게 주어질 태스크들을 쪼개고 개발할 순서(기한)와 우선도를 매겨서 할당되도록 설계
  태스크 관리 툴 선정 : 필수사항
  태스크 관리 툴을 깃허브와 연계 : 선택사항
10. 일의 배분 : 개발일 할 때 필요한 태스크를 배분 
  설계하는 사람이 컴포넌트의 정의, 기능구현, API의 정의, 그 순서, 우선순위를 정리를 한다음에, 각 멤버들에게 하나씩 나눠준다.
