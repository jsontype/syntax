[JS 고급문법 알고리즘 문제풀이]

1. 각 정렬 알고리즘과 시간 복잡도
  아래의 정렬 알고리즘들은 코딩 테스트에서 자주 나오는 필수적인 문제들이다. 각 알고리즘의 시간 복잡도는 다음과 같다.
  - 버블 정렬: O(n²) : 비교를 많이 해야 해서 느리다.
  - 선택 정렬: O(n²) : 작은 숫자를 찾는 시간이 많아서 느리다.
  - 삽입 정렬: O(n²) : 숫자가 많으면 느리다.
  - 병합 정렬: O(n log n) : 반으로 나눠서 하니까 빠르다. log n은 반으로 나누는 횟수를 의미한다.
    * 예를 들어, 10명의 학생을 절반으로 나눠서 5명씩 두 그룹으로 나누고,
      또 각각을 절반으로 나눈다. 이 과정을 반복하면, 모든 그룹이 1명이 될때까지 나눌 수 있다.
      이렇게 절반씩 줄여가는 과정이 바로 log n이다.
      n개의 숫자가 있다고 가정해보자. 이를 절반으로 계속 나눈다. (이게 log n이다)
      더 이상 나눌 수 없을 때까지 계속 나눈다.
      다 나누고 나서, 다시 합치면서 정렬한다. (이때 모든 숫자를 한 번씩 다룬다, 즉 n만큼 작업한다)
    * n log n를 '나무를 쪼개기'로 설명:
      큰 나무를 작은 조각으로 자를 때, 나무를 처음에 절반으로 자르고, 또 절반으로 자르고… 이런 식으로 계속 나누다 보면 작은 나무 조각들이 생기죠.
      이 과정이 바로 log n이에요.
      나무 조각들을 다 자른 후에는 각각의 조각을 다시 **하나씩 처리(정리)**해야 해요. 이게 n이에요.
    * n log n를 '책 더미를 정리하기'로 설명:
      책이 100권 있을 때, 한 번에 다 정리하지 않고, 책을 절반으로 나눈 다음, 다시 절반씩 계속 나눠서 작은 더미로 만든다고 상상해보세요.
      그 후에 이 작은 더미들을 하나씩 비교해서 정리하는데, 이때 모든 책을 한 번씩 다 다루게 돼요.
      이렇게 책을 절반씩 나누는 과정이 log n, 모든 책을 한 번씩 처리하는 과정이 n이에요.
      (마치 적분의 쪼개기와 비슷. 목적이 각각 정렬, 전체면적구하기라서 목적은 다르지만..)
  - 퀵 정렬: 평균 O(n log n), 최악 O(n²) : 평균적으로 빠르지만, 운이 안 좋으면 느려질 수 있다.

1. 시간 복잡도 (Time Complexity)와 Big-O 표기법
  - O
    O는 Big-O 표기법이라고 불리며, 알고리즘이 얼마나 빠르거나 느린지를 표현하는 방법, 즉, 알고리즘의 성능을 측정하는 표기법이다.
    O는 알고리즘이 처리해야 할 입력 크기가 커질 때(예: 배열의 크기, 숫자의 개수 등) 얼마나 많은 연산이 필요한지를 나타냅니다.
    O(n), O(n²), O(log n) 등의 표현으로 알고리즘이 얼마나 효율적인지를 나타내는 방식이다.
  - n
    n은 문제에서 다루는 입력 크기를 의미한다. 예를 들어, 배열의 크기, 숫자의 개수 등이 여기에 해당한다.
    n이 클수록 알고리즘이 처리해야 할 데이터가 많아지는 것을 의미한다.
  - O(n²)
    O(n²)은, 입력 크기 n이 증가할 때 알고리즘의 연산 횟수가 n의 제곱에 비례해서 증가한다는 의미이다.
    예를 들어, n이 10이면 알고리즘이 최대 100번(10²)의 연산을 해야 하고, n이 100이면 최대 10,000번(100²)의 연산을 해야한다.
    O(n²)의 더 알기쉬운 비유: 만약 정렬해야 할 학생이 10명이라면, O(n²) 알고리즘은 최대 10명 x 10명 = 100번 비교해야 할 수 있다는 뜻이다.
      학생이 100명으로 늘어나면, 비교 횟수는 100명 x 100명 = 10,000번으로 늘어난다.
      따라서 O(n²) 알고리즘은 입력 크기(n)가 커질수록 시간이 훨씬 더 빨리 늘어나는 알고리즘이다.

1. 버블 정렬 (Bubble Sort)
# 문제: 주어진 배열을 버블 정렬을 이용하여 오름차순으로 정렬하라.
# 버블정렬 알고리즘 설명: 인접한 두 요소를 비교하여 더 큰 요소를 뒤로 보내는 방식으로 정렬한다.
  * 설명: 버블 정렬은 가장 단순한 방법이다. 이 방법은 옆에 있는 두 개의 숫자를 비교하면서 큰 숫자를 뒤로 보내는 방식이다. 큰 숫자가 계속 뒤로 밀리다 보면, 가장 큰 숫자가 맨 끝에 도착하게 된다. 이런 과정을 계속 반복하면서 모든 숫자를 정렬한다.
  * 비유: 마치 물에 뜬 "거품(버블)"이 천천히 위로 떠오르듯, 큰 숫자들이 계속 뒤로 밀려나는 모습을 상상하면 된다!
  * 시간이 오래 걸리는 이유: 모든 숫자를 비교해야 하니까 시간이 오래 걸린다. 만약 100개의 숫자를 정렬하려면 최대 100번씩 비교를 해야한다. 그래서 시간이 많이 걸리는 편이다.
  * 비쥬얼 참조: https://visualgo.net/en/sorting?slide=7
# 입력 예시
// let arr = [64, 34, 25, 12, 22, 11, 90];
// console.log(bubbleSort(arr));
# 결과값
// [11, 12, 22, 25, 34, 64, 90]
# 답1: 자바스크립트로 구현한 버블 정렬
function bubbleSort(arr) {
  for (let i = 0; i < arr.length; i++) {
    for (let j = 0; j < arr.length - i - 1; j++) {
      if (arr[j] > arr[j + 1]) {
        // 두 요소 교환
        [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];
      }
    }
  }
  return arr;
}
# 답2: 고차함수를 사용한 버블 정렬
function bubbleSort(arr) {
  let swapped = false
  const newArr = arr.slice() // 원본 배열 변경 방지
  newArr.forEach((_, i) => {
    if (i < newArr.length - 1 && newArr[i] > newArr[i + 1]) {
      [newArr[i], newArr[i + 1]] = [newArr[i + 1], newArr[i]]
      swapped = true
    }
  })
  return swapped ? bubbleSort(newArr) : newArr // 만약 교환이 발생했다면 재귀 호출
}

1. 선택 정렬 (Selection Sort)
# 문제: 주어진 배열을 선택 정렬을 이용하여 오름차순으로 정렬하라.
# 알고리즘 설명: 배열에서 가장 작은 값을 찾아 맨 앞에 있는 값과 교환하는 과정을 반복하여 정렬한다.
  * 설명: 선택 정렬은 가장 작은 숫자를 찾아서 맨 앞으로 보내는 방법이다. 예를 들어, 5개의 숫자가 있다면 처음에 제일 작은 숫자를 찾아서 맨 앞에 두고, 그 다음에 남은 숫자 중에서 제일 작은 숫자를 찾아서 두 번째 자리에 놓는 식이다.
  * 비유: 마치 물건들을 크기 순서대로 줄 세울 때, 가장 작은 물건을 하나씩 앞으로 가져다 놓는 모습이다.
  * 시간이 오래 걸리는 이유: 가장 작은 숫자를 찾기 위해 처음부터 끝까지 모두 살펴봐야 한다. 그래서 큰 숫자가 많을수록 시간이 오래 걸린다.
  * 비쥬얼 참조: https://visualgo.net/en/sorting?slide=8
# 입력 예시
// let arr = [64, 34, 25, 12, 22, 11, 90];
// console.log(selectionSort(arr));
# 결과값
// [11, 12, 22, 25, 34, 64, 90]
# 답1: 자바스크립트로 구현한 선택 정렬
function selectionSort(arr) {
  for (let i = 0; i < arr.length; i++) {
    let minIdx = i;
    for (let j = i + 1; j < arr.length; j++) {
      if (arr[j] < arr[minIdx]) {
        minIdx = j;
      }
    }
    // 최소값을 맨 앞과 교환
    [arr[i], arr[minIdx]] = [arr[minIdx], arr[i]];
  }
  return arr;
}
# 답2: 고차함수를 사용한 버블 정렬
function selectionSort(arr) {
  const newArr = arr.slice() // 원본 배열 변경 방지
  newArr.forEach((_, i) => {
    let minIdx = i
    // i 이후의 요소에서 최소값을 찾음
    newArr.slice(i + 1).forEach((_, j) => {
      if (newArr[i + 1 + j] < newArr[minIdx]) {
        minIdx = i + 1 + j
      }
    })
    // 현재 위치(i)와 최소값 위치(minIdx) 교환
    if (minIdx !== i) {
      [newArr[i], newArr[minIdx]] = [newArr[minIdx], newArr[i]]
    }
  })
  return newArr
}

1. 삽입 정렬 (Insertion Sort)
# 문제: 주어진 배열을 삽입 정렬을 이용하여 오름차순으로 정렬하라.
# 알고리즘 설명: 배열의 각 요소를 적절한 위치에 삽입하면서 정렬한다.
  * 설명: 삽입 정렬은 숫자를 하나씩 꺼내서, 그 숫자가 들어갈 자리를 찾아서 넣는 방법이다. 마치 카드를 정리할 때, 손에 들고 있는 카드를 차례대로 정리하는 것처럼 말이다. 첫 번째 숫자는 그대로 두고, 두 번째 숫자를 첫 번째와 비교해서 알맞은 자리에 넣고, 세 번째 숫자도 그 전의 숫자들과 비교해서 올바른 자리에 넣는 식이다.
  * 비유: 마치 카드 게임에서 카드를 정리하는 것처럼 생각하면 된다. 새로운 카드를 손에 들어오면 이미 정리된 카드들과 비교해서 적당한 자리에 넣는 것이다.
  * 시간이 오래 걸리는 이유: 숫자가 많으면 많은 비교를 해야 하니까, 숫자가 많아질수록 시간이 점점 더 오래 걸린다.
  * 비쥬얼 참조: https://visualgo.net/en/sorting?slide=9
# 입력 예시
// let arr = [12, 11, 13, 5, 6];
// console.log(insertionSort(arr));
# 결과값
// [5, 6, 11, 12, 13]
# 답1: 자바스크립트로 구현한 삽입 정렬
function insertionSort(arr) {
  for (let i = 1; i < arr.length; i++) {
    let key = arr[i];
    let j = i - 1;
    // key보다 큰 값을 한 칸씩 오른쪽으로 이동
    while (j >= 0 && arr[j] > key) {
      arr[j + 1] = arr[j];
      j--;
    }
    // key를 적절한 위치에 삽입
    arr[j + 1] = key;
  }
  return arr;
}
# 답2: 자바스크립트로 구현한 삽입 정렬
function insertionSort(arr) {
  const newArr = arr.slice() // 원본 배열 변경 방지
  newArr.forEach((key, i) => {
    let j = i - 1
    // 현재 요소(key)를 올바른 위치에 삽입
    while (j >= 0 && newArr[j] > key) {
      newArr[j + 1] = newArr[j]
      j--
    }
    newArr[j + 1] = key
  })
  return newArr
}

1. 병합 정렬 (Merge Sort)
# 문제: 주어진 배열을 병합 정렬을 이용하여 오름차순으로 정렬하라.
# 알고리즘 설명: 배열을 절반으로 나누고 각각을 재귀적으로 정렬한 후 병합하는 방식이다.
  * 설명: 병합 정렬은 숫자들을 반으로 자르고, 각각을 다시 반으로 자른 다음, 작은 덩어리들끼리 비교해서 합치는 방식이다. 이 과정을 반복하면서 점점 큰 덩어리를 만들어서 정렬된 하나의 배열을 만든다.
  * 비유: 마치 큰 퍼즐을 작은 조각으로 나눈 다음, 그 조각들을 하나씩 맞춰가면서 전체 그림을 완성하는 과정과 비슷하다. 처음에는 퍼즐 조각들이 작은 그룹으로 나눠지고, 나중에 그 조각들이 정렬된 순서로 합쳐진다.
  * 시간이 빠른 이유: 반씩 나눠서 비교하기 때문에, 한 번에 숫자가 많이 줄어든다. 그래서 정렬하는 속도가 빠르다!
  * 비쥬얼 참조: https://visualgo.net/en/sorting?slide=11
# 입력 예시
// let arr = [38, 27, 43, 3, 9, 82, 10];
// console.log(mergeSort(arr));
# 결과값
// [3, 9, 10, 27, 38, 43, 82]
# 답1: 자바스크립트로 구현한 병합 정렬
function mergeSort(arr) {
  if (arr.length <= 1) {
    return arr;
  }
  const mid = Math.floor(arr.length / 2);
  const left = arr.slice(0, mid);
  const right = arr.slice(mid);
  return merge(mergeSort(left), mergeSort(right));
}
function merge(left, right) {
  let result = [];
  let leftIndex = 0;
  let rightIndex = 0;
  while (leftIndex < left.length && rightIndex < right.length) {
    if (left[leftIndex] < right[rightIndex]) {
      result.push(left[leftIndex]);
      leftIndex++;
    } else {
      result.push(right[rightIndex]);
      rightIndex++;
    }
  }
  // 남은 요소들을 모두 추가
  return result.concat(left.slice(leftIndex)).concat(right.slice(rightIndex));
}
# 답2: 자바스크립트로 구현한 삽입 정렬
function mergeSort(arr) {
  if (arr.length <= 1) {
    return arr
  }
  const mid = Math.floor(arr.length / 2)
  const left = arr.slice(0, mid)
  const right = arr.slice(mid)
  return merge(mergeSort(left), mergeSort(right))
}
function merge(left, right) {
  return [
    ...left.filter((val, i) => {
      while (right.length && val > right[0]) {
        left[i] = undefined
        return right.shift()
      }
      return val
    }),
    ...right,
  ].filter(Boolean)
}

1. 퀵 정렬 (Quick Sort)
# 문제: 주어진 배열을 퀵 정렬을 이용하여 오름차순으로 정렬하라.
# 알고리즘 설명: 피벗 값을 기준으로 배열을 두 개로 나누고 재귀적으로 정렬한다.
  * 설명: 퀵 정렬은 가운데에 피벗(pivot)이라는 기준 숫자를 정하고, 그 숫자보다 작은 숫자는 왼쪽으로, 큰 숫자는 오른쪽으로 보내는 방식이다. 그런 다음 왼쪽과 오른쪽도 다시 같은 방법으로 나눠서 정렬한다. 이 과정을 반복하면 전체 숫자들이 정렬된다.
  * 비유: 마치 친구들끼리 키 순서대로 줄을 설 때, 키가 중간 정도 되는 친구를 먼저 세우고 그 친구보다 작은 친구들은 왼쪽으로, 큰 친구들은 오른쪽으로 보내는 것과 같다. 그 다음 왼쪽 친구들끼리, 오른쪽 친구들끼리 또 같은 방식으로 나누고 줄을 서는 거다.
  * 시간이 빠른 이유: 한 번에 기준을 잡고 크게 나누기 때문에 빠르게 정렬할 수 있다. 하지만 숫자들이 이미 거의 정렬된 상태라면 시간이 오래 걸릴 수 있다.
  * 비쥬얼 참조: https://visualgo.net/en/sorting?slide=12
# 입력 예시
// let arr = [10, 7, 8, 9, 1, 5];
// console.log(quickSort(arr));
# 결과값
// [1, 5, 7, 8, 9, 10]
# 답1: 자바스크립트로 구현한 퀵 정렬
function quickSort(arr) {
  if (arr.length <= 1) {
    return arr;
  }
  let pivot = arr[arr.length - 1];
  let left = [];
  let right = [];
  for (let i = 0; i < arr.length - 1; i++) {
    if (arr[i] < pivot) {
      left.push(arr[i]);
    } else {
      right.push(arr[i]);
    }
  }
  return [...quickSort(left), pivot, ...quickSort(right)];
}
# 답2: 자바스크립트로 구현한 삽입 정렬
function quickSort(arr) {
  if (arr.length <= 1) return arr
  const pivot = arr[arr.length - 1]
  // `filter`를 사용하여 `left`와 `right` 배열을 생성
  const left = arr.filter((el, index) => el < pivot && index !== arr.length - 1)
  const right = arr.filter((el, index) => el >= pivot && index !== arr.length - 1)
  // 재귀적으로 정렬된 배열을 병합
  return [...quickSort(left), pivot, ...quickSort(right)]
}
