[xlsx: 엑셀 파일 내용을 읽어들어오는 라이브러리]

1. 사전준비 : init 앱을 가지고 온다.

1. 사전준비 : src/components/HelloWorld.vue 삭제

1. 사전준비 : 2 x 2 행렬 내용이 들어가 있는 엑셀파일을 하나 준비 (예: data.xlsx)

1. 라이브러리 설치
  $ npm i xlsx

1. src/components/FileUpload.vue 생성 : 파일 업로드 컴포넌트를 생성한다.
  ```
    <template>
      <div>
        <input type="file" ref="fileInput" @change="handleFileUpload" accept=".xlsx, .xls" />
        <table v-if="excelData.length > 0">
          <!-- <thead>
            <tr>
              <th v-for="header in excelData[0]" :key="header">{{ header }}</th>
            </tr>
          </thead> -->
          <tbody>
            <tr v-for="(row, rowIndex) in excelData" :key="rowIndex">
              <td v-for="(cell, cellIndex) in row" :key="cellIndex">{{ cell }}</td>
            </tr>
          </tbody>
        </table>
      </div>
    </template>

    <script setup>
    import { ref } from 'vue';
    import * as XLSX from 'xlsx';

    const excelData = ref([]);

    const handleFileUpload = (event) => {
      const file = event.target.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = (e) => {
          const data = e.target.result;
          const workbook = XLSX.read(data, { type: 'array' });
          const sheetName = workbook.SheetNames[0];
          const worksheet = workbook.Sheets[sheetName];
          const extractedData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
          excelData.value = extractedData;
        };
        reader.readAsArrayBuffer(file);
      }
    };
    </script>
  ```

1. src/App.vue 수정 : 컴포넌트를 호출한다.
  ```
    <template>
      <FileUpload />
    </template>

    <script setup lang="ts">
    import FileUpload from '@/components/FileUpload.vue'
    </script>

    <style scoped>
    </style>
  ```

1. 테스트 : data.xlsx을 업로드한 뒤, 화면상에 내용이 제대로 표시되는지 확인한다.
  $ cd app1
  $ npm run dev
