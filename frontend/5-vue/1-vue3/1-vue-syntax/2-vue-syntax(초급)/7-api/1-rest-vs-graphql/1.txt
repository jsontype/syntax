[API 정의와 종류]

1. ★★ API란?
  API(Application Programming Interface)는 소프트웨어 간 상호작용을 가능하게 하는 규약이나 규칙 집합이다.
  이를 통해 다른 소프트웨어나 서비스가 그 기능을 활용할 수 있게 된다.
  예를 들어, 게시물 데이터를 가져오거나, 동영상 서비스에서 영상 데이터를 불러오는 것이 API를 통해 이루어진다.
  * 우선 이 api 챕터에서는 REST API만을 사용해서, api를 공부해보도록 하겠지만,
  * 실제로는 GraphQL이나 gRPC 등 다양한 api가 존재하므로, 어떤 종류의 api를 사용하고 있는지를 인식하는 정도로 아래 내용을 봐두자.

1. ★ API의 종류
  REST API (= RESTful API)
    표현 스테이트 전이(Representational State Transfer):
      REST는 웹의 기본 원칙을 따르는 아키텍처 스타일임
      클라이언트는 리소스의 표현을 받고, 이를 통해 리소스의 상태에 대한 정보와 가능한 액션을 알 수 있음
    리소스 기반: 
      URL을 통해 리소스(데이터)를 식별하며, 
      HTTP 메소드 (GET, POST, PUT, DELETE 등)를 사용하여 
      리소스에 대한 다양한 작업을 수행
    스테이트 없음(Stateless): 
      각 요청은 독립적이며 이전 요청의 스테이트 정보를 저장하지 않음
    유연성과 확장성: 
      REST API는 클라이언트와 서버의 엄격한 분리 덕분에 다양한 클라이언트 (웹, 모바일, IoT 등)에서 사용하기 적합함

  GraphQL (= Graph Query Language, BFF, Backend For Frontend)
    데이터 쿼리 언어(Data Query Language):
      GraphQL은 클라이언트가 필요한 데이터의 구조를 정확히 명시하여 요청할 수 있게 해줌
    단일 엔드포인트:
      GraphQL API는 일반적으로 단일 엔드포인트를 사용하며,
      클라이언트는 필요한 데이터의 형태를 쿼리(Query) 또는 변형(Mutation)으로 명시함
    오버페칭 및 언더페칭 해결:
      클라이언트는 필요한 정확한 데이터만 요청할 수 있어,
      불필요한 데이터의 전송을 방지함
    실시간 데이터:
      GraphQL은 Subscription을 통해 실시간으로 데이터를 받을 수 있는 기능을 제공함
    
  Rest API, GraphQL의 차이점 요약
    데이터 획득:
      REST에서는 서버가 데이터의 구조를 결정하고, GraphQL에서는 클라이언트가 요구하는 데이터의 구조를 결정함
    기본 구조:
      REST는 리소스 기반의 여러 엔드포인트를 가지며, GraphQL은 단일 엔드포인트에서 복잡한 쿼리를 처리함
    효율성: 
      GraphQL은 오버페칭과 언더페칭 문제를 해결하지만, 복잡한 쿼리에서는 성능 저하가 발생할 수 있음
      REST는 각 리소스에 대한 명확한 HTTP 요청을 필요로 함
      두 기술 모두 장단점을 가지고 있으며, 사용할 API의 특성과 요구사항에 따라 적절한 선택이 필요함

1. API 종류별 사용 예시
  REST API: 
    게시물을 가져오거나, 동영상 서비스에서 영상 데이터를 불러오는 것
    API URL을 호출하는 내장함수 "fetch"나, "axios" 라이브러리 등을 사용하여 호출한다.
  GraphQL: 
    페이스북, 인스타그램, 트위터 등에서 사용되는 API
    페이스북의 경우, GraphQL을 사용하여 2015년에 모바일 앱의 성능을 50% 향상시켰다고 함
