[라이프사이클 훅]

1. 사전준비 : 프로젝트를 새로 깔지 않고, 이전 챕터에서의 코드를 그대로 카피해서 가지고 온다.

1. 라이플사이클 훅이란?
  생명주기(컴포넌트가 브라우저에 나타나고 사라지는 특정 시점)에 따라 메소드를 호출할 수 있는 훅 함수

1. 라이프사이클 훅 함수들
  onBeforeMount: 컴포넌트가 브라우저에 나타나기 전에 호출
  onMounted: 컴포넌트가 브라우저에 나타날 때 호출
  onBeforeUpdate: 컴포넌트가 재 렌더링되기 전에 호출
  onUpdated: 컴포넌트가 재 렌더링될 때 호출
  onBeforeUnmount: 컴포넌트가 브라우저에서 사라지기 전에 호출
  onUnmounted: 컴포넌트가 브라우저에서 사라질 때 호출

1. src/components/reactive/LifeCycle.vue 생성
  ```
    <template>
      <div>
        <h1>LifeCycle</h1>
        <button @click="toggle">토글</button>
        <LifeCycleSubComponent v-if="isOpen" />
      </div>
    </template>

    <script setup>
    import { ref } from 'vue'
    import LifeCycleSubComponent from '@/components/reactive/LifeCycleSubComponent.vue'

    const isOpen = ref(false)
    const toggle = () => {
      isOpen.value = !isOpen.value
    }
    </script>

    <style lang="scss" scoped>
    </style>
  ```

1. src/components/reactive/LifeCycleSubComponent.vue 생성
  ```
    <template>
      <div>
        <h2>LifeCycle 하위컴포넌트</h2>
        <button @click="onClick">{{ count }}</button>
      </div>
    </template>

    <script lang="ts" setup>
    defineProps<{ count: number, onClick: () => void }>()

    import { 
      onBeforeMount, 
      onMounted,
      onBeforeUpdate,
      onUpdated,
      onBeforeUnmount,
      onUnmounted
    } from 'vue'
    import { ref } from 'vue'

    const count = ref(0)
    const onClick = () => {
      count.value = count.value + 1
    }

    // onMounted, onUpdated, onUnmounted 등 "과거형" 훅 함수에 동기 함수를 넣어서 처리할 때는 "setTimeout"을 사용
    onBeforeMount(() => {
      console.log('onBeforeMount')
      alert('onBeforeMount')
    })
    onMounted(() => {
      console.log('onMounted')
      setTimeout(() => {
        alert('onMounted')
      }, 0)
    })
    onBeforeUpdate(() => {
      console.log('onBeforeUpdate')
      alert('onBeforeUpdate')
    })
    onUpdated(() => {
      console.log('onUpdated')
      setTimeout(() => {
        alert('onUpdated')
      }, 0)
    })
    onBeforeUnmount(() => {
      console.log('onBeforeUnmount')
      alert('onBeforeUnmount')
    })
    onUnmounted(() => {
      console.log('onUnmounted')
      setTimeout(() => {
        alert('onUnmounted')
      }, 0)
    })
    </script>

    <style lang="scss" scoped>
    </style>
  ```

1. src/views/Home.vue 수정
  ```
    <template>
      <div class="app">
        <Computed />
        <NoComputed1 />
        <NoComputed2 />
        <Watch />
        <WatchForm />
        <WatchNoDeep />
        <WatchDeep />
        <WatchEffect />
        <LifeCycle />
      </div>
    </template>

    <script setup lang="ts">
    import Computed from "@/components/reactive/Computed.vue";
    import NoComputed1 from "@/components/reactive/NoComputed1.vue";
    import NoComputed2 from "@/components/reactive/NoComputed2.vue";
    import Watch from "@/components/reactive/Watch.vue";
    import WatchForm from "@/components/reactive/WatchForm.vue";
    import WatchNoDeep from "@/components/reactive/WatchNoDeep.vue";
    import WatchDeep from "@/components/reactive/WatchDeep.vue";
    import WatchEffect from "@/components/reactive/WatchEffect.vue";
    import LifeCycle from '@/components/reactive/LifeCycle.vue'
    </script>

    <style scoped>
    .app {
      margin-bottom: 50px;
    }
    </style>
  ```

1. 테스트 : 라이프사이클마다 적절하게 Alert 함수가 실행되는지 확인한다.
  $ cd app1
  $ npm run dev

1. [참고] onMounted, onUpdated, onUnmounted의 alert을 띄울 때만 setTimeout을 사용하는 이유
  라이프사이클 훅들은 비동기함수이고, alert 함수는 JavaScript의 실행을 멈추고 사용자가 확인 버튼을 클릭할 때까지 대기하는 "동기 함수이다."
  따라서 비동기함수인 라이프사이클 훅이 "먼저" 실행되기 때문에, onMounted 등의 내부에서 alert를 호출하면 "컴포넌트가 렌더링되기 전에" 경고 창이 뜨는 것이다.
  이를 해결하기 위해 지연시간을 0으로 설정하더라도 setTimeout을 사용하여 alert 호출을 동일한 비동기 함수로만 맞춰주면,
  onMounted 등의 훅이 실행된 후, 즉시 setTimeout이 큐에 들어가고, 현재 실행 중인 스크립트(여기서는 컴포넌트의 초기 렌더링 로직)가 완료된 후에 alert이 호출되므로,
  의도대로 렌더링까지 된 뒤에 뜨는 것이다.
  * 비동기와 동기의 이해가 잘 가지 않으면 JS 고급문법을 참조해서, JS의 이벤트 루프의 특성(동기가 먼저 실행되는 이유와 관련된 개념, 즉, 호이스팅, 힙-큐-스택 등)의 이해를 먼저 해야 한다.
