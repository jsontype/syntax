[클라이언트 앱 UI 준비해두기]

1. 사전준비 : init 앱을 가지고 온다.

1. 클라이언트 앱 UI 준비해두기
  이대로 UI를 만들게 되면, 상단에 메뉴가 있고, 사이드바와, 메인 컨텐츠가 있는 형태로 만들어진다.
  이것을 기본 템플릿을 해서, 다양한 개인 프로젝트 앱을 만들 수 있다.
  참고해두자.

1. src/main.js 수정 : 라우터, 스토어 사용
  import Vue from 'vue'
  import App from './App.vue'
  import router from './router'
  import store from './store'

  Vue.config.productionTip = false

  new Vue({
    router,
    store,
    render: h => h(App)
  }).$mount('#app')

1. src/views/People.vue 작성 : 사이드 섹션과 메인 섹션을 가지는 컴포넌트 작성하기
  <template>
    <div id="people" class="component">
      <aside>
        <aside-items />
      </aside>
      <section class="contents">
        <main-contents />
      </section>
    </div>
  </template>

  <script>
  export default {
    name: 'People',
    components: {
      AsideItems: {
        render: function(createElement) {
          return createElement('div')
        }
      },
      MainContents: {
        render: function(createElement) {
          return createElement('div')
        }
      }
    }
  }
  </script>

1. src/views/Roles.vue 생성 : 사이드 섹션과 메인 섹션을 가지는 컴포넌트 작성하기 + MockDB를 통한 예시 작성
  <template>
    <div id="roles" class="component">
      <aside>
        <ul>
          <li v-for="role in roles" :key="role.id"
              :class="['roleItem', { 'on': contentId === role.id }]"
              @click="setContentId(role.id)">
            <span>{{ contentId === role.id ? '🔲' : '⬛' }}</span>{{ roleIcons[role.id] }} {{ role.id }}
          </li>
        </ul>
      </aside>
      <section class="contents">
        <div class="roleWrapper" v-if="currentRole">
          <h2>{{ currentRole.id }}</h2>
          <div class="requirement">
            <span>{{ currentRole.requirement }}</span> required
          </div>
          <h3>Members</h3>
          <ul>
            <li v-for="member in currentRole.members" :key="member.id">
              {{ member.last_name }}
            </li>
          </ul>
        </div>
      </section>
    </div>
  </template>

  <script>
  export default {
    data() {
      return {
        contentId: "developer",
        roles: [
          {
            id: "developer",
            requirement: "Computer Science Degree",
            members: [
              { id: 1, last_name: "Davidson" },
              { id: 2, last_name: "Harris" },
              { id: 3, last_name: "Adams" },
            ],
          },
          {
            id: "designer",
            requirement: "Graphic Design Certificate",
            members: [
              { id: 4, last_name: "West" },
              { id: 5, last_name: "Ford" },
            ],
          },
          {
            id: "planner",
            requirement: "Portfolio",
            members: [{ id: 6, last_name: "Jenkins" }],
          },
        ],
        roleIcons: {
          developer: "💻",
          designer: "🎨",
          planner: "📝",
        },
      };
    },
    computed: {
      currentRole() {
        return this.roles.find((role) => role.id === this.contentId);
      },
    },
    methods: {
      setContentId(id) {
        this.contentId = id;
      },
    },
  };
  </script>

1. src/views/Teams.vue 생성 : 사이드 섹션과 메인 섹션을 가지는 컴포넌트 작성하기
  <template>
    <div id="teams" class="component">
      <aside>
        <aside-items/>
      </aside>
      <section class="contents">
        <main-contents/>
      </section>
    </div>
  </template>

  <script>
  export default {
    name: 'Teams',
    components: {
      AsideItems: {
        render: function(createElement) {
          return createElement('div')
        }
      },
      MainContents: {
        render: function(createElement) {
          return createElement('div')
        }
      }
    }
  }
  </script>

1. src/router/index.js 수정 : 라우터 연결
  import Vue from "vue"
  import Router from "vue-router"
  import Roles from "../views/Roles"
  import Teams from "../views/Teams"
  import People from "../views/People"

  Vue.use(Router)

  export default new Router({
    routes: [
      {
        path: "/roles",
        name: "Roles",
        component: Roles,
      },
      {
        path: "/teams",
        name: "Teams",
        component: Teams,
      },
      {
        path: "/people",
        name: "People",
        component: People,
      },
    ],
  })

1. src/App.vue 수정 : 라우터 연결하고, 글로벌 스타일 작성하기
  <template>
    <div id="app">
      <header class="App-header">
        <h1>Company Management</h1>
        <nav>
          <ul>
            <li><router-link to="/roles">Roles</router-link></li>
            <li><router-link to="/teams">Teams</router-link></li>
            <li><router-link to="/people">People</router-link></li>
          </ul>
        </nav>
        <router-view/>
      </header>
    </div>
  </template>


  <script>
  export default {
    name: 'App',
  }
  </script>

  <style>
    /* 글로벌 스타일 : 태그별 스타일 */
    body {
      margin: 0;
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen",
        "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue",
        sans-serif;
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
    }

    html,
    body,
    div,
    span,
    applet,
    object,
    iframe,
    h1,
    h2,
    h3,
    h4,
    h5,
    h6,
    p,
    blockquote,
    pre,
    a,
    abbr,
    acronym,
    address,
    big,
    cite,
    code,
    del,
    dfn,
    em,
    img,
    ins,
    kbd,
    q,
    s,
    samp,
    small,
    strike,
    strong,
    sub,
    sup,
    tt,
    var,
    b,
    u,
    i,
    center,
    dl,
    dt,
    dd,
    ol,
    ul,
    li,
    fieldset,
    form,
    label,
    legend,
    table,
    caption,
    tbody,
    tfoot,
    thead,
    tr,
    th,
    td,
    article,
    aside,
    canvas,
    details,
    embed,
    figure,
    figcaption,
    footer,
    header,
    hgroup,
    menu,
    nav,
    output,
    ruby,
    section,
    summary,
    time,
    mark,
    audio,
    video {
      margin: 0;
      padding: 0;
      border: 0;
      font-size: 100%;
      vertical-align: baseline;
    }

    /* 글로벌 스타일 : 예전 버전 브라우져를 위한 HTML5 디스플레이 리셋 */
    article,
    aside,
    details,
    figcaption,
    figure,
    footer,
    header,
    hgroup,
    menu,
    nav,
    section {
      display: block;
    }

    body {
      line-height: 1;
    }

    ol,
    ul {
      list-style: none;
    }

    blockquote,
    q {
      quotes: none;
    }

    blockquote:before,
    blockquote:after,
    q:before,
    q:after {
      content: '';
      content: none;
    }

    table {
      border-collapse: collapse;
      border-spacing: 0;
    }

    /* 컴포넌트 스타일 */
    .component {
      display: flex;
      flex-direction: row;
      width: 100%;
      height: 100%;
      ;
    }

    .component aside {
      flex-shrink: 0;
      width: 320px;
      height: calc(100vh - 64px);
      background-color: #333;
      overflow-y: scroll;
    }

    .component .contents {
      flex-grow: 1;
      height: 100%;
      overflow-y: scroll;
      padding: 20px;
    }

    .component .contents .inputContainer {
      display: inline-block;
      padding: 32px;
      margin: 4px;
      background-color: white;
      border: 1px solid #dddddd;
      border-radius: 8px;
    }

    .component .contents .inputContainer td {
      padding: 4px 8px;
    }

    .component .contents .inputContainer td input {
      border: 1px solid #ccc;
      height: 20px;
      line-height: 20px;
    }

    .component .contents .inputContainer td input[type=number] {
      width: 44px;
    }

    .component .contents .inputContainer td select {
      border: 1px solid #ccc;
      height: 24px;
      line-height: 24px;
    }

    .component .contents .inputContainer ul {
      width: 300px;
      margin-top: 12px;
    }

    .component .contents .inputContainer ul li {
      display: inline-block;
      margin: 0 6px 6px 0;
      padding: 6px 8px;
      background-color: #eee;
      border: 1px solid #eee;
      border-radius: 4px;
      text-transform: capitalize;
    }

    .component .contents .inputContainer ul li .count {
      display: inline-block;
      color: white;
      background-color: dodgerblue;
      font-weight: bold;
      padding: 2px 4px;
      border-radius: 4px;
      margin: 0 6px;
    }

    .component .contents .inputContainer ul li .increase {
      cursor: pointer;
    }

    .component .contents .inputContainer .buttons {
      margin-top: 24px;
      text-align: center;
    }

    .component .contents .inputContainer .buttons button {
      margin-right: 8px;
      padding: 8px 24px;
      cursor: pointer;
    }

    .component aside {
      color: white;
    }

    .component aside>ul>li {
      padding: 16px 20px;
      border-bottom: 2px solid #555;
    }

    .component aside .teamItemTitle {
      font-weight: bold;
      font-size: 1.1em;
      cursor: pointer;
    }

    .component aside .teamMembers {
      margin-top: 8px;
      padding-left: 6px;
      color: #BBB;
    }

    .component aside .teamMembers li {
      padding: 10px 4px;
      border-bottom: 1px solid #444;
      cursor: pointer;
    }

    .component aside .teamMembers li:last-child {
      border-bottom: 0;
    }

    .component aside .face {
      display: inline-block;
      width: 32px;
    }

    .component aside .bloodType {
      display: inline-block;
      width: 28px;
      margin-right: 20px;
      padding: 4px 0;
      text-align: center;
      font-size: 0.9em;
      font-weight: bold;
      color: #777;
      background-color: #222;
      border-radius: 4px;
    }

    .component aside .peopleName {
      cursor: pointer;
    }

    .component aside .roleItem {
      text-transform: capitalize;
      cursor: pointer;
    }

    .component aside .roleItem span {
      display: inline-block;
      width: 32px;
    }

    .component .contents .roleWrapper {
      display: inline-block;
      margin: 8px;
      padding: 16px 24px;
      border-radius: 8px;
      background-color: white;
      border: 2px solid #ddd
    }

    .component .contents .roleWrapper h2 {
      font-size: 1.8em;
      margin-bottom: 6px;
      text-transform: capitalize;
    }

    .component .contents .roleWrapper .requirement {
      margin-bottom: 24px;
      color: gray;
    }

    .component .contents .roleWrapper .requirement span {
      color: dodgerblue;
      text-transform: capitalize;
    }

    .component .contents .roleWrapper h3 {
      color: #555;
      font-size: 1.2em;
      margin: 16px 0 8px 0;
    }

    .component .contents .roleWrapper li {
      display: inline-block;
      margin: 0 6px 6px 0;
      padding: 6px;
      background-color: #eee;
      border: 1px solid #eee;
      border-radius: 4px;
    }

    /* App 스타일 */
    body {
      background-color: #eee;
    }

    header {
      height: 64px;
      line-height: 64px;
      background-color: white;
    }

    h1 {
      display: inline-block;
      font-size: 1.6em;
      margin: 0 24px;
    }

    nav {
      display: inline-block;
    }

    nav ul {
      display: flex;
      flex-direction: row;
    }

    nav ul li {
      margin-left: 16px;
      cursor: pointer;
    }

    nav ul li.on,
    nav ul li:hover {
      color: dodgerblue;
      text-decoration: underline;
    }

    main {
      height: calc(100vh - 64px);
      overflow: hidden;
    }
  </style>

1. 테스트
  $ cd app1
  $ npm run serve
  http://localhost:8080
