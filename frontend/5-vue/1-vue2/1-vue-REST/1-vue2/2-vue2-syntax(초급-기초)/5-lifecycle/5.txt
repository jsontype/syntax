[라이프사이클 다이어그램: 생명주기]

1. 라이프사이클 다이어그램
  뷰 인스턴스가 생성되면 이 라이프사이클을 지나가게 된다.
  https://vuejs.org/v2/guide/instance.html#Lifecycle-Diagram
  뷰 인스턴스가 처음 태어나서 여러가지 일을 겪고나서 마지막에 죽을 때까지 일어나는 일이다.

  new Vue() : 새로운 뷰를 선언하면,
  beforeCreate : 이벤트와 라이프사이클을 초기화하기전에 이 안의 메소드들을 처리합니다.
  created : 초기 데이터로 인스턴스가 생성될 때 이 안의 메소드들을 처리합니다. 이후에 this에 접근이 가능해집니다.
  beforeMount : el 옵션과 template 옵션을 있으면 받고, DOM을 마운트 시키기 전에 이 안의 메소드들을 실행합니다.
  mounted : DOM을 마운트하면서 이 안의 메소드들을 실행합니다.
  beforeupdate : 데이터가 업데이트 되기전에 이 안의 메소드들을 처리합니다.
  update : 업데이트가 될 때 이 안의 메소드들을 같이 처리합니다.
  beforeDestory : 이 인스턴스가 사용이 끝나고, 빠져나가기 전에, 이 메소드들을 처리합니다. 
  Destory : 인스턴스가 파괴가 되었을 때, 이 메소드들을 처리합니다.

1. src/App.vue : InputField에서 일어나는 일을 라이프사이클로 파악할 수 있게 정리
  <template>
    <div>
      <h1>This is home.</h1>
      <form action="">
        <InputField :name="name" @update-name="updateName" />
        <button>Submit</button>
      </form>
      {{ name }}
    </div>
  </template>

  <script>
  import InputField from "@/components/InputField.vue"

  export default {
    name: "App",
    components: {
      InputField,
    },
    data() {
      return {
        name: 'D.Yang',
      }
    },

    // <!-- 생명주기 START -->
    beforeCreate() {
      console.log('beforeCreate', this.name) // inital mount 전 : 아직 data()에 접근 불가
    },
    created() {
      console.log('create', this.name) // inital mount 후 : 이제 data()에 접근 가능해짐
    },

    beforeMount() {
      alert('beforeMount') // DOM 마운트 전에 얼럿이 뜸
    },
    mounted() {
      alert('mounted') // DOM 마운트 후에 얼럿이 뜸
    },

    beforeUpdated() {
      alert('beforeUpdated') // Submit을 눌렀을 때 데이터가 바뀌는데, 바뀌기전에 이 훅이 실행됨
    },
    updated() {
      alert('updated') // 데이터가 바뀐 후에 이 훅이 실행됨, ok를 누르면 this.name이 바뀜
    },

    beforeDestroy() {
      alert('beforeDestroy') // 타 vue 컴포넌트로 넘어가게 되면 실행
    },
    destroyed() {
      alert('destroyed') // Home을 끈 뒤 실행. 이벤트리스너(클릭내용, 카피페 클립보드 등)를 삭제해준다던지, 데이터를 초기화해준다던지 등을 처리할 때 사용
    },

    methods: {
      updateName(name) {
        this.name = name
      }
    }
  }
  </script>

  <style scoped>
  h1 {
    color: red;
  }
  </style>

1. 테스트 : 얼럿 확인하면서 라이프사이클 확인
  $ cd app1
  $ npm run serve
