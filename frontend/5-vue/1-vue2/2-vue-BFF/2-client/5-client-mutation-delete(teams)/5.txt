[항목 삭제하기]

1. 사전준비 : 이번에는 코드가 길기 때문에, 교육시 손코딩 하지말고 다음 폴더에 app1을 카피 페이스트한 뒤 VSCode상에서 파일 차분 보면서 설명한다.
1. 사전준비 : server 앱을 켜둔다.
1. 사전준비 : 프로젝트를 새로 깔지 않고, 이전 챕터에서의 코드를 그대로 카피해서 가지고 온다.



1. src/views/Teams.vue 수정 : GraphQL 서버로부터 id에 해당하는 컨텐츠 하나를 삭제하는 기능 추가(DELETE_TEAM gql과 data, v-on:click="deleteTeam(contentId)" 버튼 이벤트, deleteTeam 메소드 추가)
  <template>
    <div id="teams" class="component">
      <aside>
        <ApolloQuery :query="GET_TEAMS">
          <template slot-scope="{ result: { loading, error, data } }">
            <p v-if="loading" class="loading">Loading...</p>
            <p v-if="error" class="error">Error :(</p>
            <aside v-else>
              <ul>
                <li v-for="team in data.teams" :key="team.id">
                  <span class="teamItemTitle" @click="selectTeam(team.id)">Team {{team.id}} : {{team.manager}}'s</span>
                  <ul class="teamMembers">
                    <li v-for="member in team.members" :key="member.id">
                      {{roleIcons[member.role]}} {{member.first_name}} {{member.last_name}}
                    </li>
                  </ul>
                </li>
              </ul>
            </aside>
          </template>
        </ApolloQuery>
      </aside>
      <section class="contents">
        <div v-if="selectedTeam" class="inputContainer">
          <table>
            <tr v-if="contentId !== 0">
              <td>Id</td>
              <td>{{contentId}}</td>
            </tr>
            <tr>
              <td>Manager</td>
              <td>
                <input type="text" name="manager" v-model="inputs.manager">
              </td>
            </tr>
            <tr>
              <td>Office</td>
              <td>
                <input type="text" name="office" v-model="inputs.office">
              </td>
            </tr>
            <tr>
              <td>Extension Number</td>
              <td>
                <input type="text" name="extension_number" v-model="inputs.extension_number">
              </td>
            </tr>
            <tr>
              <td>Mascot</td>
              <td>
                <input type="text" name="mascot" v-model="inputs.mascot">
              </td>
            </tr>
            <tr>
              <td>Cleaning Duty</td>
              <td>
                <input type="text" name="cleaning_duty" v-model="inputs.cleaning_duty">
              </td>
            </tr>
            <tr>
              <td>Project</td>
              <td>
                <input type="text" name="project" v-model="inputs.project">
              </td>
            </tr>
          </table>
            <div class="buttons" v-if="contentId === 0">
              <button>Submit</button>
            </div>
            <div class="buttons" v-else>
              <button>Modify</button>
              <button v-on:click="deleteTeam(contentId)">Delete</button>
              <button v-on:click="resetContentId">New</button>
            </div>        
        </div>
      </section>
    </div>
  </template>

  <script>
  import { ApolloProvider } from 'vue-apollo'
  import ApolloClient from 'apollo-boost'
  import gql from 'graphql-tag'

  const client = new ApolloClient({
    uri: 'http://localhost:4000/', // GraphQL Server URL
  })

  const GET_TEAMS = gql`
    query GetTeams {
      teams {
        id
        manager
        members {
          id
          first_name
          last_name
          role
        }
      }
    }
  `

  const GET_TEAM = gql`
    query GetTeam($id: ID!) {
      team(id: $id) {
        id
        manager
        office
        extension_number
        mascot
        cleaning_duty
        project
      }
    }
  `

  const DELETE_TEAM = gql`
    mutation DeleteTeam($id: ID!) {
      deleteTeam(id: $id) {
        id
      }
    }
  `

  export default {
    provide: () => ({
      apolloProvider: new ApolloProvider({ defaultClient: client }),
    }),
    data () {
      return {
        contentId: 0,
        inputs: {
          manager: "",
          office: "",
          extension_number: "",
          mascot: "",
          cleaning_duty: "",
          project: "",
        },
        roleIcons: {
          developer: "💻",
          designer: "🎨",
          planner: "📝",
        },
        selectedTeam: null,
        GET_TEAMS,
        GET_TEAM,
        DELETE_TEAM,
      }
    },
    methods: {
      async selectTeam (id) {
        this.contentId = id
        const { data } = await this.$apollo.query({ query: this.GET_TEAM, variables: { id } })
        this.selectedTeam = data.team
        this.inputs = {
          manager: data.team.manager,
          office: data.team.office,
          extension_number: data.team.extension_number,
          mascot: data.team.mascot,
          cleaning_duty: data.team.cleaning_duty,
          project: data.team.project,
        }
      },
      resetContentId() {
        this.contentId = 0
        this.inputs = {
          manager: "",
          office: "",
          extension_number: "",
          mascot: "",
          cleaning_duty: "",
          project: "",
        }
      },
      async deleteTeam (id) {
        if (window.confirm('이 항목을 삭제하시겠습니까?')) {
          await this.$apollo.mutate({ 
            mutation: this.DELETE_TEAM, 
            variables: { id },
            refetchQueries: [{ query: this.GET_TEAMS }] // 삭제 후 팀 목록을 업데이트
          })
          this.resetContentId() // 삭제 후 입력 필드를 초기화
        }
      },
    }
  }
  </script>



1. 테스트 : Teams 화면에서 삭제 버튼을 누른 뒤 반영까지 잘 되나 확인
  BFF server 앱 켜져있는지 확인하고, 꺼져있다면 npm start로 실행시켜두고 시작한다.
  $ cd app1
  $ npm run serve
  http://localhost:3000
  상단의 Teams 메뉴 클릭
  Team 1 : Mandy Warren's 클릭해서, 컨텐츠 인풋에 팀 정보로 채워지나 확인
  "Delete" 버튼 눌러보기
  "이 항목을 삭제하시겠습니까?" 컨펌창에서 "확인" 버튼 클릭
  Team 1이 삭제된 것이 사이드바에서 반영되는지 확인  
