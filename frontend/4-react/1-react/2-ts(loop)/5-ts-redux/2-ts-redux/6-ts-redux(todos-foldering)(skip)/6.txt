[todos 리덕스 모듈 여러파일로 분리하기]

1. todos 리덕스 모듈 여러파일로 분리하기
    현재 todos 리덕스 모듈은 아직은 코드가 그렇게 긴 것은 아니지만, 
    현재 이 파일에서 액션 type, 액션 생성 함수, 액션 객체들의 타입, 상태의 타입, 리듀서를 선언하고 있기 때문에,
    나중에 액션의 수가 더 많아지면 코드가 너무 길어지게 될 것이다.
    그러면 개발하면서 뭔가 찾을 때 스크롤을 많이 해야 돼서 생산성을 저하시킬 수 있다.

    그렇다고 해서 src 디렉터리안에서 actions 디렉터리, reducers 디렉터리를 따로 분류해서 하는 것은
    서로 너무 멀리 떨어져있기 때문에 오히려 더 불편해질수도 있다는 단점이 있다.
    다음과 같은 구조를 한번 상상해보자.
        actions
            todos
            counter
        components
            todos
            counter
        containers
            todos
            counter
        reducers
            todos
            counter
        types
            todos
            counter
        styles
            todos
            counter
        hooks
            todos
            counter

    여전히 찾기에 불편한 폴더 구조이다.
    위와 같은 형식으로 분리시키는 것 대신에, 더 좋은 방식은, todos 라는 디렉터리를 만들어서 그안에 여러 개의 파일을 작성하는 것이다.
    modules
        todos
            actions.ts
            index.tsx
            reducer.ts
            types.ts
            style.css
            hooks.ts
        counter.ts # 파일이 그렇게 길지 않은 경우 그냥 파일 하나로 작성

    이런 구조로 작성하면 더 편할 것이다.
    이렇게 직접 폴더 구조를 변경해보자.



1. src/modules/todos/actions.ts 생성 : 액션 분리
    import { createAction } from 'typesafe-actions'
    // todos.ts 모듈 파일을 여러개로 나누면서, 서로 떨어졌지만 여전히 필요한 것은 따로 임포트해준다.
    import { Todo } from './types'

    /* 액션 타입 선언 : 리듀서에서 사용 할 수 있도록 export를 붙여준다. */
    export const ADD_TODO = 'todos/ADD_TODO'
    export const TOGGLE_TODO = 'todos/TOGGLE_TODO'
    export const REMOVE_TODO = 'todos/REMOVE_TODO'

    /* 고유 ID 값 선언 : 새로운 항목을 추가 할 때 사용할 값 */
    let nextId = 1

    /* 액션 생성함수 선언 : 액션 생성 함수를 createAction을 사용해서 한 줄로 쉽게 작성 할 수 있게 되었다. */
    export const addTodo = createAction(ADD_TODO, (text: string) => ({
        id: nextId++,
        text: text,
    }))<Todo>()
    export const toggleTodo = createAction(TOGGLE_TODO)<number>() // payload가 그대로 들어가는 액션생성함수 선언은 이렇게 간단하다.
    export const removeTodo = createAction(REMOVE_TODO)<number>() // payload가 그대로 들어가는 액션생성함수 선언은 이렇게 간단하다.



1. src/modules/todos/types.ts 생성 : 타입 정의 분리 
    import { ActionType } from 'typesafe-actions'
    // todos.ts 모듈 파일을 여러개로 나누면서, 서로 떨어졌지만 여전히 필요한 것은 따로 임포트해준다.
    import * as actions from './actions'

    /* 액션 객체 타입 준비 : 한번에 모두 import 해와서 actions에 담았기 때문에, 액션의 종류가 많아져도 이 부분은 한 줄로 작성 할 수 있다. */
    export type TodosAction = ActionType<typeof actions>

    /* State 타입 선언 */
    export type Todo = {
        id: number
        text: string
        done: boolean
    }
    export type TodosState = Todo[] // 이 모듈에서 관리할 State는, "Todo 객체로 이루어진 배열 타입"이라고 선언한 것이다.



1. src/modules/todos/reducer.ts 생성 : 리듀서 분리
    import { createReducer } from 'typesafe-actions'
    // todos.ts 모듈 파일을 여러개로 나누면서, 서로 떨어졌지만 여전히 필요한 것은 따로 임포트해준다.
    import { TodosState, TodosAction } from './types'
    import { ADD_TODO, TOGGLE_TODO, REMOVE_TODO } from './actions'

    /* State 초기값 선언 */
    const initialState: TodosState = []

    /* 리듀서 선언 : 아래의 처리를 통해 createReducer에서 리듀서를 switch문으로 직접 만드는 형태가 아닌 객체 형태로 작성할 수 있고, 따라서 코드가 훨씬 깔끔해진다. */
    // createReducer : 리듀서를 쉽게 만들 수 있게 해주는 함수
    // <TodosState, TodosAction> : 리듀서에서 관리할 State, 리듀서에서 처리 할 모든 액션 객체들의 타입을 Generics로 정의
    const reducer = createReducer<TodosState, TodosAction>(initialState, {
        [ADD_TODO]: (state, action) => // 액션의 타입은 유추할 수 있다. 
            state.concat({
                ...action.payload, // id, text가 이 안에 들어간다.
                done: false
            }),
        // { payload: id }와 같이 비구조화 할당을 활용하여 payload 값의 이름을 바꿀 수 있다.
        [TOGGLE_TODO]: (state, { payload: id }) =>
            state.map(todo => (todo.id === id ? { ...todo, done: !todo.done } : todo)),
        [REMOVE_TODO]: (state, { payload: id }) =>
            state.filter(todo => todo.id !== id)
    })

    export default reducer



1. src/modules/todos/index.ts 생성 : todos.ts를 불러와서 사용하던 코드들이 (컨테이너 및 루트 리듀서) 별도의 import 경로 수정 없이 제대로 동작하게 하기 위함입니다.
    export { default } from './reducer' // reducer를 불러와서 default로 내보내겠다는 의미
    export * from './actions' // actions를 불러와서 같은 이름들로 내보내겠다는 의미
    export * from './types' // types를 불러와서 같은 이름들로 내보내겠다는 의미


    
1. src/modules/todos.ts 삭제 : 기존 리덕스 모듈 삭제
    삭제 후, 개발서버를 종료 후 다시 실행해해주면,
    이제 modules의 todos 디렉터리가 기존의 todos.ts를 완벽히 대체하게 된다.



1. 테스트 : 동일하게 동작하는지 확인
    $ cd app1
    $ npm start
