[TypeScript와 Context API 함께 쓰기]

1. TypeScript와 Context API 함께 쓰기
    이번에는 TypeScript를 도입한 상태에서 Context API로 글로벌 State 관리를 해보겠다.
    과정은 기존과 똑같다. State를 위한 Context를 만들고, Dispatch를 위한 Context를 만들 것이다.
    그리고, 해당 Context에서 관리하고 있는 값을 쉽게 조회할 수 있도록 커스텀 Hooks도 작성 할 것이다.

    요약하면, useReducer만을 이용해 만든 기존의 Settings 하나로 된 파일을,
    Context API도 함께 이용해 Settings와 SettingsContext로 나누는 것이다.
    


1. src/SettingsContext.tsx 생성 : 기존에 useReducer로 작성했던 Settings 컴포넌트를 기반으로 SettingsContext를 만들어보기
    import React, { useReducer, useContext, createContext, Dispatch } from 'react'

    /* 필요한 타입들을 미리 선언 */
        
    // Color의 데이터타입
    type Color = 'red' | 'orange' | 'yellow'

    // State의 데이터타입
    type State = {
        count: number
        text: string
        color: Color
        isGood: boolean
    }

    // 액션타입 : 여기에 액션타입(type: 'SET_COUNT' 등) 외의 값을 넣게 되면, 각 변수들(count 등)에게 데이터타입을 같이 정의해야한다.
    type Action =
        | { type: 'SET_COUNT', count: number }
        | { type: 'SET_TEXT', text: string }
        | { type: 'SET_COLOR', color: Color }
        | { type: 'TOGGLE_GOOD' }

    // 디스패치 타입 : 액션들의 타입을 Dispatch의 Generics로 설정
    type SettingsDispatch = Dispatch<Action>

    // Context 만들기
    const SettingsStateContext = createContext<State | null>(null)
    const SettingsDispatchContext = createContext<SettingsDispatch | null>(null)

    // 리듀서
    function reducer(state: State, action: Action): State {
        switch (action.type) {
            case 'SET_COUNT':
                return {
                    ...state,
                    count: action.count // count가 자동완성되며, number 타입인 걸 알 수 있다.
                }
            case 'SET_TEXT':
                return {
                    ...state,
                    text: action.text // text가 자동완성되며, string 타입인 걸 알 수 있다.
                }
            case 'SET_COLOR':
                return {
                    ...state,
                    color: action.color // color가 자동완성되며 color가 Color 타입인 걸 알 수 있다.
                }
            case 'TOGGLE_GOOD':
                return {
                    ...state,
                    isGood: !state.isGood
                }
            default:
            throw new Error('Unhandled action')
        }
    }

    // SettingsProvider에서 useReduer를 사용하고, SettingsStateContext.Provider와 SettingsDispatchContext.Provider로 children을 감싸서 반환한다.
    export function SettingsContext({ children }: { children: React.ReactNode }) {
        const [state, dispatch] = useReducer(reducer, {
            count: 0,
            text: 'hello',
            color: 'red',
            isGood: true
        })

        return (
            <SettingsStateContext.Provider value={state}>
                <SettingsDispatchContext.Provider value={dispatch}>
                    {children}
                </SettingsDispatchContext.Provider>
            </SettingsStateContext.Provider>
        )
    }

    /*
        1. 커스텀 Hooks 만들기
            커스텀 Hooks인 useSettingsState와 useSettingsDispatch에서는 null 체킹을 해주는것이 매우 중요하다.
            만약에 Context가 지니고 있는 값이 유효하지 않으면 에러를 발생시는 코드를 작성해주었는데,
            이를 통해 추후 Hooks를 사용하게 될 때 각 Hooks 함수들이 반환하는 값이 언제나 유효하다는 것을 보장할 수 있다.

            null 체킹을 하는 경우, useSettingsState의 결과값 타입은 State가 되고,
            null 체킹을 하지 않는 경우, useSettingsState의 결과값의 타입은 State | null이 된다.
    */

    // state를 쉽게 사용하기 위한 커스텀 Hooks
    export function useSettingsState() {
        const state = useContext(SettingsStateContext)
        if (!state) throw new Error('Cannot find SettingsProvider') // 유효하지 않을땐 에러를 발생
        return state
    }

    // dispatch를 쉽게 사용하기 위한 커스텀 Hooks
    export function useSettingsDispatch() {    
        const dispatch = useContext(SettingsDispatchContext)
        if (!dispatch) throw new Error('Cannot find SettingsProvider') // 유효하지 않을땐 에러를 발생
        return dispatch
    }



1. src/App.js 수정 : Settings를 SettingsContext로 감싸기
    import React from 'react'
    import Settings from './Settings'
    // SettingsContext 임포트
    import { SettingsContext } from './SettingsContext'

    const App: React.FC = () => {
        return (
            // Context로 감싸면, SettingsContext 컴포넌트에서 직접 만든 커스텀 Hooks를 사용하여 state와 dispatch를 쉽게 조회하여 사용할 수 있다.
            <SettingsContext>
                <Settings />
            </SettingsContext>
        )
    }

    export default App



1. src/Settings.tsx
    // 1. State, Dispatch를 가져오는 커스텀 Hooks 임포트
    import { useSettingsState, useSettingsDispatch } from './SettingsContext'

    // 2. Settings 컴포넌트 수정
    export default function Settings() {
        // ★ Context API를 쓰는 이유 : 이렇게 쉽게 state와 dispatch를 조회할 수 있어 개발생산성이 향상된다.
        const state = useSettingsState()
        const dispatch = useSettingsDispatch()

        // Context의 커스텀 Hooks안에 액션타입 외의 값들에 데이터타입 정의를 했기 때문에, 
        // 디스패치하는 곳에서 해당 변수를 넣지 않거나, 데이터타입이 다를 때 에러를 발생해준다.
        const setCount = () => dispatch({ type: 'SET_COUNT', count: 5 }) // count를 넣지 않거나, 데이터타입이 다를 경우 에러발생
        const setText = () => dispatch({ type: 'SET_TEXT', text: 'bye' }) // text를 넣지 않거나, 데이터타입이 다를 경우 에러발생
        const setColor = () => dispatch({ type: 'SET_COLOR', color: 'orange' }) // orange를 넣지 않거나, 데이터타입이 다를 경우 에러발생
        const toggleGood = () => dispatch({ type: 'TOGGLE_GOOD' })

        // 렌더링
        return (
            <div>
                <p>
                    <code>count: </code> {state.count}
                </p>
                <p>
                    <code>text: </code> {state.text}
                </p>
                <p>
                    <code>color: </code> {state.color}
                </p>
                <p>
                    <code>isGood: </code> {state.isGood ? 'true' : 'false'}
                </p>
                <div>
                    <button onClick={setCount}>SET_COUNT</button>
                    <button onClick={setText}>SET_TEXT</button>
                    <button onClick={setColor}>SET_COLOR</button>
                    <button onClick={toggleGood}>TOGGLE_GOOD</button>
                </div>
            </div>
        )
    }



1. 정리    
    이렇게 Context API로 구현하면,
    Context 안에 들어있는 State를 조회 할 때, 
    그리고 새로운 액션을 Dispatch 해야 할 때,
    쉽게 조회하여 사용할 수 있으므로 개발 생산성을 높여줄 수 있다. (src/Settings.tsx의 ★ 부분 참조)



1. 테스트 : Settings가 똑같이 작동하는지 확인
    $ cd app1
    $ npm start
