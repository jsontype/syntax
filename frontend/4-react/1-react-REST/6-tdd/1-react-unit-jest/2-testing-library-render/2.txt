[@testing-library의 설치 및 사용 - render 함수]

1. CRA로 만들어진 리액트 초기앱을 가져온다.

1. @testing-library를 프로젝트에 설치
  $ npm i @testing-library/react @testing-library/jest-dom
  $ npm i -D --exact jest-watch-typeahead@0.6.5
  $ npm audit fix // critical 취약점 해결

1. src/Profile.js : 테스트 대상인 Profile 컴포넌트를 작성
  import React from 'react'

  export default function Profile ({ username, name }) {
    return (
      <div>
        <b>{username}</b>&nbsp;
        <span>({name})</span>
      </div>
    )
  }

1. src/App.js : 테스트 대상인 Profile 컴포넌트를 호출
  import React from 'react'
  import Profile from './Profile'

  export default function App () {
    return (
      <div className="app">
        <Profile username="Jsontyper" name="D.Yang" />
      </div>
    )
  }

1. src/Profile.spec.js : Profile 컴포넌트를 테스트하기 위한 테스트 코드를 작성 (* 가운데 spec 대신 test로 해도 된다. 그리고 테스트케이스의 경우 it 대신 test로 써도 된다.)
  import React from 'react'
  /*
    render 함수:
      @testing-library/react 에서 컴포넌트를 렌더링할 때에는 render()라는 함수를 사용한다.
      이 함수가 호출되면 그 결과물에는 DOM을 선택 할 수 있는 다양한 쿼리들과 container가 포함되어 있는데,
      여기서 container는 해당 컴포넌트의 최상위 DOM을 가르킨다.
      이를 가지고 스냅샷 테스팅을 할 수도 있다.
      
    스냅샷 테스팅(snapshot testing):
      어떤 기능의 예상 결과를 미리 정확히 포착해두고 실제 결과에 비교하는 테스트 기법이다.
      여기서는 렌더링된 결과가 이전에 렌더링한 결과와 일치하는지 확인하는 작업이다.
      한번이라도 npm run test를 진행한다면, 
      그 렌더링 결과가 src/__snapshots__/Profile.spec.js.snap 안에 코드로 자동저장이 되며,
      이를 스냅샷이라고 부른다.
      그리고 다음에 테스트를 할 때 이 스냅샷과 일치하지 않는 렌더링이 일어나면 테스트가 실패하게 된다.
      * 만일, 스냅샷을 업데이트하고 싶다면 테스트 콘솔창에서 u 키를 누르면 된다.
  */
  import { render } from '@testing-library/react'
  import Profile from './Profile'

  describe('<Profile />의 테스트', () => {
    it('이전 테스트시 찍힌 스냅샷과 현재 스냅샷이 일치하는가?', () => {
      const utils = render(<Profile username="Jsontype" name="D.Yang" />)
      expect(utils.container).toMatchSnapshot()
    })
    it('username와 name 프롭스를 제대로 표시하는가?', () => {
      const utils = render(<Profile username="Jsontype" name="D.Yang" />)
      utils.getByText('Jsontype') // 해당 텍스트를 가진 엘리먼트가 있는지 확인
      utils.getByText('(D.Yang)') // 해당 텍스트를 가진 엘리먼트가 있는지 확인
      utils.getByText(/D.Y/); // 정규식 /D.Y/ 을 통과하는 엘리먼트가 있는지 확인
    })
  })

1. 테스트
  $ npm run test
  a키
  테스트가 잘 통과하는지 확인



[@testing-library의 사용 - render의 리턴값인 query 함수]

1. 사전준비 : 프로젝트를 새로 깔지 않고, 이전 챕터에서의 코드를 그대로 카피해서 가지고 온다.

1. 다양한 Varient + Query 함수
  render 함수를 실행하고 나면 그 결과물 안에는 다양한 Varient + Query 함수들이 있다.
  예를 들면 Varient(getBy) + Query(ByText) = Query 함수(getByText)와 같은 식이다.

1. Varient의 종류
  getBy : getBy* 로 시작하는 쿼리는 조건에 일치하는 DOM 엘리먼트 하나를 선택한다. 만약에 없으면 에러가 발생한다.
  getAllBy : getAllBy* 로 시작하는 쿼리는 조건에 일치하는 DOM 엘리먼트 여러개를 선택한다. 만약에 하나도 없으면 에러가 발생한다.
  queryBy : queryBy* 로 시작하는 쿼리는 조건에 일치하는 DOM 엘리먼트 하나를 선택한다. 만약에 존재하지 않아도 에러가 발생하지 않는다.
  queryAllBy : queryAllBy* 로 시작하는 쿼리는 조건에 일치하는 DOM 엘리먼트 여러개를 선택한다. 만약에 존재하지 않아도 에러가 발생하지 않는다.
  findBy : findBy* 로 시작하는 쿼리는 조건에 일치하는 DOM 엘리먼트 하나가 나타날 때 까지 기다렸다가 해당 DOM을 선택하는 Promise를 반환한다. 기본 timeout 인 4500ms 이후에도 나타나지 않으면 에러가 발생한다.
  findAllBy : findBy* 로 시작하는 쿼리는 조건에 일치하는 DOM 엘리먼트 여러개가 나타날 때 까지 기다렸다가 해당 DOM을 선택하는 Promise를 반환한다. 기본 timeout 인 4500ms 이후에도 나타나지 않으면 에러가 발생한다.

1. Queries의 종류
  ByLabelText : ByLabelText 는 label 이 있는 input 의 label 내용으로 input을 선택한다.
    <label for="username-input">아이디</label>
    <input id="username-input" />
    const inputNode = getByLabelText('아이디');
  ByPlaceholderText : ByPlaceholderText 는 placeholder 값으로 input 및 textarea를 선택한다.
    <input placeholder="아이디" />;
    const inputNode = getByPlaceholderText('아이디');
  ByText : ByText는 엘리먼트가 가지고 있는 텍스트 값으로 DOM을 선택한다.
    <div>Hello World!</div>;
    const div = getByText('Hello World!');
    const div = getByText(/^Hello/); // 참고로, 텍스트 값에 정규식을 넣어도 작동한다.
  ByAltText : ByAltText 는 alt 속성을 가지고 있는 엘리먼트(주로 img)를 선택한다.
    <img src="/awesome.png" alt="awesome image" />;
    const imgAwesome = getByAltText('awesomse image');  
  ByTitle : ByTitle은 title 속성을 가지고 있는 DOM 혹은 title 엘리먼트를 지니고있는 SVG를 선택 할 때 사용한다.
    title 속성은 html 에서 툴팁을 보여줘야 하는 상황에 사용하곤 한다.
    <p>
      <span title="React">리액트</span>는 짱 멋진 라이브러리다.
    </p>
    <svg>
      <title>Delete</title>
      <g><path/></g>
    </svg>
    const spanReact = getByTitle('React');
    const svgDelete = getByTitle('Delete');
  ByDisplayValue : ByDisplayValue는 input, textarea, select 가 지니고 있는 현재 값을 가지고 엘리먼트를 선택한다.
    <input value="text" />;
    const input = getByDisplayValue('text');
  ByRole : ByRole은 특정 role 값을 지니고 있는 엘리먼트를 선택한다.
    <span role="button">삭제</span>;
    const spanRemove = getByRole('button');
  ByTestId : ByTestId 는 다른 방법으로 못 선택할때 사용하는 방법인데, 특정 DOM 에 직접 test 할 때 사용할 id를 달아서 선택하는 것을 의미한다.
    <div data-testid="commondiv">흔한 div</div>;
    const commonDiv = getByTestId('commondiv');
  * 주의
  camelCase가 아닙니다. 값을 설정할때 data-testid="..." 이렇게 설정해야 한다. 
  추가적으로, ByTestId 는 다른 방법으로 선택할 수 없을때에만 사용해야 한다.

1. 어떤 쿼리를 사용해야 할까?
  쿼리의 종류가 정말 많지만, 어떤 쿼리를 우선적으로 사용해야 할까?
  매뉴얼에서는 다음 우선순위를 따라서 사용하는것을 권장하고 있다.
    getByLabelText
    getByPlaceholderText
    getByText
    getByDisplayValue
    getByAltText
    getByTitle
    getByRole
    getByTestId
  그리고, DOM 의 querySelector를 사용 할 수도 있는데, 이는 지양해야 한다. 차라리 data-testid를 설정하는것이 좋다.
    const utils = render(<MyComponent />);
    const element = utils.container.querySelector('.my-class');
