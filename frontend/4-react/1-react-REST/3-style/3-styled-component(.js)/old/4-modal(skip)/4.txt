[Modal 만들기]

1. Modal은 Dialog라고도 한다.

1. src/components/Button.js 수정 : 주석을 삭제한다.

1. src/components/Dialog.js 생성 : 1~3순으로 모달창을 구현한다.
    import React from 'react'
    import styled from 'styled-components'
    import Button from './Button'

    const DarkBackground = styled.div`
        position: fixed;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        background: rgba(0, 0, 0, 0.8);
    `

    const DialogBlock = styled.div`
        width: 320px;
        padding: 1.5rem;
        background: white;
        border-radius: 2px;
        h3 {
            margin: 0;
            font-size: 1.5rem;
        }
        p {
            font-size: 1.125rem;
        }
    `

    const ButtonGroup = styled.div`
        margin-top: 3rem;
        display: flex;
        justify-content: flex-end;
        align-items: flex-end;
    `

    /* 
    2. 컴포넌트의 스타일을 특정상황에서 덮어쓰기 : 
        기존 Button을 ShortMarginButton으로 덮어씌워서, 
        모달의 "취소", "삭제" 버튼 간격을 변경할 수 있다. 
        단, 이렇게 하려면 Button안에 className props를 전달해야 하는데, 
        Button 컴포넌트의 경우에는 ...rest를 통해 전달이 되고 있다. 
    */
    const ShortMarginButton = styled(Button)`
        & {
            align-items: center;
        }    
        & + & {
            margin-left: 0.5rem;
        }
    `

    // 1. 모달 (=다이얼로그)
    function Dialog({
        title,
        children,
        confirmText,
        cancelText,
        /* 
            3. 열고 닫을 수 있는 기능을 구현 : 
            Dialog 에서 onConfirm 과 onCancel 을 props로 받아와서 각 버튼들에게 onClick 으로 설정해준다. 
            visible props도 받아와서 이 값이 false일 때 컴포넌트에서 null을 반환하도록 설정해준다.
        */
        onConfirm,
        onCancel,
        visible
    }) {
        if (!visible) return null
        return (
            <DarkBackground>
            <DialogBlock>
                <h3>{title}</h3>
                <p>{children}</p>
                <ButtonGroup>
                    {/* 
                        2. 컴포넌트의 스타일을 특정상황에서 덮어쓰기 : 
                        기존 Button을 ShortMarginButton으로 덮어씌워서, 
                        모달의 "취소", "삭제" 버튼 간격을 변경할 수 있다. 
                        단, 이렇게 하려면 Button안에 className props를 전달해야 하는데, 
                        Button 컴포넌트의 경우에는 ...rest를 통해 전달이 되고 있다. 
                    */}
                    {/* 
                        3. 열고 닫을 수 있는 기능을 구현 : 
                        Dialog 에서 onConfirm 과 onCancel 을 props로 받아와서 각 버튼들에게 onClick 으로 설정해준다. 
                        visible props도 받아와서 이 값이 false일 때 컴포넌트에서 null을 반환하도록 설정해준다.
                    */}
                    <ShortMarginButton color="gray" onClick={onCancel}>
                        {cancelText}
                    </ShortMarginButton>
                    {/* 
                        2. 컴포넌트의 스타일을 특정상황에서 덮어쓰기 : 
                        기존 Button을 ShortMarginButton으로 덮어씌워서, 
                        모달의 "취소", "삭제" 버튼 간격을 변경할 수 있다. 
                        단, 이렇게 하려면 Button안에 className props를 전달해야 하는데, 
                        Button 컴포넌트의 경우에는 ...rest를 통해 전달이 되고 있다. 
                    */}
                    {/* 
                        3. 열고 닫을 수 있는 기능을 구현 : 
                        Dialog 에서 onConfirm 과 onCancel 을 props로 받아와서 각 버튼들에게 onClick 으로 설정해준다. 
                        visible props도 받아와서 이 값이 false일 때 컴포넌트에서 null을 반환하도록 설정해준다.
                    */}
                    <ShortMarginButton color="pink" onClick={onConfirm}>
                        {confirmText}
                    </ShortMarginButton>
                </ButtonGroup>
            </DialogBlock>
            </DarkBackground>
        )
    }

    Dialog.defaultProps = {
        confirmText: '확인',
        cancelText: '취소'
    }

    export default Dialog



1. src/App.js 수정
    import React, { useState } from 'react'
    import styled, { ThemeProvider } from 'styled-components'
    import Button from './components/Button'
    // 1. 모달 (=다이얼로그)
    import Dialog from './components/Dialog'

    const AppBlock = styled.div`
        width: 512px;
        margin: 0 auto;
        margin-top: 4rem;
        border: 1px solid black;
        padding: 1rem;
    `

    const ButtonGroup = styled.div`
        & + & {
            margin-top: 1rem;
        }
        > Button {
            margin-right: 0.5rem;
            align-items: center;
        }        
    `

    function App() {
        const [isOpen, setIsOpen] = useState(false)

        const onClick = () => {
            setIsOpen(true)
        }

        const onConfirm = () => {
            console.log('확인')
            setIsOpen(false)
        }
        
        const onCancel = () => {
            console.log('취소')
            setIsOpen(false)
        }

        return (
            <ThemeProvider
                theme={{
                    palette: {
                    blue: '#228be6',
                    gray: '#495057',
                    pink: '#f06595'
                    }
                }}
            >
            <>
                <AppBlock>
                    <ButtonGroup>
                        <Button size="large">BUTTON</Button>
                        <Button>BUTTON</Button>
                        <Button size="small">BUTTON</Button>
                    </ButtonGroup>
                    <ButtonGroup>
                        <Button color="gray" size="large">
                            BUTTON
                        </Button>
                        <Button color="gray">BUTTON</Button>
                        <Button color="gray" size="small">
                            BUTTON
                        </Button>
                    </ButtonGroup>
                    <ButtonGroup>
                        <Button color="pink" size="large">
                            BUTTON
                        </Button>
                        <Button color="pink">BUTTON</Button>
                        <Button color="pink" size="small">
                            BUTTON
                        </Button>
                    </ButtonGroup>
                    <ButtonGroup>
                        <Button size="large" outline>
                            BUTTON
                        </Button>
                        <Button color="gray" outline>
                            BUTTON
                        </Button>
                        <Button color="pink" size="small" outline>
                            BUTTON
                        </Button>
                    </ButtonGroup>
                    <ButtonGroup>
                        <Button size="large" fullWidth>
                            BUTTON
                        </Button>
                        <Button size="large" color="gray" fullWidth>
                            BUTTON
                        </Button>
                        <Button size="large" color="pink" fullWidth onClick={onClick}>
                            삭제
                        </Button>
                    </ButtonGroup>
                </AppBlock>
                {/* 1. 모달 (=다이얼로그) */}
                <Dialog
                    title="정말로 삭제하시겠습니까?"
                    confirmText="삭제"
                    cancelText="취소"
                    onConfirm={onConfirm}
                    onCancel={onCancel}
                    visible={isOpen}
                >
                    데이터를 정말로 삭제하시겠습니까?
                </Dialog>
            </>
            </ThemeProvider>
        )
    }

    export default App



1. 테스트 : 콘솔로그를 열어서 모달창의 버튼을 누르는 대로 확인 / 취소가 뜨는 지 확인한다.
    cd app1
    $ npm start
