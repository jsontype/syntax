[Redux 설치]

1. react 앱 설치
    $ npx create-react-app app1

1. 불필요 부분을, 연동까지 삭제

1. redux 라이브러리를 설치
    $ cd app1
    $ npm i redux (= yarn add redux)

1. index.js 수정 : 아래 임포트를 추가
    import './exercise';

    
1. exercise.js 생성 : 주석을 하나하나 잘 읽어보자.
    // createStore는 스토어를 만들어주는 함수이다. (리액트 프로젝트에서는 단 하나의 스토어를 만든다.)
    import { createStore } from 'redux'



    /* 리덕스에서 관리 할 상태 정의 */
    const initialState = {
        counter: 0,
        text: '',
        list: []
    }



    /* 액션 타입 정의 */
    // 대문자 Snake Case로 작성한다.
    const INCREASE = 'INCREASE'
    const DECREASE = 'DECREASE'
    const CHANGE_TEXT = 'CHANGE_TEXT'
    const ADD_TO_LIST = 'ADD_TO_LIST'



    /* 액션 생성함수 정의 */
    // Camel Case로 작성한다.
    function increase() {
        return {
            // 액션 객체에는 type 값이 필수이다.
            type: INCREASE 
        }
    }

    // 화살표 함수로 작성하는 것이 더욱 코드가 간단하다.
    const decrease = () => ({
        type: DECREASE
    })

    const changeText = text => ({
        type: CHANGE_TEXT,
        // 액션 안에는 type 외에 추가적인 필드를 마음대로 넣을 수 있다.
        text
    })

    const addToList = item => ({
        type: ADD_TO_LIST,
        item
    })



    /* 리듀서 만들기 */
    // 리듀서 : 위 액션 생성함수들을 통해 만들어진 객체들을 참조하여 새로운 state를 만드는 함수
    // 주의 : 리듀서에서는 불변성을 꼭 지켜줘야 한다!
    function reducer(state = initialState, action) {
        // state 의 초기값을 initialState로 지정한다.
        switch (action.type) {
            case INCREASE:
                return {
                    ...state,
                    counter: state.counter + 1
                }
            case DECREASE:
                return {
                    ...state,
                    counter: state.counter - 1
                }
            case CHANGE_TEXT:
                return {
                    ...state,
                    text: action.text
                }
            case ADD_TO_LIST:
                return {
                    ...state,
                    list: state.list.concat(action.item)
                }
            default:
                return state
        }
    }



    /* 스토어 만들기 */
    const store = createStore(reducer)



    /* action 실행의 결과 확인 */
    // store 안에 들어있는 state가 바뀔 때 마다 호출되는 listener 함수
    const listener = () => {
        const state = store.getState()
        // store 안에 들어있는 state를 조회
        console.log(state)
    }

    // 구독을 해제하고 싶을 때는 unsubscribe() 를 호출하면 된다.
    const unsubscribe = store.subscribe(listener)

    // 아래 코드를 호출하면, 아래가 실행되기 전에 구독해지 되어 콘솔로그에 아무것도 찍히지 않는다.
    // unsubscribe()

    // 아래 코드로 액션이 디스패치되면 state가 바뀌고, 이에 따라 listener 함수가 호출되어 콘솔로그에 찍힌다. 
    store.dispatch(increase()) // counter를 1 늘린다.
    store.dispatch(decrease()) // counter를 1 줄인다.
    store.dispatch(changeText('안녕하세요')) // text를 바꾼다.
    store.dispatch(addToList({ id: 1, text: '와우' })) // list 배열을 하나 추가한다.



1. 테스트 : 열었을 때 콘솔로그에 잘 출력되는 지 확인
    $ cd app1
    $ npm start
