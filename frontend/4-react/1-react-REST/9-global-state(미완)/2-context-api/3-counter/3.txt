[Context API 사용한 전역 값 관리]

1. Context API를 쓰는 이유
  useState를 이용해서 state를 컴포넌트별로 관리하는 기존의 방식은,
  state 변수들, on~ 등의 함수들을 컴포넌트 하나에 다 관리를 한다.
  그러나, 현장에서는 3~4개 이상의 자식 컴포넌트에 props를 건네줘서 전달을 계속 해야 하는 일이 발생하게 된다.
  이는 매우 번거로울 것이다.

  context를 쓰면, 각 하위 컴포넌트들이 state와 action을 자신의 컴포넌트에서 직접 선언하지 않고, 
  각 컴포넌트가 import를 통해서 context에서 가져올 수 있어서, state를 관리하는 것을 편하게 할 수 있다.
  이것을 global state 관리라고 한다.    
  이렇게 하면, 기존에 props로 넘겨주던 복잡한 구조를 해결 할 수 있다.
  단, Context API를 쓰려면 state를 쓸 때 useState가 아닌 useReducer 방식을 사용해야한다.

  우선, Context API 를 사용해여 새로운 Context 를 만드는 방법을 알아보겠다.



1. src/App.js
  // 1. react에서 createContext, useReducer 함수를 임포트
  import React, { createContext, useReducer } from "react";
  import "./App.css";
  import Counter from "./Counter";

  // 2. context 정의 : createContext(인자값:context초기값)를 이용해서 ~Context라는 이름으로 정의
  export const CounterContext = createContext(null);

  // 3. 모듈별 초기값 정의 : 이후 추가적인 모듈이 있을 때는 밑에다 추가
  const initialState = {
    counter: { number: 0 },
  };

  // 4. 리듀서 정의
  function CounterReducer(state, action) {
    switch (action.type) {
      case "INCREMENT":
        return {
          counter: { number: state.counter.number + 1 },
        };
      case "DECREMENT":
        return {
          counter: { number: state.counter.number - 1 },
        };
      default:
        return state;
    }
  }

  export default function App() {
    // 5. useReducer를 통해서 (local state 대신) global state를 선언하고, (setState 대신) dispatch도 선언 : useReducer(리듀서함수, 초기값)
    const [CounterState, CounterDispatch] = useReducer(
      CounterReducer,
      initialState
    );

    return (
      // 6. context.Provider로 글로벌 스테이트를 사용할 컴포넌트들을 감싸기 : value에는 dispatch를 준다.
      <CounterContext.Provider value={CounterDispatch}>
        {/* 7. Counter 컴포넌트에 global state를 state 프롭으로 넘겨준다. */}
        <Counter state={CounterState} />
        <Counter state={CounterState} />
        <Counter state={CounterState} />
      </CounterContext.Provider>
    );
  }



1. src/Counter.js
  // 8. 리액트에서 useContext를 임포트
  import React, { useContext } from "react";
  // 9. context를 임포트
  import { CounterContext } from "./App";

  // 10. context 글로벌스테이트 사용하기 : number를 프롭으로 넘겨받기
  export default function Counter({ state }) {
    // 11. number 스테이트를 CounterContext안의 global state에서 가져오기
    const { number } = state.counter;
    // 12. 이벤트리스너 함수 변경 : 액션을 실행하는 dispatch 함수를 통해서 실행되도록 변경
    const dispatch = useContext(CounterContext);
    const onIncrease = () => {
      dispatch({ type: "INCREMENT" });
    };
    const onDecrease = () => {
      dispatch({ type: "DECREMENT" });
    };

    return (
      <div>
        {/* 13. 글로벌 state 변수를 렌더링 */}
        <h1>{number}</h1>
        <button onClick={onIncrease}>+1</button>
        <button onClick={onDecrease}>-1</button>
      </div>
    );
  }



1. 테스트 : 카운터 앱 여러개를 렌더링하고 +, -를 작동시켜서 동일한 state가 변경되는지 확인
  $ cd app1
  $ npm start
