[useCallback의 비용 계산]

1. 사전준비 : 프로젝트를 새로 깔지 않고, 이전 챕터에서의 코드를 그대로 카피해서 가지고 온다.

1. 최적화의 cost를 계산해야하는 이유
    최적화의 cost가 안 했을 때의 cost보다 더 높거나, 차이가 없다면, 오히려 최적화를 안 하는 게 더 나을 수 있다.
    최적화의 cost를 계산하는 방법을 소스코드를 통해 알아보자.

1. useCallback은 언제 써야할까?
    컴퓨터를 활용하는 비싼 연산(ex. 피보나치 수열, 소수 구하기 등)

1. src/App.js 수정
    import React, { useState, useCallback } from "react"

    {/* 주석토글 1, 2의 경우 */}
    const Child = React.memo(props => {
            // Child 컴포넌트가 열리는 데 연산이 별로 필요 없는 경우라고 가정해보자.
            console.log("render Child")  
            return <button onClick={props.handleClick}>Child</button>
        })

        {/* 주석토글 3, 4의 경우 */}
        // const Child = React.memo(props => {
        //   // Child 컴포넌트가 열리는데 많은 연산을 필요로 하는 경우라고 가정해보자.
        //   for (let i = 0; i < 8000; i++) { console.log("render Child") }  
        //   return <button onClick={props.handleClick}>Child</button>
        // })



    export default function App() {
        console.log("render App")
        const [count, setCount] = useState(0)

        // <주석 토글 1> : "Child 재렌더링 비용 <= useCallback 실행비용"이므로 1->2로 가는 것이 의미가 없다.
        const handleClick = () => { console.log("click") }

        // <주석 토글 2> : "Child 재렌더링 비용 <= useCallback 실행비용"이므로 1->2로 가는 것이 의미가 없다.
        // const handleClick = useCallback(() => { console.log("click") }, [])

        // <주석 토글 3> : "Child 재렌더링 비용 >>> useCallback 실행비용"이므로 3 ->4로 가서 useCallback을 사용하면 큰 효과를 얻을 수 있다.
        // const handleClick = () => { console.log("click") }

        // <주석 토글 4> : "Child 재렌더링 비용 >>> useCallback 실행비용"이므로 3 ->4로 가서 useCallback을 사용하면 큰 효과를 얻을 수 있다.
        // const handleClick = useCallback(() => { console.log("click") }, [])



        return (
            <>
                <p>Counter: {count}</p>
                <button onClick={() => setCount(count + 1)}>Increment count</button>
                <Child handleClick={handleClick} />
            </>
        )
    }



1. 테스트 : lighthouse "기간 모드, 데스크톱 기기"에 체크해서 각각의 성능점수를 테스트 해본다.
    $ cd app1
    $ npm start
