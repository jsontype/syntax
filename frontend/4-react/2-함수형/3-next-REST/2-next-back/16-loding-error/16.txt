[로딩화면, 에러화면 UI 넣기]

1. 사전준비 : 프로젝트를 새로 깔지 않고, 이전 챕터에서의 코드를 그대로 카피해서 가지고 온다.

1. src/app/bbs/detail/[id]/loading.js : 해당 폴더 내의 page.js의 로딩중에 자동 실행되는 UI 작성
  /* 
    리액트에서의 <Suspense fallback={<h4>로딩중</h4>}> 이거랑 똑같은 역할이다.
    Next.js 에선 개발자 편하라고 loading.js 파일에 적으면 자동으로 <Suspense> 로 바꿔줘서 이게 가능한 것이다.
  */
  export default function Loading() {
    return <h4>로딩중</h4>
  } 

1. src/app/bbs/detail/[id]/error.js : 해당 폴더 내의 page.js가 에러났을 시에 자동 실행되는 UI 작성
  /*
    페이지 로드시 에러가 나는 경우가 있다. 
      서버가 죽거나, DB에서 이상한 이유로 데이터를 못가져오거나 그런 경우에 에러가 발생할텐데 
      그 경우 직접 if문으로, try catch 문법으로 처리해도 되겠지만
      page.js 파일 옆에 error.js 라는 이름으로 파일 만들어둬도 된다.
      그럼 page.js에서 에러날 경우 error.js 내용을 옆의 page.js 대신 보여준다.
      중요한 페이지마다 error.js를 추가해두면 좋다.  

    error.js 페이지에는 다음과 같은 룰이 있다.
      무조건, 'use client' 컴포넌트로 만들어야한다.
      error, reset 두개의 프롭을 자동으로 사용할 수 있다. (필요없으면 빼도 됨)
      개발 서버에서만 확인이 가능하다.
  */

  "use client"

  export default function Error({ error, reset }) {
    return (
      <div>
        <h4>에러 발생 : {error}</h4>
        <button
          onClick={() => {
            reset()
          }}
        >
          다시시도
        </button>
      </div>
    )
}


1. src/app/bbs/detail/[id]/not-found.js 생성 : 404 페이지의 처리
  /*
    실은 없는 URL 입력하면 Next.js에선 자동으로 404 page not found 페이지가 출현하므로 직접 만들 필요는 없다.
    하지만 상세페이지 URL을 이상하게 입력하면 404가 아니라 에러메세지가 나온다.
    상세페이지는 /detail/(글_id) 입력해야 접속이 가능한데
    (글 _id) 부분을 틀리게 입력하는 경우 필요한 변수에 null이 담겨서 에러가 뜨는 것이다.
    아무튼 이런 경우 404라든지 다른 레이아웃을 보여주고 싶으면 
    아래처럼 if 조건문을 써서 처리를 해도 되고,
      if (result == null) {
        return <h4>404 에러 : 해당 페이지가 없음</h4>
      } else {
        return (상세페이지)
      }
    아니면 아래와 같이 not-found.js 파일을 생성해서 자동처리로 넘겨주어도 된다.
  */

  export default function NotFound() {
    return <h4>404 에러 : 해당 페이지가 없음</h4>
  }

1. src/app/bbs/detail/[id]/page.js 수정 : notFound 함수 적용
  // DB상의 _id에는 단순 string 값이 아닌 _id: ObjectId('6450863eddd0d9ea6f2236c7')의 형태가 들어가기 때문에 ObjectId 클래스를 import 해서 써줘야 한다.
  import { ObjectId } from "mongodb"
  import { connectDB } from "@/app/api/connectDB"
  import Comment from "./Comment.js"
  import { notFound } from "next/navigation"
  
  export default async function Detail(props) {
    const db = (await connectDB).db("db1")
    // props.params = 유저가 주소창에 localhost:3000/detail 뒤에 입력한 값
    const result = await db
      .collection("bbs1")
      // ObjectId 클래스를 사용해서 _id 객체를 생성: '6450863eddd0d9ea6f2236c7'를 ObjectId('6450863eddd0d9ea6f2236c7') 의 형태로 변환
      .findOne({ _id: new ObjectId(props.params.id) })
  
    if (result == null) {
      // notFound() 함수가 실행되는 순간 그 자리에 page.js 대신 not-found.js를 보여준다.
      return notFound()
    } else {
      return (
        <div>
          <h4>상세페이지</h4>
          <h4>{result.title}</h4>
          <p>{result.content}</p>
          <Comment parentsId={props.params.id} />
        </div>
      )
    }
  }
  
  

1. 보충 : loading.js, error.js, not-found.js의 위계
  error.js, loading.js, not-found.js가 특정 page.js 파일 옆에 없을 경우, 
  점점 상위폴더로 이동하면서 error.js, loading.js, not-found.js를 찾는다.
  그러면서 가장 그 폴더에 가까운 상위파일을 찾아서 적용해준다.
  그래서 유저 편의성 신경안쓰고 귀찮으면 최상단 폴더인 app 폴더에 
  error.js, loading.js, not-found.js 파일 하나씩만 만들어둬도 된다.
  즉, 세부사항을 다 작성하지 않아도 윗단계를 사용할 수 있다는 점에서
  단순 if 나 try catch를 사용하는 것보다 더 편리하다.



1. src/app/global-error.js 생성 : 해당 폴더 내의 layout.js에서 에러났을 때의 처리
  /*
    사이트 루트경로에 있는 layout.js 에서 에러났을 때 다른 UI를 보여주고 싶으면 
    그 옆에 global-error.js 파일 만들어두면 에러시 그거를 보여준다.
  */

  "use client"

  export default function Error({ error, reset }) {
    return (
      <div>
        <h4>(글로벌) 에러 발생 : {error}</h4>
        <button
          onClick={() => {
            reset()
          }}
        >
          다시시도
        </button>
      </div>
    )
  }



1. 테스트
  $ cd app1
  $ npm run dev
  http://localhost:3000/bbs/detail/6453cd240418bc590aa8ec42 에 들어가봄 (없는 글 ID. 포맷은 a string of 12 bytes or a string of 24 hex characters or an integer 포맷에 일치시켜야함)
  "로딩중"이 뜬 다음 "404 에러 : 해당 페이지가 없음"이 뜨는 지 확인 (로딩중이 너무 빨라서 안보이면 개발자도구의 Network 탭에서 Slow 3G로 설정하고 확인)
