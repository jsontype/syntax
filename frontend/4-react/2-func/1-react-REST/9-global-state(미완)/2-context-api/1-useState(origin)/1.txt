[useState로 counter 앱 만들기 복습]

1. 사전준비 : init 앱을 가지고 온다.

1. src/Counter.js 생성 : 기존 useState로 작업
  import React from "react"
  import { useState } from "react"

  export default function Counter() {
    // Local State : 지역에서만 적용이 가능하다.
    const [count, setCount] = useState(0)

    const onIncrease = () => {
      setCount((count) => count + 1)
    }
    const onDecrease = () => {
      setCount((count) => count - 1)
    }

    return (
      <div>
        <h2>{count}</h2>
        <button onClick={onIncrease}>+</button>
        <button onClick={onDecrease}>-</button>
      </div>
    )
  }

1. src/App.js 수정 : Counter 렌더링
  import "./App.css"
  import Counter from "./Counter"

  export default function App() {
    return (
      <div className="App">
        <Counter />
        <Counter />
        <Counter />
        <Counter />
        <Counter />
      </div>
    )
  }

1. 테스트 : 서로 다른 스테이트 값을 갖고 있음을 확인
  $ cd app1
  $ npm start

1. useState 로컬스테이트로 컴포넌트 작성시의 단점
  - state 값 통일이 안된다.
    App 등 부모 컴포넌트에서 props로 내릴 수는 있다. 그러나,
    먼 친척 컴포넌트간에 동일 state를 쓰려고 할때, 
    props로 연결하려면 모든 중간 컴포넌트에 다 연결해야해서 구조가 복잡해진다.
  - 함수 처리에 긴 중복이 있더라도 계속 따로따로 로직을 작성해야한다.
    useReducer(context API)나 useSelector(react-redux)를 쓰면 type만 지정하면 되서 로직을 호출하는 부분을 한줄로 변경할 수 있다.
  - ui와 action(setState 로직)간의 파일 분리가 안된다.
    useReducer(context API)나 useSelector(react-redux)를 쓰면 action 로직과 ui 함수와 분리할 수 있고, 심지어 파일을 분리해서 관리할 수도 있다.
    파일을 나눠서 관리할 수 있게 해준다는 점은,
    이후 글로벌 스테이트로 관리할 때, 로직을 쉽게 가져올 수 있게 해주는 "useContext" 훅을 사용하는 초석이 된다.
