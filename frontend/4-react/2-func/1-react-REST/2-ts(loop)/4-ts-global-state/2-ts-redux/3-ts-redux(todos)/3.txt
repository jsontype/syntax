[Redux로 선언한 State의 데이터타입 관리하기 - Todos 컴포넌트 편]

1. 투두리스트를 구현해보자.

1. src/modules/todos.ts 생성 : Todos의 Redux 모듈 작성하기 (Counter 모듈이랑 똑같다. 그냥 배열과 배열의 CRUD를 추가로 다룰 뿐이다.)
    /* Todos의 Redux 모듈 작성하기 */
    // Redux 관련 코드를 작성할 때 Ducks 패턴을 사용 할 것이다.
    // 즉, 액션타입, 액션생성함수, 리듀서를 모두 한 파일에 작성하겠다는 의미이다.

    /* 액션 타입 선언 */
    // 뒤에 as const를 붙여줌으로써 나중에 액션 객체를 만들기 위해 action.type의 값을 추론하는 과정에서
    // action.type이 "단순 string"으로 추론되지 않고 'counter/INCREASE' 와 같이 "변수안에 들어가는 실제 문자열 값"으로 추론 되도록 한다.
    // 무슨 말이냐면,
    // as const를 쓰지 않고 string으로 했을 때의 타입은 { type: string; }이 되고, 
    // as const를 쓰고 const로 했을 때의 타입은 { type: "todos/ADD_TODO"; }이 되므로, 후자가 맞다는 얘기다.
    const ADD_TODO = 'todos/ADD_TODO' as const
    const TOGGLE_TODO = 'todos/TOGGLE_TODO' as const
    const REMOVE_TODO = 'todos/REMOVE_TODO' as const

    /* 고유 ID 값 선언 : 새로운 항목을 추가 할 때 사용할 값 */
    let nextId = 1

    /* 액션 생성함수 선언 */
    export const addTodo = (text: string) => ({
        type: ADD_TODO,
        payload: {
            id: nextId++,
            text
        }
    })
    export const toggleTodo = (id: number) => ({
        type: TOGGLE_TODO,
        payload: id
    })
    export const removeTodo = (id: number) => ({
        type: REMOVE_TODO,
        payload: id
    })

    /* 액션 타입 선언 : 타입스크립트용 타입 */
    type TodosAction =
        | ReturnType<typeof addTodo>
        | ReturnType<typeof toggleTodo>
        | ReturnType<typeof removeTodo>

    /* State 타입 선언 : 타입스크립트용 타입 */
    export type Todo = {
        id: number
        text: string
        done: boolean
    }
    export type TodosState = Todo[] // 이 모듈에서 관리할 State는, "Todo 객체로 이루어진 배열 타입"이라고 선언한 것이다.

    /* State 초기값 선언 */
    const initialState: TodosState = []

    /* 리듀서 선언 */
    // 리듀서에서는 State와 함수의 리턴값이 일치하도록 작성한다.
    // 액션에서는 방금 만든 TodosAction을 타입으로 설정한다.
    export default function todos(
        state: TodosState = initialState,
        action: TodosAction
    ): TodosState {
        switch (action.type) {
            case ADD_TODO:
                return state.concat({
                    // action.payload 객체 안의 값이 모두 유추된다. * 상단부에서 액션 타입을 선언 할 떄 as const 를 하지 않으면 이 부분이 제대로 작동하지 않는다.
                    id: action.payload.id,
                    text: action.payload.text,
                    done: false
                })
            case TOGGLE_TODO:
                return state.map(todo =>
                    // payload 가 number 인 것이 유추된다. * 상단부에서 액션 타입을 선언 할 떄 as const 를 하지 않으면 이 부분이 제대로 작동하지 않는다.
                    todo.id === action.payload ? { ...todo, done: !todo.done } : todo
                )
            case REMOVE_TODO:
                // payload 가 number 인 것이 유추된다. * 상단부에서 액션 타입을 선언 할 떄 as const 를 하지 않으면 이 부분이 제대로 작동하지 않는다.
                return state.filter(todo => todo.id !== action.payload)
            default:
                return state
        }
    }



1. src/modules/index.ts 수정 : 루트리듀서 만들고, 루트 리듀서에 todos 리듀서를 등록하고, 리덕스를 프로젝트에 적용시키기
    import { combineReducers } from 'redux'
    import counter from './counter'
    import todos from './todos';

    // 루트리듀서 만들기
    const rootReducer = combineReducers({
        counter,
        todos
    })

    // 루트리듀서 익스포트 해두기
    export default rootReducer

    // 루트리듀서의 리턴값 타입 정의 : 추후 이 타입을 컨테이너 컴포넌트에서 불러와서 사용할 수 있게 익스포트 해두기
    export type RootState = ReturnType<typeof rootReducer>



1. src/index.tsx 수정 : 스토어를 만들고, Provider 컴포넌트를 사용하여 스토어를 프로젝트에 적용시키기
    counter 때와 소스코드가 똑같으므로 생략한다.



1. src/components/Todos.tsx 생성 : Todos의 프리젠테이셔널 컴포넌트 만들기
    /* Todos의 프리젠테이셔널 컴포넌트 만들기 */
    // Todos: 여러개의 TodoItem 을 렌더링하는 용도 ✅
    // TodoItem: 할 일 정보을 보여주는 용도
    // TodoInsert: 새 항목을 등록하는 용도

    import { Todo } from '../modules/todos'
    import TodoItem from './TodoItem'

    // props 타입 정의
    type TodoListProps = {
        // 이 컴포넌트에서는 할 일 정보를 지니고 있는 todo들을 모아둔 배열인 todos라는 props를 받아온다.
        todos: Todo[]
        // 이 컴포넌트는 onToggle이라는 props를 받아와서, 다시 각 TodoItem 컴포넌트들에게 전달해준다. (이 함수가 호출되면 해당 todo의 done 값이 바뀐다.)
        onToggle: (id: number) => void
        // 이 컴포넌트는 onRemove이라는 props를 받아와서, 다시 각 TodoItem 컴포넌트들에게 전달해준다. (이 함수가 호출되면 해당 todo가 삭제된다.)
        onRemove: (id: number) => void
    }

    // 컴포넌트에서 필요한 값과 함수들을 모두 props로 받아온다.
    export default function Todos({
        todos, onToggle, onRemove
    }: TodoListProps) {
        // todos의 항목수가 0일 때는 다음을 렌더링한다.
        if (todos.length === 0) return <p>등록된 항목이 없습니다.</p>

        // 렌더링한다.
        return (
            <ul>
                {todos.map(todo => (
                    <TodoItem
                        todo={todo}
                        onToggle={onToggle}
                        onRemove={onRemove}
                        key={todo.id}
                    />
                ))}
            </ul>
        )
    }



1. src/components/TodoItem.tsx 생성 : TodoItem의 프리젠테이셔널 컴포넌트 만들기
    /* Todos의 프리젠테이셔널 컴포넌트 만들기 */
    // Todos: 여러개의 TodoItem 을 렌더링하는 용도 
    // TodoItem: 할 일 정보을 보여주는 용도 ✅
    // TodoInsert: 새 항목을 등록하는 용도

    // style 타입을 설정하기 위해 react에서 지원하는 CSSProperties 타입을 임포트
    import { CSSProperties } from 'react'
    import { Todo } from '../modules/todos'

    // props 타입 정의
    type TodoItemProps = {
        // 이 컴포넌트에서는 할 일 정보를 지니고 있는 todo라는 props를 받아온다.
        todo: Todo
        // 이 컴포넌트는 onToggle이라는 props를 받아와서, 텍스트 영역을 클릭하면 이 함수를 호출한다.
        onToggle: (id: number) => void
        // 이 컴포넌트는 onRemove이라는 props를 받아와서, 우측의 (X)를 클릭하면 이 함수를 호출한다.
        onRemove: (id: number) => void
    }

    export default function TodoItem({ todo, onToggle, onRemove }: TodoItemProps) {
        // CSSProperties는 style 객체의 타입이다.
        const textStyle: CSSProperties = {
            textDecoration: todo.done ? 'line-through' : 'none'
        }
        const removeStyle: CSSProperties = {
            marginLeft: 8,
            color: 'red'
        }
        
        const handleToggle = () => { onToggle(todo.id) }
        const handleRemove = () => { onRemove(todo.id) }

        // 렌더링한다.
        return (
            <li>
                <span onClick={handleToggle} style={textStyle}>
                    {todo.text}
                </span>
                <span onClick={handleRemove} style={removeStyle}>
                    (X)
                </span>
            </li>
        )
    }



1. src/components/TodoInsert.tsx 생성 : TodoInsert의 프리젠테이셔널 컴포넌트 만들기
    /* Todos의 프리젠테이셔널 컴포넌트 만들기 */
    // Todos: 여러개의 TodoItem 을 렌더링하는 용도 
    // TodoItem: 할 일 정보을 보여주는 용도 
    // TodoInsert: 새 항목을 등록하는 용도 ✅

    // event의 타입을 설정하기 위해 react에서 지원하는 ChangeEvent, FormEvent 타입을 임포트
    import { useState, ChangeEvent, FormEvent } from 'react'

    // props 타입 정의
    type TodoInsertProps = {
        // 이 컴포넌트는 onInsert라는 props를 받아와서, 이 함수를 호출하면 새 항목을 추가한다.
        onInsert: (text: string) => void
    }

    // 컴포넌트에서 필요한 값과 함수들을 모두 props로 받아온다.
    export default function TodoInsert({
        onInsert
    }: TodoInsertProps) {
        // input value의 상태는 컴포넌트 내부에서 로컬 상태로 관리한다.
        const [value, setValue] = useState('')
        const onChange = (e: ChangeEvent<HTMLInputElement>) => {
            setValue(e.target.value)
        }
        const onSubmit = (e: FormEvent) => {
            e.preventDefault()
            onInsert(value)
            setValue('')
        }

        // 렌더링한다.
        return (
            <form onSubmit={onSubmit}>
                <input
                    placeholder="할 일을 입력하세요."
                    value={value}
                    onChange={onChange}
                />
                <button type="submit">등록</button>
            </form>
        )
    }



1. src/containers/TodosContainer.ts 생성 : Todos의 컨테이너 컴포넌트 만들기
    import { useSelector, useDispatch } from 'react-redux'
    import { RootState } from '../modules'
    import { toggleTodo, removeTodo, addTodo } from '../modules/todos'
    import TodoInsert from '../components/TodoInsert'
    import Todos from '../components/Todos'

    /* Counter의 컨테이너 컴포넌트 만들기 */
    // 컨테이너 컴포넌트 : Global State 값을 조회하고, Action을 디스패치하는 컴포넌트
    // 컨테이너 컴포넌트에서 신경 쓸 부분은 useSelector((state: RootState) => state.todos) 이 부분이 전부이다.
    export default function TodosContainer() {
        // todos의 타입은 useSelector가 알아서 유추해주니 굳이 :{id: number, text: string, done: boolean } 또는 :TodosState 라고 타입을 설정 할 필요 없다.
        const todos = useSelector(
            // Global State를 조회할 때에는 state의 타입을 RootState로 지정해야 한다.
            (state: RootState) => state.todos
        )
        // 디스패치 함수를 가져온다.
        const dispatch = useDispatch() 

        // 각 Action들을 디스패치하는 함수들을 만들어준다.
        const onInsert = (text: string) => { dispatch(addTodo(text)) }
        const onToggle = (id: number) => { dispatch(toggleTodo(id)) }
        const onRemove = (id: number) => { dispatch(removeTodo(id)) }

        // UI가 있는 카운터를 렌더링하면서 "조회한 Global State 값"과, "Dispatch한 Action"들을 Props로 넘겨준다!
        return (
            <>
                <TodoInsert onInsert={onInsert} />
                <Todos todos={todos} onToggle={onToggle} onRemove={onRemove} />
            </>
        )
    }



1. src/App.tsx 수정 : TodosContainer를 렌더링
    import React from 'react'
    import TodosContainer from './containers/TodosContainer'

    const App: React.FC = () => {
        return <TodosContainer />
    }

    export default App

    

1. 테스트
    $ cd app1
    $ npm start
