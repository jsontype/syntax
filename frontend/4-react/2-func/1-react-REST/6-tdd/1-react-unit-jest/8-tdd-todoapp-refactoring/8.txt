[TDD 개발 흐름으로 TodoApp 리팩토링하기]

1. 사전준비 : 프로젝트를 새로 깔지 않고, 이전 챕터에서의 코드를 그대로 카피해서 가지고 온다.

1. 리팩토링
  "퍼포먼스튜닝", "성능최적화"라고도 하며, 
  useMemo와 useCallback 훅을 통해 기능은 그대로 하면서 성능을 최적화하는 리팩토링을 해주겠다.
  "테스트 코드"가 있다면, 리팩토링을 조금 더 자신있게 해줄 수 있다.
  테스트 코드만 통과하면 기능이 잘 작동 할 것이라는 보장이 되기 때문이다.

1. src/TodoItem.js : 추가, 수정, 삭제시 모든 TodoItem 컴포넌트들이 리렌더링이 되는 것을 방지하기 위해 TodoItem 컴포넌트를 React.memo로 감싸준다.
  import React, { memo, useCallback } from 'react'

  function TodoItem ({ todo, onToggle, onRemove }) {
    const { id, text, done } = todo
    /**
    * TodoItem이 추가, 수정, 삭제될 때 애플리케이션에 보여지는 모든 TodoItem 컴포넌트들이 리렌더링이 되고 있다.
    * 따라서 memo와 useCallback을 사용하여 이를 방지하도록 하겠다.
    */
    const toggle = useCallback(() => onToggle(id), [id, onToggle])
    const remove = useCallback(() => onRemove(id), [id, onRemove])

    return (
      <li>
        <span
          style={{
            textDecoration: done ? 'line-through' : 'none'
          }}
          onClick={toggle}
        >
          {text}
        </span>
        <button onClick={remove}>삭제</button>
      </li>
    )
  }

  // 쓰기, 수정, 삭제시의 리렌더링을 방지하기 위해서, TodoItem 컴포넌트를 React.memo로 감싸주어야 한다.
  export default memo(TodoItem)

1. TodoItem에서 리팩토링이 아직 안된 이유
  TodoItem은 이것으로 리팩토링이 되었지만, 지금 상황으로는 충분치 않다.
  여전히 TodoApp 컴포넌트에서 todos 배열이 바뀔 때마다 onToggle, onRemove 함수가 재렌더링되고 있기 때문이다.
  이럴 때는 React.memo를 사용한다고 해서 최적화가 되지 않으며,
  이를 해결하기 위해선 todos 배열을 관리하는 로직을 useReducer 로 구현을 하거나, 
  useState 의 setter 함수를 사용 할 때 새로운 상태를 파라미터로 넣어주는 대신, updater 함수를 파라미터로 넣어주면 된다.
  updater 함수, 혹은 함수형 업데이트를 하는 방법은, 
  단순히, setTodos 를 사용 할 때 앞부분에 todos => 를 넣어주면 된다.
  이렇게 하면, useCallback의 두번째 파라미터로 들어가는 deps 배열을 비워도 된다.
  이제 onToggle 과 onRemove 함수는 컴포넌트가 처음 렌더링할때만 한번 만들어지고, 
  그 이후에는 이미 만든 함수를 재사용하게 되기 때문에, 
  TodoItem 컴포넌트에서 React.memo로 성능 최적화를 해준 것이 비로소 유효해진다.

1. src/TodoApp.js : 테스트 코드에 부응하도록 TodoApp 개발하기
  import React, { useState, useCallback, useRef } from 'react'
  import TodoList from './TodoList'
  import TodoForm from './TodoForm'

  export default function TodoApp () {
    const [todos, setTodos] = useState([
      {
        id: 1,
        text: 'TDD 배우기',
        done: true
      },
      {
        id: 2,
        text: '@testing-library/react 사용하기',
        done: true
      }
    ])

    const nextId = useRef(3)

    const onInsert = useCallback(text => {
      // 함수형 업데이트 : "todos =>" 문구가 필수이다.
      setTodos(todos =>
        todos.concat({
          id: nextId.current,
          text,
          done: false
        })
      )
      nextId.current += 1
    }, [])

    const onToggle = useCallback(id => {
      setTodos(todos =>
        todos.map(todo => (todo.id === id ? { ...todo, done: !todo.done } : todo))
      )
    }, [])

    const onRemove = useCallback(id => {
      setTodos(todos => todos.filter(todo => todo.id !== id))
    }, [])

    return (
      <>
        <TodoForm onInsert={onInsert} />
        <TodoList todos={todos} onToggle={onToggle} onRemove={onRemove} />
      </>
    )
  }

1. 테스트
  $ cd app1
  $ npm test
  a키 누르기
  테스트가 모두 passed 되었는지 확인

1. 정리
  이렇게, 테스트 코드가 있으면 리팩토링을 하고 나서 굳이 브라우저상에서 수동으로 일일히 사용을 해볼 필요가 없기 때문에 시간을 정말 많이 아낄 수 있다.
