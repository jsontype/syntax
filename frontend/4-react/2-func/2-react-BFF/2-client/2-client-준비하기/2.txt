[클라이언트 앱 UI 준비해두기]

1. 사전준비 : init 앱을 가지고 온다.

1. 클라이언트 앱 UI 준비해두기
  이대로 UI를 만들게 되면, 상단에 메뉴가 있고, 사이드바와, 메인 컨텐츠가 있는 형태로 만들어진다.
  이것을 기본 템플릿을 해서, 다양한 개인 프로젝트 앱을 만들 수 있다.
  참고해두자.

1. src/index.css 생성 : 글로벌 스타일 작성하기
  body {
    margin: 0;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
      sans-serif;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }

  /* http://meyerweb.com/eric/tools/css/reset/ 
    v2.0 | 20110126
    License: none (public domain)
  */

  html,
  body,
  div,
  span,
  applet,
  object,
  iframe,
  h1,
  h2,
  h3,
  h4,
  h5,
  h6,
  p,
  blockquote,
  pre,
  a,
  abbr,
  acronym,
  address,
  big,
  cite,
  code,
  del,
  dfn,
  em,
  img,
  ins,
  kbd,
  q,
  s,
  samp,
  small,
  strike,
  strong,
  sub,
  sup,
  tt,
  var,
  b,
  u,
  i,
  center,
  dl,
  dt,
  dd,
  ol,
  ul,
  li,
  fieldset,
  form,
  label,
  legend,
  table,
  caption,
  tbody,
  tfoot,
  thead,
  tr,
  th,
  td,
  article,
  aside,
  canvas,
  details,
  embed,
  figure,
  figcaption,
  footer,
  header,
  hgroup,
  menu,
  nav,
  output,
  ruby,
  section,
  summary,
  time,
  mark,
  audio,
  video {
    margin: 0;
    padding: 0;
    border: 0;
    font-size: 100%;
    vertical-align: baseline;
  }

  /* HTML5 display-role reset for older browsers */
  article,
  aside,
  details,
  figcaption,
  figure,
  footer,
  header,
  hgroup,
  menu,
  nav,
  section {
    display: block;
  }

  body {
    line-height: 1;
  }

  ol,
  ul {
    list-style: none;
  }

  blockquote,
  q {
    quotes: none;
  }

  blockquote:before,
  blockquote:after,
  q:before,
  q:after {
    content: '';
    content: none;
  }

  table {
    border-collapse: collapse;
    border-spacing: 0;
  }



1. src/index.js 수정 : 글로벌 스타일(index.css) 적용하기 (* 주의할 점은 index.css를 임포트할 때 App 컴포넌트의 임포트 스텝보다 위에 있어야한다는 점이다!)
  import React from "react"
  import ReactDOM from "react-dom/client"
  import "./index.css"
  import App from "./App"

  const root = ReactDOM.createRoot(document.getElementById("root"))
  root.render(<App />)



1. src/components/people.js 작성 : 사이드 섹션과 메인 섹션을 가지는 컴포넌트 작성하기
  import "./components.css"

  export default function People() {
    // 메인화면 왼쪽의 사이드 섹션 리스트가 나타날 곳
    function AsideItems() {
      return <div></div>
    }

    // 메인화면	리스트 각 항목의 내용부가 표시될 곳
    function MainContents() {
      return <div></div>
    }

    return (
      <div id="people" className="component">
        <aside>{AsideItems()}</aside>
        <section className="contents">{MainContents()}</section>
      </div>
    )
  }



1. src/components/roles.js 생성 : 사이드 섹션과 메인 섹션을 가지는 컴포넌트 작성하기 + MockDB를 통한 예시 작성
  import { useState } from "react"
  import "./components.css"

  export default function Roles() {
    const [contentId, setContentId] = useState("developer")

    // Mock DB
    const data = {
      roles: [
        {
          id: "developer",
          requirement: "Computer Science Degree",
          members: [
            { id: 1, last_name: "Davidson" },
            { id: 2, last_name: "Harris" },
            { id: 3, last_name: "Adams" },
          ],
        },
        {
          id: "designer",
          requirement: "Graphic Design Certificate",
          members: [
            { id: 4, last_name: "West" },
            { id: 5, last_name: "Ford" },
          ],
        },
        {
          id: "planner",
          requirement: "Portfolio",
          members: [{ id: 6, last_name: "Jenkins" }],
        },
      ],
    }

    // 메인화면 왼쪽의 사이드 섹션 리스트가 나타날 곳
    function AsideItems() {
      const roleIcons = {
        developer: "💻",
        designer: "🎨",
        planner: "📝",
      }

      return (
        <ul>
          {data.roles.map(({ id }) => {
            return (
              <li
                key={id}
                className={"roleItem " + (contentId === "id" ? "on" : "")}
                onClick={() => {
                  setContentId(id)
                }}
              >
                <span>{contentId === id ? "🔲" : "⬛"}</span>
                {roleIcons[id]} {id}
              </li>
            )
          })}
        </ul>
      )
    }

    // 메인화면	리스트 각 항목의 내용부가 표시될 곳
    function MainContents() {
      const role =
        contentId && data.roles.filter((item) => item.id === contentId)[0]

      return (
        <div className="roleWrapper">
          <h2>{role.id}</h2>
          <div className="requirement">
            <span>{role.requirement}</span> required
          </div>
          <h3>Members</h3>
          <ul>
            {role.members.map((member) => {
              return <li key={member.id}>{member.last_name}</li>
            })}
          </ul>
        </div>
      )
    }

    return (
      <div id="roles" className="component">
        <aside>{AsideItems()}</aside>
        <section className="contents">{MainContents()}</section>
      </div>
    )
  }



1. src/components/teams.js 생성 : 사이드 섹션과 메인 섹션을 가지는 컴포넌트 작성하기
  import "./components.css"

  export default function Teams() {
    // 메인화면 왼쪽의 사이드 섹션 리스트가 나타날 곳
    function AsideItems() {
      return <div></div>
    }

    // 메인화면	리스트 각 항목의 내용부가 표시될 곳
    function MainContents() {
      return <div></div>
    }

    return (
      <div id="teams" className="component">
        <aside>{AsideItems()}</aside>
        <section className="contents">{MainContents()}</section>
      </div>
    )
  }



1. src/components/components.css 생성 : 컴포넌트 스타일 작성하기
  .component {
    display: flex;
    flex-direction: row;
    width: 100%;
    height: 100%;
    ;
  }

  .component aside {
    flex-shrink: 0;
    width: 320px;
    height: 100%;
    background-color: #333;
    overflow-y: scroll;
  }

  .component .contents {
    flex-grow: 1;
    height: 100%;
    overflow-y: scroll;
    padding: 20px;
  }

  .component .contents .inputContainer {
    display: inline-block;
    padding: 32px;
    margin: 4px;
    background-color: white;
    border: 1px solid #dddddd;
    border-radius: 8px;
  }

  .component .contents .inputContainer td {
    padding: 4px 8px;
  }

  .component .contents .inputContainer td input {
    border: 1px solid #ccc;
    height: 20px;
    line-height: 20px;
  }

  .component .contents .inputContainer td input[type=number] {
    width: 44px;
  }

  .component .contents .inputContainer td select {
    border: 1px solid #ccc;
    height: 24px;
    line-height: 24px;
  }

  .component .contents .inputContainer ul {
    width: 300px;
    margin-top: 12px;
  }

  .component .contents .inputContainer ul li {
    display: inline-block;
    margin: 0 6px 6px 0;
    padding: 6px 8px;
    background-color: #eee;
    border: 1px solid #eee;
    border-radius: 4px;
    text-transform: capitalize;
  }

  .component .contents .inputContainer ul li .count {
    display: inline-block;
    color: white;
    background-color: dodgerblue;
    font-weight: bold;
    padding: 2px 4px;
    border-radius: 4px;
    margin: 0 6px;
  }

  .component .contents .inputContainer ul li .increase {
    cursor: pointer;
  }

  .component .contents .inputContainer .buttons {
    margin-top: 24px;
    text-align: center;
  }

  .component .contents .inputContainer .buttons button {
    margin-right: 8px;
    padding: 8px 24px;
    cursor: pointer;
  }

  .component aside {
    color: white;
  }

  .component aside>ul>li {
    padding: 16px 20px;
    border-bottom: 2px solid #555;
  }

  .component aside .teamItemTitle {
    font-weight: bold;
    font-size: 1.1em;
    cursor: pointer;
  }

  .component aside .teamMembers {
    margin-top: 8px;
    padding-left: 6px;
    color: #BBB;
  }

  .component aside .teamMembers li {
    padding: 10px 4px;
    border-bottom: 1px solid #444;
    cursor: pointer;
  }

  .component aside .teamMembers li:last-child {
    border-bottom: 0;
  }

  .component aside .face {
    display: inline-block;
    width: 32px;
  }

  .component aside .bloodType {
    display: inline-block;
    width: 28px;
    margin-right: 20px;
    padding: 4px 0;
    text-align: center;
    font-size: 0.9em;
    font-weight: bold;
    color: #777;
    background-color: #222;
    border-radius: 4px;
  }

  .component aside .peopleName {
    cursor: pointer;
  }

  .component aside .roleItem {
    text-transform: capitalize;
    cursor: pointer;
  }

  .component aside .roleItem span {
    display: inline-block;
    width: 32px;
  }

  .component .contents .roleWrapper {
    display: inline-block;
    margin: 8px;
    padding: 16px 24px;
    border-radius: 8px;
    background-color: white;
    border: 2px solid #ddd
  }

  .component .contents .roleWrapper h2 {
    font-size: 1.8em;
    margin-bottom: 6px;
    text-transform: capitalize;
  }

  .component .contents .roleWrapper .requirement {
    margin-bottom: 24px;
    color: gray;
  }

  .component .contents .roleWrapper .requirement span {
    color: dodgerblue;
    text-transform: capitalize;
  }

  .component .contents .roleWrapper h3 {
    color: #555;
    font-size: 1.2em;
    margin: 16px 0 8px 0;
  }

  .component .contents .roleWrapper li {
    display: inline-block;
    margin: 0 6px 6px 0;
    padding: 6px;
    background-color: #eee;
    border: 1px solid #eee;
    border-radius: 4px;
  }



1. src/App.js 수정 : 컴포넌트들 도입하고, CSS 적용하기
  import "./App.css"
  import React, { useState } from "react"

  import Roles from "./components/roles"
  import Teams from "./components/teams"
  import People from "./components/people"

  export default function App() {
    const [menu, setMenu] = useState("Roles")

    // mainComp : App-header 아래 메인 화면에 나타날 컴포넌트 매핑
    const mainComp = {
      Roles: <Roles />,
      Teams: <Teams />,
      People: <People />,
    }

    // NavMenus : menu값에 따라 상단 App-header의 버튼을 표시하는 함수
    function NavMenus() {
      return ["Roles", "Teams", "People"].map((_menu, key) => {
        return (
          <li
            key={key}
            className={menu === _menu ? "on" : ""}
            onClick={() => {
              setMenu(_menu)
            }}
          >
            {_menu}
          </li>
        )
      })
    }

    return (
      <div className="App">
        <header className="App-header">
          <h1>Company Management</h1>
          <nav>
            <ul>{NavMenus()}</ul>
          </nav>
        </header>
        <main>{mainComp[menu]}</main>
      </div>
    )
  }



1. src/App.css 생성 : App 스타일 작성하기
  body {
    background-color: #eee;
  }

  header {
    height: 64px;
    line-height: 64px;
    background-color: white;
  }

  h1 {
    display: inline-block;
    font-size: 1.6em;
    margin: 0 24px;
  }

  nav {
    display: inline-block;
  }

  nav ul {
    display: flex;
    flex-direction: row;
  }

  nav ul li {
    margin-left: 16px;
    cursor: pointer;
  }

  nav ul li.on,
  nav ul li:hover {
    color: dodgerblue;
    text-decoration: underline;
  }

  main {
    height: calc(100vh - 64px);
    overflow: hidden;
  }



1. 테스트
  $ cd app1
  $ npm start
  http://localhost:3000
