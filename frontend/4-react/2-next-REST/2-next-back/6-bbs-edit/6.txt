[MongoDB 수정페이지 화면, API 작성하기]

1. 사전준비 : 프로젝트를 새로 깔지 않고, 이전 챕터에서의 코드를 그대로 카피해서 가지고 온다.

1. src/app/bbs/page.js 수정 : 수정페이지로 이동하는 처리 추가
  import { connectDB } from "@/app/api/connectDB"
  // import Link from "next/link"
  import Move from "./Move"

  export default async function BBS() {
    const db = (await connectDB).db("db1")
    const result = await db.collection("bbs1").find().toArray()

    const render = result.map((item) => {
      return (
        <div className="list-item" key={item._id}>
          <h4>
            제목: {item.title}{" "}
            <Move url={`/bbs/detail/${item._id}`} title="자세히 보기" />
          </h4>
          <p>
            내용: {item.content}{" "}
            <Move url={`/bbs/edit/${item._id}`} title="수정" />
          </p>
        </div>
      )
    })

    return (
      <>
        <div>
          <Move url={`/bbs/write`} title="등록" />
        </div>
        <div className="list-bg">{render}</div>
      </>
    )
  }

1. src/app/bbs/edit/[id]/page.js 생성 : 수정페이지 화면 작성
  import { ObjectId } from "mongodb"
  import { connectDB } from "@/app/api/connectDB"

  export default async function Edit(props) {
    const db = (await connectDB).db("db1")
    // props.params = 유저가 주소창에 localhost:3000/detail 뒤에 입력한 값
    const result = await db
      .collection("bbs1")
      .findOne({ _id: new ObjectId(props.params.id) })

    return (
      <div className="p-20">
        <h4>수정페이지</h4>
        <form action="/api/bbs/edit" method="POST">
          {/* Next에서는 수정페이지의 input에 value 대신 defaultValue를 사용해야 함 */}
          <input type="text" name="title" defaultValue={result.title} />
          <input type="text" name="content" defaultValue={result.content} />
          {/* 숨겨진 인풋으로 수정대상을 찾기위한 _id 값을 함께 보내준다. */}
          <input type="hidden" name="_id" defaultValue={String(result._id)} />
          <button type="submit">전송</button>
        </form>
      </div>
    )
  }

1. src/pages/api/bbs/edit.js 생성 : 수정페이지 API 작성
  import { ObjectId } from "mongodb"
  import { connectDB } from "@/app/api/connectDB"

  export default async function handler(req, res) {
    if (req.method == "POST") {
      /*
        console.log(req.body) // req.body는 현재 구 title, 구 content가 들어있다.
        console.log(req.query) // req.query는 현재 없다. 
          만일 주소창에 ?name=yang&age=20 같은 쿼리가 있다면, 
            console.log(req.query) 안에, { name: 'yang', age: '20' } 으로 담겨져서 쓸 수 있다.
          만일 api/delete/[name].js를 만든뒤, fetch('/api/delete/yang')를 하게 되면, 
            console.log(req.query) 안에, { name: 'yang' } 으로 담겨져서 쓸 수 있다.
      */
      if (req.body.title == "") {
        return res.status(500).json("제목은 필수입니다.")
      }
      try {
        const newData = {
          title: req.body.title,
          content: req.body.content,
        }
        const db = (await connectDB).db("db1")
        await db
          .collection("bbs1")
          .updateOne({ _id: new ObjectId(req.body._id) }, { $set: newData }) // 참고 : 숫자 타입의 증감만 할 경우에는 $set 대신 $inc: 1 / $inc: -1 과 같이 해도 된다.
        return res.redirect(302, "/bbs") // 응답과 동시에 페이지 이동시키려면 302를 첫 인자로 넣어야한다.
      } catch (e) {
        console.log(e)
      }
    }
  }

1. 테스트 : * 주의점은 api쪽 수정은 서버를 껐다가 다시 켜야 적용된다는 것이다.
  $ cd app1
  $ npm run dev
  http://localhost:3000/bbs
