[Union 타입]

1. 사전준비 : 프로젝트를 새로 깔지 않고, 이전 챕터에서의 코드를 그대로 카피해서 가지고 온다.

1. Union 타입
  하나의 필드에 여러개를 타입을 사용할 때 쓴다.
  버티컬 바(|)를 사용해서 여러 타입을 선언할 수 있다.




1. typedefs-resolvers/givens.js 생성: 둘 중 하나를 가져올 수 있는 유니온 타입으로 된 Given의 typeDefs와 resolvers 설정
  const { gql } = require("apollo-server")
  const dbWorks = require("../dbWorks.js")

  const typeDefs = gql`
    union Given = Equipment | Supply
  `

  const resolvers = {
    Query: {
      givens: (parent, args) => {
        return [...dbWorks.getEquipments(args), ...dbWorks.getSupplies(args)]
      },
    },
    Given: {
      __resolveType(given, context, info) {
        if (given.used_by) {
          return "Equipment"
        }
        if (given.team) {
          return "Supply"
        }
        return null
      },
    },
  }

  module.exports = {
    typeDefs: typeDefs,
    resolvers: resolvers,
  }



1. typedefs-resolvers/_queries.js 수정 : givens 쿼리의 타입을 추가
  const { gql } = require("apollo-server")

  const typeDefs = gql`
    type Query {
      equipments: [Equipment]
      supplies: [Supply]
      equipmentAdvs: [EquipmentAdv]
      softwares: [Software]
      software: Software
      givens: [Given]
    }
  `

  module.exports = typeDefs



1. index.js 수정 : 모듈화된 givens의 typeDefs, resolvers 추가
  const { ApolloServer } = require("apollo-server")

  const queries = require("./typedefs-resolvers/_queries")
  const mutations = require("./typedefs-resolvers/_mutations")
  const enums = require("./typedefs-resolvers/_enums")
  const equipments = require("./typedefs-resolvers/equipments")
  const supplies = require("./typedefs-resolvers/supplies")
  const softwares = require("./typedefs-resolvers/softwares")
  const givens = require("./typedefs-resolvers/givens")

  const typeDefs = [
    queries,
    mutations,
    enums,
    equipments.typeDefs,
    supplies.typeDefs,
    softwares.typeDefs,
    givens.typeDefs,
  ]

  const resolvers = [
    equipments.resolvers,
    supplies.resolvers,
    softwares.resolvers,
    givens.resolvers,
  ]

  const server = new ApolloServer({ typeDefs, resolvers })

  server.listen().then(({ url }) => {
    console.log(`🚀  Server ready at ${url}`)
  })



1. 테스트
  $ cd app1
  $ npm start
  http://localhost:4000/ 접속 : GraphQL Playground가 열린다.
  GraphQL Playground 사용 : 좌측에 다음 쿼리를 넣고 Run을 클릭
    query {
      givens {
        __typename
        ... on Equipment {
          id
          used_by
          count
          new_or_used
        }
        ... on Supply {
          id
          team
        }
      }
    }
  __typename은 각 항목이 Equipment 쿼리와 Supply 쿼리 중 어떤 쿼리를 기반으로 만들어졌는지 알려준다.
  ... on Equipment, ... on Supply는 해당 쿼리를 받아올 때의 취득할 필드를 지정해준다.
  givens 데이터안에 Equipment 쿼리와 Supply 쿼리를 공존해서 들어갈 수 있는 상태인지 조회값을 통해 확인한다.
