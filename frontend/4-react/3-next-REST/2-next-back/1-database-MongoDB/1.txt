[MongoDB 세팅]

1. 사전준비 : init 앱을 가지고 온다.

1. 설치
  $ cd app1
  $ npm i mongodb

1. 사전숙지사항
  신택스에서는 보안의 이유로 다음 정보를 각각 다음의 텍스트로 숨겨놓고 있다.
    - clientId: "Next Back 용 clientId!"
    - clientSecret: "Next Back 용 clientSecret!"
    - url: "Next Back 용 url!"
    - secret: "Next Back 용 secret!"
  해당 내용들은 개인 pw 항목에서 "Next Back" 검색후 찾을 수 있다. 각각의 정보를 찾아서 치환한 다음 수업에 임해야한다.

1. Database
  데이터베이스는 웹상에서 사용할 데이터를 보관하는 공간이다. (유저정보, 게시판정보 등)
  데이터베이스에는 두가지 종류가 있다.
  - 관계형 데이터베이스
    Oracle, MySQL, Oracle, PostGre 등이 있다. 
    행렬의 형태로 데이터를 저장한다.

  - 무관계형 데이터베이스
    MongoDB 등이 있다. (mongodb.com 가입시 무료용량제공)
    JSON 형태로 데이터를 저장한다. *(무관계형은 어떤 형태로든 가능)
  
  넥스트는 리액트의 풀스택 프레임워크로, 프론트엔드와 백엔드를 모두 개발할 수 있다.
  기본적으로 서버 컴포넌트를 제공하므로써, 백엔드를 개발할 수 있다.

1. MongoDB 웹호스팅 등록 : MongoDB를 로컬에 설치해도 되지만 서버의 유지를 위해 웹호스팅을 사용하겠다.
  mongodb.com 구글아이디로 가입 - 무료용량 선택
  데이터베이스 액세스 선택 : DB 접속용 ID와 Password를 추가한다.
  네트워크 액세스 선택 : DB 접속이 가능한 IP를 등록한다. (0.0.0.0/0 일 경우, 모든 IP 허용)
  
1. mongodb.com에서 Database 만들기
  좌측 사이드바에서 Database 선택
  Create a database에서 "Build a Database" 선택
  무료 플랜 선택
  AWS 선택
  Tokyo Region 선택
  Cluster Name 입력
  계속 Next 클릭
    
1. mongodb.com에서 Database에 데이터 넣기
  좌측 사이드바에서 Database 선택
  Collections 탭 선택
  My Own Data 선택
  Database Name 입력 : db1
  Collection Name 입력 : bbs1 *(Collection은 하나의 폴더와 같은 개념이다.)
  INSERT DOCUMENT 클릭
    다음 내용을 추가
      `
        _id: ...생략...
        title: "Hello"
        content: "Hello Mongo!"
      `
    INSERT 클릭
  
1. mongodb.com에서 Database 접속
  좌측 사이드바에서 Database 선택
  Connect 버튼 클릭
  VSCode 클릭
  url이 하나 나오는데, 그것을 복사
  <password> 부분을 실제 비밀번호로 변경 : <> 괄호부분은 삭제
  해당 부분을 복사해서 아래 코드 작성할 때 url 변수 부분에 넣는다.
  (주의 : 이 프로젝트를 깃허브에 넣을 때는 코드 안에 비밀번호가 담기기 때문에 private 레포지토리에 넣어야 한다.)

1. src/app/api/connectDB.js 생성 : DB 연결하는 함수 "connectDB"를 export하는 server component 작성
  import { MongoClient } from "mongodb"
  const url =
    "Next Back 용 url!"
  const options = { useNewUrlParser: true }
  let connectDB

  if (process.env.NODE_ENV === "development") {
    if (!global._mongo) {
      global._mongo = new MongoClient(url, options).connect()
    }
    connectDB = global._mongo
  } else {
    connectDB = new MongoClient(url, options).connect()
  }
  export { connectDB }
  
1. src/app/page.js 수정 : mongodb 연결하는 server component 작성
  import styles from "./page.module.css"
  import { connectDB } from "@/app/api/connectDB"

  export default async function Home() {
    // db명 : "db1"
    const db = (await connectDB).db("db1")
    // collection명 : "bbs1"
    const result = await db.collection("bbs1").find().toArray()
    // db 호출 결과 표시
    console.log(result)

    return (
      <>
        <div className={styles.red}>Hello Next</div>
      </>
    )
  }

1. 테스트 : 콘솔로그 확인
  $ cd app1
  $ npm run dev
  http://localhost:3000

1. 개발서버와 실제서버 사용법
  개발서버 사용은 다음과 같다. (테스트 용도)
    $ cd app1
    $ npm run dev
  실제서버 사용은 다음과 같다. (배포 용도)
    $ cd app1
    $ npm run build
    $ npm run start  
  참조해서 구분해서 사용하도록 하자.
