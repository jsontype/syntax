[next-translate와 i18n를 이용해서 Next에서 다국어 지원]

1. 사전준비 : 프로젝트를 새로 깔지 않고, 이전 챕터에서의 코드를 그대로 카피해서 가지고 온다.

1. Next의 다국어 지원
  여기에는 wovn을 사용하는 방법도 있고,
  next-translate를 사용하는 방법도 있다.
  여기서는 후자를 택해서 해보도록 하겠다.

1. next-translate 설치
  $ npm i --save next-translate

1. next.config.js 수정 : next-translate을 사용하기 위해서 next-translate를 설정
  /** @type {import('next').NextConfig} */
  const nextTranslate = require('next-translate')
  module.exports = nextTranslate()

1. i18n.json 생성 : 기본 언어는 en으로 설정
  * "locales": ["ja", "en", "ko"] = ja(Japanese), en(English), ko(Korean)을 지원하도록 한다.
  * "defaultLocale": "en" = 기본 언어는 en으로 설정한다.
  * "localeDetection": false = Next.js가 자동으로 브라우저의 언어를 감지하여 해당 언어를 표시하는 것을 방지한다.
  * "pages": { "*": ["common"] } = 모든 페이지에서 사용되는 공통 언어 세트를 common에 저장할 내용으로 제공한다. (pages 객체 안에 키를 추가해서, 특정 페이지에서만 사용되는 언어 세트도 나누어서 제공할 수 있다.)

  {
    "locales": ["ja", "en", "ko"],
    "defaultLocale": "en",
    "localeDetection": false,
    "pages": {
      "*": ["common"]
    }
  }

1. locales/en/common.json 생성 : 다국어를 지원하기 위한 언어 파일 생성
  {
    "Japanese": "Japanese",
    "English": "English",
    "Korean": "Korean"
  }

1. locales/ja/common.json 생성 : 다국어를 지원하기 위한 언어 파일 생성
  {
    "Japanese": "日本語",
    "English": "英語",
    "Korean": "韓国語"
  }

1. locales/ko/common.json 생성 : 다국어를 지원하기 위한 언어 파일 생성
  {
    "Japanese": "일본어",
    "English": "영어",
    "Korean": "한국어"
  }

1. pages/index.tsx 수정 : next-translate를 사용하여 Next.js 프로젝트에서 다국어를 지원하는 부분 추가
  import Head from 'next/head'
  import Image from 'next/image'
  import { Inter } from '@next/font/google'
  import styles from '@/styles/Home.module.css'
  // 1. next-translate의 useTranslation 함수 임포트
  import useTranslation from 'next-translate/useTranslation'

  const inter = Inter({ subsets: ['latin'] })

  export default function Home() {
    // 2. useTranslation 함수를 이용해 t 함수 취득
    const { t } = useTranslation()

    return (
      <>
        <Head>
          <title>Create Next App</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <div className={styles.container}>
          <main className={styles.main}>
            {/* 
              3. t 함수를 사용해서 화면상에 다국어 문구 대응 
                t함수를 사용할 때에는 어떤 언어 파일(common)의 어떤 단어(Japanese)를 사용할지 전달해야 한다.        
            */}
            <h2>{t('common:Japanese')}</h2>
            <h2>{t('common:English')}</h2>
            <h2>{t('common:Korean')}</h2>
          </main>
        </div>
      </>
    )
  }

1. 테스트
  $ cd app1
  $ npm run build // 필수
  $ npm start
  http://localhost:3000 에서 디폴트값인 영어로 표시됨을 확인
  http://localhost:3000/en 에서 영어로 표시됨을 확인
  http://localhost:3000/ja 에서 일본어로 표시됨을 확인
  http://localhost:3000/ko 에서 한국어로 표시됨을 확인
