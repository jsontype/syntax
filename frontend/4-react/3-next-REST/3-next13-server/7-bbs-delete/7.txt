[MongoDB 삭제페이지 화면, API 작성하기]

1. 사전준비 : 프로젝트를 새로 깔지 않고, 이전 챕터에서의 코드를 그대로 카피해서 가지고 온다.

1. src/app/bbs/MoveDelete.js 수정 : Delete API를 불러오는 버튼 컴포넌트 작성
  "use client"
  // 이벤트 처리는 Client 컴포넌트에서만 사용가능하다.

  import { useRouter } from "next/navigation"

  export default function Move({ id, title }) {
    const router = useRouter()

    return (
      <button
        // Delete는 따로 Form이 없으므로 별도의 bbs/delete 폴더가 없고,
        onClick={() => {
          // 그냥 여기에서 바로 Delete API를 호출한다.
          // 호출 방식은 fetch.then(), 즉 "AJAX" 방식을 사용한다.
          fetch("/api/bbs/delete", {
            method: "DELETE",
            body: id,
          }).then(() => router.refresh())
        }}
      >
        {title}
      </button>
    )
  }

1. src/app/bbs/page.js 수정 : 삭제페이지로 이동하는 버튼 컴포넌트를 추가
  import { connectDB } from "@/app/api/connectDB"
  import Move from "./Move"
  import MoveDelete from "./MoveDelete"

  export default async function BBS() {
    const db = (await connectDB).db("db1")
    const result = await db.collection("bbs1").find().toArray()

    const render = result.map((item) => {
      return (
        <div className="list-item" key={item._id}>
          <h4>
            제목: {item.title}{" "}
            <Move url={`/bbs/detail/${item._id}`} title="자세히 보기" />
          </h4>
          <p>
            내용: {item.content}{" "}
            <Move url={`/bbs/edit/${item._id}`} title="수정" />{" "}
            {/* String(item._id): _id가 string이 아니고 ObjectId의 형태로 DB에 들어가있기 때문에 백틱이 아닌 쌩으로 넣을때는 string 캐스팅이 필수 */}
            <MoveDelete id={String(item._id)} title="삭제" />
          </p>
        </div>
      )
    })

    return (
      <>
        <div>
          <Move url={`/bbs/write`} title="등록" />
        </div>
        <div className="list-bg">{render}</div>
      </>
    )
  }

1. src/pages/api/bbs/delete.js 생성 : 삭제페이지 API 작성
  import { ObjectId } from "mongodb"
  import { connectDB } from "@/app/api/connectDB"

  export default async function handler(req, res) {
    if (req.method == "DELETE") {
      /*
        console.log(req.body) // req.body는 현재 id가 들어있다.
        console.log(req.query) // req.query는 현재 없다. 
          만일 주소창에 ?name=yang&age=20 같은 쿼리가 있다면, 
            console.log(req.query) 안에, { name: 'yang', age: '20' } 으로 담겨져서 쓸 수 있다.
          만일 api/delete/[name].js를 만든뒤, fetch('/api/delete/yang')를 하게 되면, 
            console.log(req.query) 안에, { name: 'yang' } 으로 담겨져서 쓸 수 있다.
      */
      try {
        const db = (await connectDB).db("db1")
        await db.collection("bbs1").deleteOne({ _id: new ObjectId(req.body) })
        return res.redirect(302, "/bbs") // 응답과 동시에 페이지 이동시키려면 302를 첫 인자로 넣어야한다.
      } catch (e) {
        console.log(e)
      }
    }
  }

1. 테스트 : * 주의점은 api쪽 수정은 서버를 껐다가 다시 켜야 적용된다는 것이다.
  $ cd app1
  $ npm run dev
  http://localhost:3000/bbs
