[CORS와 Webpack DevServer Proxy]

1. CORS(Cross-Origin Resource Sharing)란? 
    원래, Open API가 아닌 이상, 브라우저에서 API를 요청 할 때에는,
    브라우저의 현재 주소와 API의 주소의 "도메인"이 일치해야 한다.
    그렇지 않으면 CORS 정책을 위반한 것으로, 이때 CORS policy 오류 메시지가 발생한다. (Open API는 예외)
    다시 말해, CORS 정책에 의하면, Open API가 아니라면, 서버쪽에서 모든 도메인을 허용하면 안된다는 것이다.
    CORS 설정이란, 이럴 때 "다른 도메인에서 API를 요청해서 사용 할 수 있게 해주는 것"이다. 
    json-server로 만든 서버의 경우엔 모든 도메인을 허용해주는 CORS 규칙이 적용되어 있긴 하다.

1. Webpack DevServer Proxy
    원래, CORS 설정을 위해서는 백엔드 개발자에게 해당 도메인을 허용해달라고 요청을 해야했는데,
    이제는 그럴 필요없이 Webpack DevServer(웹팩 개발서버)에서 제공하는 Proxy가 대신 CORS 설정을 해준다.
    Webpack DevServer의 Proxy를 사용하게 되면,
    브라우저 API 를 요청 할 때 백엔드 서버에 직접적으로 요청을 하지 않고,
    현재 개발서버의 주소로 요청을 하게 된다.
    그러면 Webpack DevServer에서 해당 요청을 받아 그대로 백엔드 서버로 전달하고,
    백엔드 서버에서 응답한 내용을 다시 브라우저쪽으로 반환한다.
    (10.png 참조)

1. Proxy 설정하는 법
    Webpack DevServer의 proxy 설정은 원래 웹팩 설정을 통해서 적용을 하지만,
    create-react-app(=CRA)를 통해 만든 리액트 프로젝트에서는 package.json에서 "proxy" 값을 설정하여 쉽게 적용 할 수 있다.
    package.json을 열으셔서 맨 아래에 다음과 같이 "proxy" 값을 설정한다.
    
    

1. package.json : Webpack DevServer proxy 설정
    마지막 } 끝나기 전에 다음을 추가
        "proxy": "http://localhost:4000"



1. api/posts.js 수정
    /*
        package.json에서 Webpack DevServer proxy를 http://localhost:4000로 설정한 다음에는, 
        api/posts.js 파일을 열어서 http://localhost:4000/posts 대신에 /posts URL로 요청을 하도록 하면 된다.
        이렇게 요청하는 주소의 도메인이 생략된 경우엔 현재 페이지의 도메인(지금의 경우 http://localhost:3000)을 가르키게 된다.
        확인 방법은, 실행 후 "Network 탭"을 보면 localhost:4000가 아닌 localhost:3000으로 요청하는 것을 볼 수 있다.
    */

    // axios 임포트 : REST API Client
    import axios from 'axios'

    // post 목록을 가져오는 비동기 함수
    export const getPosts = async () => {
        const response = await axios.get('/posts')
        return response.data
    }

    // ID로 post를 조회하는 비동기 함수
    export const getPostById = async id => {
        const response = await axios.get(`/posts/${id}`)
        return response.data
    }



1. API 도메인이 실서비스의 도메인과 다를 경우의 해결책
    나중에 프로젝트를 완성하게 되어 배포하는 경우,
    리액트로 만든 서비스와 API가 동일한 도메인에서 제공이되는 경우 이대로 계속 진행을 하면 되지만,
    만약에 API 의 도메인과 서비스의 도메인이 다르다면 (예: 서비스는 google.com, API는 api.com),
    axios의 글로벌 baseURL을 설정하면 된다.
    예를 들어 index.js 에서 다음과 같이 작성을 하면 된다.
        axios.defaults.baseURL = process.env.NODE_ENV === 'development' ? '/' : 'https://api.com/'
    위와 같은 설정을 하면, 개발 환경에선 프록시 서버 쪽으로 요청하고, 프로덕션에선 실제 API 서버로 요청을 하게 된다.
    이러한 설정은 아까 언급한 것처럼 API 도메인이 실서비스의 도메인과 다를때만 하면 된다.
    프로젝트를 개발 할 때 proxy 를 사용하는 것은 필수적인건 아니지만,
    사용하게 되면 백엔드 쪽에서 불필요한 코드를 아낄 수 있으니 (백엔드에서 개발서버를 위한 CORS 설정을 안해도 되니까) 꽤나 유용한 기능이다.



1. 테스트 : 서버, 클라이언트를 각각 실행하고, 프로젝트가 이전과 같이 잘 작동하는지 확인
    $ cd app1
    $ npx json-server ./data.json --port 4000
    $ npm start
    $ http://localhost:4000/posts (서버 확인)
    $ http://localhost:3000/ (클라이언트 확인)
    $ http://localhost:3000/ (네트워크 탭에서, 요청하고 있는 서버 API의 위치가 localhost:3000로 바뀌어 있는 것을 확인)
