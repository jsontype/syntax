[API 재로딩 문제 해결하기]

1. 포스트(post) 조회시 재로딩 문제 해결하기
    이 문제를 개선하려면, posts 모듈에서 관리하는 state의 구조를 다음과 같이 바꿔야 한다.
    현재 구조 : {posts: {data, loading, error}, post: {data, loading, error}}
    바뀔 구조 : {posts: {data, loading, error}, post: {'1': {data, loading, error}, '2': {data, loading, error}, [id]: {data, loading, error}}}
    이를 진행하려면 asyncUtils에 만들었던 일부 함수 대신에 새로운 이름으로 다음 함수들을 작성해주도록 한다.
    - createPromiseThunkById
    - handleAsyncActionsById
    다음 함수들을 asyncUtils.js에 넣어줄 것이다.



1. src/lib/asyncUtils.js 수정 : 최하단에 다음 createPromiseThunkById, handleAsyncActionsById 함수를 추가한다.
    // 특정 id 를 처리하는 Thunk 생성함수
    const defaultIdSelector = param => param
    export const createPromiseThunkById = (
        type,
        promiseCreator,
        // 파라미터에서 id 를 어떻게 선택 할 지 정의하는 함수입니다.
        // 기본 값으로는 파라미터를 그대로 id로 사용합니다.
        // 하지만 만약 파라미터가 { id: 1, details: true } 이런 형태라면
        // idSelector 를 param => param.id 이런식으로 설정 할 수 있곘죠.
        idSelector = defaultIdSelector
    ) => {
        const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`]

        return param => async dispatch => {
            // 비동기 작업에 관련된 액션이 어떤 id를 가르키는지 알아내기 위해, action.meta 값에 id를 넣어준다.
            const id = idSelector(param)
            dispatch({ type, meta: id })
            try {
                const payload = await promiseCreator(param)
                dispatch({ type: SUCCESS, payload, meta: id })
            } catch (e) {
                dispatch({ type: ERROR, error: true, payload: e, meta: id })
            }
        }
    }

    // id별로 처리하는 유틸함수
    export const handleAsyncActionsById = (type, key, keepData = false) => {
        const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`]
        return (state, action) => {
            // 비동기 작업에 관련된 액션이 어떤 id를 가르키는지 알아내기 위해, action.meta 값에 넣어줬던 id를 꺼내 사용한다.
            const id = action.meta
            switch (action.type) {
                case type:
                    return {
                        ...state,
                        [key]: {
                            ...state[key],
                            [id]: reducerUtils.loading(
                                // state[key][id]가 만들어져있지 않을 수도 있으니까 유효성을 먼저 검사 후 data 조회
                                keepData ? state[key][id] && state[key][id].data : null
                            )
                        }
                    }
                case SUCCESS:
                    return {
                        ...state,
                        [key]: {
                            ...state[key],
                            [id]: reducerUtils.success(action.payload)
                        }
                    }
                case ERROR:
                    return {
                        ...state,
                        [key]: {
                            ...state[key],
                            [id]: reducerUtils.error(action.payload)
                        }
                    }
                default:
                    return state
            }
        }
    }



1. src/modules/posts.js 수정 : createPromiseThunkById, handleAsyncActionsById 사용을 추가한다.
    // api/posts.js 안의 모든 함수들을 임포트
    import * as postsAPI from '../api/posts'
    // lib/asyncUtils 안의 리팩토링용 함수들을 임포트
    import {
        createPromiseThunk,
        reducerUtils,
        handleAsyncActions,
        createPromiseThunkById,
        handleAsyncActionsById
    } from '../lib/asyncUtils'

    // 액션타입
    const GET_POSTS = 'GET_POSTS' // 요청 시작
    const GET_POSTS_SUCCESS = 'GET_POSTS_SUCCESS' // 요청 성공
    const GET_POSTS_ERROR = 'GET_POSTS_ERROR' // 요청 실패
    const GET_POST = 'GET_POST' // 요청 시작
    const GET_POST_SUCCESS = 'GET_POST_SUCCESS' // 요청 성공
    const GET_POST_ERROR = 'GET_POST_ERROR' // 요청 실패

    // 액션타입함수를 Thunk 함수로 대체한다.
    export const getPosts = createPromiseThunk(GET_POSTS, postsAPI.getPosts) // createPromiseThunkById 사용을 추가한다.
    export const getPost = createPromiseThunkById(GET_POST, postsAPI.getPostById)

    // 초기값을 asyncUtils 함수를 통해 생성한다.
    const initialState = {
        posts: reducerUtils.initial(),
        post: {}
    }

    // ★ 리듀서
    export default function posts (state = initialState, action) {
        switch (action.type) {
            case GET_POSTS:
            case GET_POSTS_SUCCESS:
            case GET_POSTS_ERROR:
                const postsReducer = handleAsyncActions(GET_POSTS, 'posts')
                return postsReducer(state, action)
            case GET_POST:
            case GET_POST_SUCCESS:
            case GET_POST_ERROR:
                const postReducer = handleAsyncActionsById(GET_POST, 'post') // handleAsyncActionsById 사용을 추가한다.
                return postReducer(state, action)
            default:
                return state
        }
    }



1. src/containers/PostContainer.js 수정 : 포스트가 존재하면 아예 요청을 하지 않도록 하기
    import React, { useEffect } from 'react'
    import { useSelector, useDispatch } from 'react-redux'
    import { getPost } from '../modules/posts'
    import Post from '../components/Post'

    function PostContainer ({ postId }) {
        const { data, loading, error } = useSelector(
            state => state.posts.post[postId]
        ) || {
            loading: false,
            data: null,
            error: null
        } // 아예 데이터가 존재하지 않을 때가 있으므로, 비구조화 할당이 오류나지 않도록 함
        const dispatch = useDispatch()

        useEffect(() => {
            if (data) return // 포스트가 존재하면 아예 요청을 하지 않음
            dispatch(getPost(postId))
        }, [postId, dispatch, data])

        if (loading) return <div>로딩중...</div>
        if (error) return <div>에러 발생!</div>
        if (!data) return null

        return <Post post={data} />
    }

    export default PostContainer



1. 테스트 : 한번 조회된 포스트는 API 재요청이 일어나지 않는 것을 확인
    $ cd app1
    $ npm start
