[Redux connect 함수]

1. connect 함수
    connect 함수는 컨테이너 컴포넌트를 만드는 또 다른 방법이다.
    connect 함수 역시, "Redux store 안에 있는 state 값을 props로 넣어줄 수도 있고, action을 dispatch하는 함수를 props로 넣어줄 수도 있다."
    그러나, 함수형 컴포넌트를 만들 경우, Redux Hooks인 useSelector(state), useDispatch(action)가 훨씬 더 편하기 때문에 사용할 일은 적다.
    클래스형 컴포넌트를 만들 경우, Hooks를 사용하지 못하기 때문에 connect 함수를 사용하여야 한다.
    connect 함수는 HOC(Higher-Order Component) 패턴을 가진다고 한다.
    HOC란, "컴포넌트를 특정 함수로 감싸서 특정 값 또는 함수를 props로 받아와서 사용 할 수 있게 해줘서, 컴포넌트의 재사용성을 높이는 패턴"이다.



1. Redux를 쓰는데도 connect 함수를 알아둬야 하는 이유
    지금 새로운 컨테이너 컴포넌트를 만들 때에는 connect를 사용하는 일이 별로 없긴 하겠지만,
    2019년 이전에 작성된 컴포넌트들은 Redux을 쓰더라도, connect 함수로 되었었다.
    그래서 리액트 유지보수 현장에 가면 connect 함수를 접할 수 있으므로 기본은 배워두는 것이 좋다.



1. src/components/Counter/CounterContainer.js 수정 : CounterContainer를 connect 함수로 구현해보자.
    import React from 'react'
    import { connect } from 'react-redux'
    import Counter from './Counter'
    import { increase, decrease, setDiff } from '../../modules/counter'

    // 4. state와 action들을 props로 보내면서 counter 컴포넌트를 렌더링
    function CounterContainer({ number, diff, increase, decrease, setDiff }) {
        return (
            <Counter
                // state를 select하는(조회하는) 함수들을 props로 넣어준다.
                number={number}
                diff={diff}
                // action을 dispatch하는(전달하는) 함수들을 props로 넣어준다.
                onIncrease={increase}
                onDecrease={decrease}
                onSetDiff={setDiff}
            />
        )
    }

    // 1. state를 select(조회)하기
    // Redux store의 state를 조회할 수 있게, mapStateToProps 함수로 정의한다.
    // 이렇게 하면, "number, diff"의 state의 값은 store.getState() 함수를 호출한 결과값과 같아진다.
    const mapStateToProps = state => ({
        number: state.counter.number,
        diff: state.counter.diff
    })

    // 2. action을 mapDispatchToProps 객체에 담기 (dispatch를 대신함)
    // React store의 action을 (dispatch 없이) binding 해주기 위해, mapDispatchToProps를 객체로 정의한다.
    const mapDispatchToProps = {
        increase,
        decrease,
        setDiff
    }

    // 3. state와 action들을 렌더링할 컴포넌트의 props에 binding 하기
    // connect 함수의 import가 필요하다.
    // connect 함수에는 mapStateToProps, mapDispatchToProps를 인자로 넣어준다.
    export default connect(
        mapStateToProps,
        mapDispatchToProps
    )(CounterContainer)

    /* 
        3번 코드는 다음과 동일하다.
            const enhance = connect(mapStateToProps, mapDispatchToProps)
            export defualt enhance(CounterContainer)
    */



1. src/components/Counter/TodosContainer.js 수정 : TodosContainer를 connect 함수로 구현해보자.
    import React, { useCallback } from 'react'
    import { connect } from 'react-redux'
    import Todos from './Todos'
    import { addTodo, toggleTodo } from '../../modules/todos'

    // 4. state와 action들을 props로 보내면서 counter 컴포넌트를 렌더링
    function TodosContainer({ todos, addTodo, toggleTodo }) {
        // 최적화 할 필요가 없으므로 useCallBack 미사용 : onCreate는 React Memo가 적용된 하위 컴포넌트로 내려보내지 않기 때문이다.
        const onCreate = text => addTodo(text)
        // 최적화 할 필요가 있으므로 useCallBack 사용 : onToggle 은 리렌더링이 빈번하게 이루어지는 TodoItem 까지 내려가기 때문이다. 이 때, Deps에 dispatch가 없으면 eslint에서 exhaustive-deps가 뜬다.
        const onToggle = useCallback(id => toggleTodo(id), [toggleTodo])

        return <Todos todos={todos} onCreate={onCreate} onToggle={onToggle} />
    }

    // 1. state를 select(조회)하기  
    const mapStateToProps = state => ({ todos: state.todos })

    // 2. action을 mapDispatchToProps 객체에 담기 (dispatch를 대신함)
    // React store의 action을 (dispatch 없이) binding 해주기 위해, mapDispatchToProps를 객체로 정의한다.
    const mapDispatchToProps = {
        addTodo,
        toggleTodo,
    }

    // 3. state와 action들을 렌더링할 컴포넌트의 props에 binding 하기
    export default connect(
        mapStateToProps,
        mapDispatchToProps,
    )(TodosContainer)



1. 테스트
    $ cd app1
    $ npm start
