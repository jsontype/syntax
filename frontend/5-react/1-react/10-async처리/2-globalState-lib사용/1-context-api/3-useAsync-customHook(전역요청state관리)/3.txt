[useAsync 커스텀 Hook으로 global request state 관리하기]

1. useAsync 커스텀 Hook을 만드는 이유
    데이터를 요청해야 할 때마다 리듀서를 작성하는 것은 번거로운 일이다.
    매번 반복되는 코드를 작성하는 대신에, 커스텀 Hook 을 만들어서 request state 관리 로직을 쉽게 재사용할 수 있다.
    커스텀 Hook에서 중복되는 request state 관리에 대한 처리를 하는 예시로서 다음의 예시를 보여줄 것이다.
        1. useReducer로 선언된 request state 안에 API 호출 결과값을 넣는 과정을 넣는다.
        1. useEffect를 통해서 특정 파라미터가 있으면 그 파라미터가 바뀌었을 때만 API를 호출하게 한다. 이것으로 잘못된 무한호출도 막을 수 있다.
        1. skip 파라미터가 true이면 API를 호출하지 않는 처리를 해서, 특정 이벤트의 경우만 API를 호출하게 한다.
        위 세가지 로직을 하나의 커스텀 Hook에 넣고, 매번 API를 호출할 때마다 해당 Hook을 사용함으로써(=request state 관리 로직을 재사용함으로써), 
        위 세가지 로직의 처리의 중복을 제거할 수 있다.



1. src/useAsync.js 생성 : "리듀서, 유즈리듀서 훅, API 호출 로직"을 useAsync 커스텀 Hook에서 처리하도록 수정한다.
    import { useReducer, useEffect } from 'react'

    // Users.js에 있는 reducer 함수를 이쪽으로 이동시켰다.
    function reducer (state, action) {
        switch (action.type) {
            case 'LOADING':
                return {
                    loading: true,
                    data: null,
                    error: null
                }
            case 'SUCCESS':
                return {
                    loading: false,
                    data: action.data,
                    error: null
                }
            case 'ERROR':
                return {
                    loading: false,
                    data: null,
                    error: action.error
                }
            default:
                throw new Error(`Unhandled action type: ${action.type}`)
        }
    }

    /**
        useAsync 커스텀훅
        @param {Function} callback  API 요청을 시작하는 콜백함수
        @param {Array} deps 
            API 요청 콜백함수 안에서 사용할 useEffect의 deps 배열. 
            이 값이 []이면, 컴포넌트가 가장 처음 렌더링 할 때만 API를 호출하겠다는 뜻이 된다.
            나중에 사용할 비동기 함수에서 파라미터가 필요하고, 그 파라미터가 바뀔 때마다 (useEffect에서 걸어서) 새 데이터를 불러오고 싶은 경우에 쓰기 위함이다.
        @param {Boolean} skip
            특정버튼을 누르지 않은 경우는 API 요청을 skip을 하기 위한 불린값이다.
            기본값은 false로 지정한다. 
        @return {Array[Object, Promise]}
            이 Hook 에서 반환하는 값은 [state, fetchData]이다.
            각각 API 요청 결과값을 담을 state와, fetchData 함수이다.
            이렇게 fetchData 함수를 반환하여서 나중에 데이터를 쉽게 리로딩을 해줄 수 있다.
    */
    function useAsync (callback, deps = [], skip = false) {
        // Users.js에 있는 useReducer 훅을 이동시켰다.
        const [state, dispatch] = useReducer(reducer, {
            loading: false,
            data: null,
            error: false
        })

        const fetchData = async () => {
            dispatch({ type: 'LOADING' })
            try {
                const data = await callback()
                dispatch({ type: 'SUCCESS', data })
            } catch (e) {
                dispatch({ type: 'ERROR', error: e })
            }
        }

        useEffect(() => {
            // skip이 true라면 useEffect에서 아무런 작업도 하지 않음
            if (skip) return
            fetchData()
            // eslint 설정을 다음 줄에서만 비활성화
            // eslint-disable-next-line
        }, deps)

        return [state, fetchData]
    }

    export default useAsync



1. src/Users.js 수정
    // 1. "리듀서, 유즈리듀서 훅, API 호출 로직"을 useAsync 커스텀 Hook에서 처리하도록 수정한다. 
    // 2. 리스트를 클릭하면 상세 유저정보를 볼 수 있는 User 컴포넌트를 도입하도록 수정한다.
    import React, { useState } from 'react'
    import axios from 'axios'
    import useAsync from './useAsync' // 1. useAsync 커스텀 Hook 임포트
    import User from './User'

    // 1. useAsync 에서는 Promise의 결과를 바로 data에 담기 때문에, 요청을 한 이후 response에서 data를 추출하여 반환하는 함수를 따로 만들었다.
    async function getUsers () {
        const response = await axios.get(
            'https://jsonplaceholder.typicode.com/users'
        )
        return response.data
    }

    function Users () {
        const [userId, setUserId] = useState(null)
        const [state, refetch] = useAsync(getUsers, [], true) // 1. useAsynce의 결과물을 초기값으로 담는다. (skip은 true이므로 실행하지 않는다.)
        const { loading, data: users, error } = state // 1. state.data 를 users 키워드로 조회

        if (loading) return <div>로딩중..</div>
        if (error) return <div>에러가 발생했습니다</div>
        if (!users) return <button onClick={refetch}>불러오기</button>

        return (
            <>
                <ul>
                    {users.map(user => (
                        <li
                            key={user.id}
                            onClick={() => setUserId(user.id)}
                            style={{ cursor: 'pointer' }}
                        >
                            {user.username} ({user.name})
                        </li>
                    ))}
                </ul>
                <button onClick={refetch}>다시 불러오기</button>
                {/* 2. User 컴포넌트 도입해서, 리스트의 유저를 클릭하면 해당 유저 정보를 아래에 렌더링한다. */}
                {userId && <User id={userId} />}
            </>
        )
    }

    export default Users



1. src/User.js 생성 : Users 컴포넌트 화면에서, 리스트의 유저를 클릭하면 해당 유저 정보를 아래에 렌더링한다.
    import React from 'react'
    import axios from 'axios'
    import useAsync from './useAsync'

    async function getUser (id) {
        const response = await axios.get(
            `https://jsonplaceholder.typicode.com/users/${id}`
        )
        return response.data
    }

    function User ({ id }) {
        const [state] = useAsync(() => getUser(id), [id])
        const { loading, data: user, error } = state

        if (loading) return <div>로딩중..</div>
        if (error) return <div>에러가 발생했습니다</div>
        if (!user) return null

        return (
            <div>
                <h2>{user.username}</h2>
                <p>
                    <b>Email:</b> {user.email}
                </p>
            </div>
        )
    }

    export default User



1. 테스트
    useAsync 커스텀 Hook을 통해, request state에 자동으로 값이 들어가는 지 확인
    useAsync 커스텀 Hook을 통해, 이제 렌더링 시에는 데이터 요청을 하지 않고, 불러오기 버튼을 눌렀을 때 데이터 요청을 하게 되는지 확인
    useAsync 커스텀 Hook을 통해, 소스코드가 훨씬 깔끔해졌고, 재사용하기도 쉬워졌음을 확인
    User 컴포넌트를 통해, 리스트의 유저를 클릭하면 해당 유저 정보가 하단에 렌더링되는 지 확인
    $ cd app1
    $ npm start
