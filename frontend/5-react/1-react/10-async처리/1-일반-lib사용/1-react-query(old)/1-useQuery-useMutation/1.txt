[React Query를 이용해 API 연동하기: useQuery]

1. 사전준비 : init 앱을 가지고 온다.

1. React Query 설치
  $ cd app1
  $ npm i react-query (= yarn add react-query)

1. React Query 정의
  useEffect로 fetch를 하는 기존의 api 호출 방식 대신 사용하는 라이브러리이다.
  이를 통해 데이터 Fetching, 캐싱, 동기화, 서버 쪽 데이터 업데이트 등 프론트가 구현하기 귀찮은 일들을 쉽게 만들어준다.
  더 구체적으로는 다음과 같은 것들이다.
    서버 데이터 캐싱
    데이터 패칭 시 로딩, 에러 처리를 한 곳에서 처리 가능하다.
    get을 한 데이터에 대해 update를 하면 자동으로 get을 다시 수행한다. (예 : 게시판)
    데이터가 오래 되었다고 판단되면 다시 get해준다. (invalidateQueries)
    동일 데이터를 여러번 요청하면 한번만 요청한다. (옵션에 따라 중복 호출 허용 시간 조절 가능)
    무한 스크롤 기능 제공 (Infinite Queries)
    비동기 과정을 선언적으로 관리할 수 있다. (Suspense, ErrorBoundary 컴포넌트와 fallback 프로퍼티 사용)
    react hook과 사용하는 구조가 비슷하다.
  이번에는 Rest API로 구현하는 axios를 함께 적용해보도록 하겠다.

1. src/App.js : react-query를 사용하도록 세팅
  import { QueryClient, QueryClientProvider } from "react-query"
  import UserList from "./UserList"

  const queryClient = new QueryClient()

  function App () {
    return (
      <div className="App">
        <QueryClientProvider client={queryClient}>
          <UserList />
        </QueryClientProvider>
      </div>
    )
  }

  export default App

1. src/useUsers.js 커스텀훅 생성 : useQuery를 통해서 API를 fetch해오는 커스텀훅 생성.
  // react-query로부터 useQuery를 임포트
  import { useQuery } from "react-query"
  import axios from "axios"

  const fetchUsers = async () => {
    const { data } = await axios.get(
      `https://jsonplaceholder.typicode.com/users`
    )
    return data
  }

  export default () => {
    // useQuery를 사용하면 단순 API 데이터 외에도 fetch에 대한 다양한 정보를 가져와서 사용할 수 있다.
    // 받아올 수 있는 값에는 status, data, error 외에도 isLoading 등 다양한 값이 있다. (많은 useQuery를 사용한다면 status, data와 같은 다양한 값에 별칭을 줄 수 있다.)
    const { status, data, error } = useQuery("users", fetchUsers) // useQuery 가능한 인자 3가지 : key("users"), fetch함수(fetchUsers), 옵션객체({ refetchInterval: 5000 } 같은 느낌)
    return { status, data, error }
  }

1. src/UserList : 커스텀훅을 이용해 받아올 API 데이터를 렌더링할 컴포넌트 생성
  import React from "react"
  import useUsers from "./useUsers"

  const UserList = () => {
    // 커스텀훅 사용하여 API fetch 데이터 취득
    const { data } = useUsers()

    // 취득한 API fetch 결과를 렌더링
    return (
      <section>
        <h1>사용자 목록</h1>
        {data && (
          <ul>
            {data.map((user) => {
              return (
                <li key={user.id}>
                  {user.username} ({user.email})
                </li>
              )
            })}
          </ul>
        )}
      </section>
    )
  }

  export default UserList

1. 테스트 : API fetching이 잘 이뤄지는 지 확인
  $ cd app1
  $ npm start

1. 정리
  - useEffect와 useQuery의 API 호출 방식의 차이 정리
    useEffect 방식
      useEffect(() => {
        fetch(api)
          .then(res => res.json())
          .then(json => console.log(json.data))
      }, [])
    useQuery 방식
      useQuery({ queryKey: ['movies'] }, () => {
        fetch(api)
          .then(res => res.json())
          .then(json => console.log(json.data))
      }, [])
  - react-query의 함수 목록
    useQuery(key, fetch함수) : API 데이터를 get 처리 
    useMutation(key, fetch함수) : API 데이터를 post, update 처리. 값을 바꿀 때 사용.
      key는 string, array를 받는다.
      fetch함수는 promise를 받는다.
      return값은 API 호출의 성공 실패 여부와, API return 값을 포함한 객체를 출력한다.
    useQueries : 여러개의 비동기 query가 있을 때, promise.all처럼 useQuery를 하나로 묶을 수 있다.
      promise.all과 마찬가지로, 배열에 각 쿼리에 대한 State 값이 객체로 들어온다.
    QueryCache : 쿼리에 대해 성공, 실패 전처리를 할 수 있다.
    invalidateQueries(get처리 fetch함수) : update후에 get 다시 실행



[React Query를 이용해 API 연동하기: useMutation]

1. useMutation 함수
  (DB에 insert, delete, update 등을 하는) mutation 함수의 경우에 사용하는 Query 호출 함수이다.
  mutation 권한을 가진 공개 API가 없기 때문에, 이번엔 실제 작업은 스킵하며, 아래 예시를 참조해서 실무에서 사용할 수 있게만 공부해 두자.

1. useMutation 함수 예시
```
  import React from 'react';
  import { useMutation, useQueryClient } from '@tanstack/react-query';

  const addProduct = async (newProduct) => {
    const response = await fetch('/api/products', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(newProduct),
    });
    if (!response.ok) {
      throw new Error('Network response was not ok');
    }
    return response.json();
  };

  function AddProduct() {
    const queryClient = useQueryClient();
    const mutation = useMutation({
      mutationFn: addProduct,
      onSuccess: () => {
        queryClient.invalidateQueries({ queryKey: ['products'] });
      },
    });

    return (
      <form
        onSubmit={(e) => {
          e.preventDefault();
          mutation.mutate({ name: 'New Product' });
        }}
      >
        <button type="submit">Add Product</button>
      </form>
    );
  }

  export default AddProduct;
```
