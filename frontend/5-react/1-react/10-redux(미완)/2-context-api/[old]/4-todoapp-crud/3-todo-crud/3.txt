[CRUD 기능 구현하기]

1. Context 를 만들어주었으니, 이제 Context 와 연동을 하여 기능을 구현해봅시다. Context 에 있는 state 를 받아와서 렌더링을 하고, 필요한 상황에는 특정 액션을 dispatch 하면 됩니다.

1. components/TodoHead.js 수정 : TodoHead 완성하기
    TodoHead에서는 done 값이 false인 항목들의 개수를 화면에 보여준다.

    최상단에 다음을 추가
        /* context로부터 todo의 global state 가져오기 */
        import { useTodoState } from '../TodoContext'

    function TodoHead() 전체를 변경
        function TodoHead() {  
            /* 오늘의 날짜를 보여주는 처리 1. */
            const today = new Date()
            const dateString = today.toLocaleDateString('ko-KR', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            })
            const dayName = today.toLocaleDateString('ko-KR', { weekday: 'long' })
        
            /* done 값이 false인 항목들의 개수를 화면에 보여주는 처리 1. */
            const todos = useTodoState()
            const undoneTasks = todos.filter(todo => !todo.done)    
        
            return (
                <TodoHeadBlock>
                    {/* 오늘의 날짜를 보여주는 처리 2. */}
                    <h1>{dateString}</h1>
                    <div className="day">{dayName}</div>
        
                    {/* done 값이 false인 항목들의 개수를 화면에 보여주는 처리 2. */}
                    <div className="tasks-left">할 일 {undoneTasks.length}개 남음</div>
                </TodoHeadBlock>
            )
        }



1. components/TodoList.js 수정 : TodoList 완성하기
    TodoList에서는 state를 조회하고 이를 렌더링해서 화면에 보여준다.
    그리고, onToggle, onRemove 와 같이 항목에 변화를 주는 작업은 이 컴포넌트에서 신경 쓸 필요 없다.
    이 작업은 우리가 각 TodoItem 에서 해줄 것이다.

    최상단에 다음을 추가
        /* context로부터 todo의 global state 가져오기 */
        import { useTodoState } from '../TodoContext'

    function TodoList() 전체를 변경
        function TodoList() {
            /* todo list의 목록을 보여주는 처리 1. */
            const todos = useTodoState()
        
            return (
                <TodoListBlock>
                    {/* todo list의 목록을 보여주는 처리 2. */}
                    {todos.map(todo => (
                        <TodoItem
                            key={todo.id}
                            id={todo.id}
                            text={todo.text}
                            done={todo.done}
                        />
                    ))}
                </TodoListBlock>
            )
        }
    


1. components/TodoItem.js 수정 : TodoItem 완성하기
    TodoItem에서는 dispatch를 사용해 토글 기능과 삭제 기능을 구현할 것이다.

    최상단에 다음을 추가
        /* context로부터 todo의 actions dispatch 가져오기 */
        import { useTodoDispatch } from '../TodoContext'

    const Remove 전체를 변경
        const Remove = styled.div`
            display: flex;
            align-items: center;
            justify-content: center;
            color: #dee2e6;
            font-size: 24px;
            cursor: pointer;
            opacity: 0;
            &:hover {
                color: #ff6b6b;
            }
        `

    const TodoItemBlock 전체를 변경
        const TodoItemBlock = styled.div`
            display: flex;
            align-items: center;
            padding-top: 12px;
            padding-bottom: 12px;
            &:hover {
                ${Remove} {
                    opacity: 1;
                }
            }
        `    

    function TodoItem 전체를 변경
        function TodoItem({ id, done, text }) {
            /* todo 관련 actions dispatch를 가져와 쓰기 1. */
            const dispatch = useTodoDispatch()
            const onToggle = () => dispatch({ type: 'TOGGLE', id })
            const onRemove = () => dispatch({ type: 'REMOVE', id })
        
            return (
                <TodoItemBlock>
                    {/* todo 관련 actions dispatch를 가져와 쓰기 2. */}
                    <CheckCircle done={done} onClick={onToggle}>
                        {done && <MdDone />}
                    </CheckCircle>
                    <Text done={done}>{text}</Text>
                    <Remove onClick={onRemove}>
                        <MdDelete />
                    </Remove>
                </TodoItemBlock>
            )
        }

    최하단을 다음과 같이 변경
        /* 다른 항목이 업데이트 될 때, 불필요한 리렌더링 방지 */
        export default React.memo(TodoItem)



1. components/TodoCreate.js : TodoCreate 완성하기
    여기서는 TodoCreate 컴포넌트 안에만 있는 local state인 "input value값"을 onSubmit하면, 
    onSubmit 상황에서 새로운 항목을 추가하는 action을 "dispatch"한 후, global state인 "todo list 추가"를 해주고,
    그 뒤 local state인 value, open의 값을 false로 전환해줄 것이다.

    최상단에 다음을 추가
        /* context로부터 todo의 global state와, todo의 actions dispatch 가져오기 */
        import { useTodoDispatch, useTodoNextId } from '../TodoContext'

    const CircleButton 항목에서 다음을 찾아서 삭제
        display: flex;

    function TodoCreate 전체를 변경
        function TodoCreate() {
            /*
                추가버튼과 "open" state를 onToggle로 연결해서, 
                버튼을 클릭하면 todo 입력 폼이 나타나고, 다시 누르면 폼이 사라진다.
            */
            const [open, setOpen] = useState(false)
            const onToggle = () => setOpen(!open)
        
            /* useDispatch를 통해, dispatch를 통해서 global action 불러와서, "지역 state인 인풋 value의 값"으로 "전역 state인 todo 리스트에 항목 추가"하기 1. */
            const [value, setValue] = useState('')
            const dispatch = useTodoDispatch()
            const nextId = useTodoNextId()
            const onChange = e => setValue(e.target.value)
            const onSubmit = e => {
                e.preventDefault() // 새로고침 방지
                dispatch({
                    type: 'CREATE',
                    todo: {
                        id: nextId.current,
                        text: value,
                        done: false
                    }
                })
                setValue('')
                setOpen(false)
                nextId.current += 1
            }
        
            /* useDispatch를 통해, dispatch를 통해서 global action 불러와서, "지역 state인 인풋 value의 값"으로 "전역 state인 todo 리스트에 항목 추가"하기 2. */
            return (
                <>
                    {open && (
                        <InsertFormPositioner>
                            <InsertForm onSubmit={onSubmit}>
                                <Input
                                    autoFocus
                                    placeholder="할 일을 입력 후, Enter 를 누르세요"
                                    onChange={onChange}
                                    value={value}
                                />
                            </InsertForm>
                        </InsertFormPositioner>
                    )}
                    <CircleButton onClick={onToggle} open={open}>
                        <MdAdd />
                    </CircleButton>
                </>
            )
        }

    최하단을 다음과 같이 변경 : 이렇게 함으로써 TodoContext에서 관리하고 있는 state가 바뀔 때 TodoCreate의 불필요한 리렌더링을 방지 할 수 있다.
    * 그러나 만약 Context를 하나만 만들었었다면 이런 최적화는 되지 않을 것이다.
        /* 다른 항목이 업데이트 될 때, 불필요한 리렌더링 방지 */
        export default React.memo(TodoCreate)



1. 테스트 : 모든 CRUD 기능이 잘 작동하는 지 확인
    $ cd app1
    $ npm run dev
