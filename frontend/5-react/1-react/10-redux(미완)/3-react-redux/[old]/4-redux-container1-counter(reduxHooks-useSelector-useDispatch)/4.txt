[Redux Components 구현하기 1 : Counter 기능 만들기]

1. Redux상에서 Counter.js를 구현해보도록 하겠다.
    파일명 *.js는 ui만 다루는 "프리젠테이셔널 컴포넌트"로 만들 것이다.
    파일명 *Container.js는 state와 action을 Counter.js에 연결하기 위한 redux hook을 다루는 "컨테이너 컴포넌트"로 만들 것이다.
    이 때 사용할 useSelector와 useDispatch라는 hook은, 일반 react hook과 다르게, redux hook이므로 임포트도 react-redux에서 가져온다.



1. src/components/Counter.js 생성 : 프리젠테이셔널 컴포넌트 만들기
    import React from 'react'

    /* 프리젠테이셔널 컴포넌트 만들기 */
    // 프리젠테이셔널 컴포넌트란, Redux store에 직접 접근하지 않고 필요한 값/함수를 props로 받는 컴포넌트이다.
    // 주로 UI를 선언하는 것에 집중하는 형태로 구현된다.

    // 1. Redux에서 받아올 state(값)과 action(함수)들을 props로 받을 수 있게 준비해둔다.
    function Counter({ number, diff, onIncrease, onDecrease, onSetDiff }) {
        const onChange = e => {
            // e.target.value 의 타입은 문자열이기 때문에 숫자로 변환
            onSetDiff(Number(e.target.value, 10))
        }
        return (
            <div>
                <h1>{number}</h1>
                <div>
                    <input type="number" value={diff} min="1" onChange={onChange} />
                    <button onClick={onIncrease}>+</button>
                    <button onClick={onDecrease}>-</button>
                </div>
            </div>
        )
    }

    export default Counter



1. src/containers/CounterContainer.js 생성 : 컨테이너 컴포넌트 만들기
    import React from 'react'
    import { useSelector, useDispatch } from 'react-redux'
    import Counter from './Counter'
    import { increase, decrease, setDiff } from '../modules/counter'

    /* 콘테이너 컴포넌트 만들기 */
    // 컨테이너 컴포넌트란, 프레젠테이셔널 컴포넌트가 Redux store의 state를 조회하거나 action을 dispatch 할 수 있게 해주는 컴포넌트이다.
    // HTML 태그들을 사용하지 않고 다른 프리젠테이셔널 컴포넌트들을 불러와서 사용한다.

    function CounterContainer() {
        // 1. state를 select(조회)하기
        // Redux store의 state를 조회할 수 있게, useSelector라는 Redux Hook을 걸어준다.
        // 이렇게 하면, "number, diff"의 state의 값은 store.getState() 함수를 호출한 결과값과 같아진다.
        const { number, diff } = useSelector(state => ({
            number: state.counter.number,
            diff: state.counter.diff
        }))

        // 2. action을 dispatch(전달)하기
        // useDispatch라는 Redux Hook을 걸어서, store의 dispatch를 함수에다가도 사용 할 수 있게 해준다.
        const dispatch = useDispatch()
        // 각 액션들을 dispatch하는(전달하는) 각 함수들을 만든다.
        const onIncrease = () => dispatch(increase())
        const onDecrease = () => dispatch(decrease())
        const onSetDiff = diff => dispatch(setDiff(diff))

        return (
            // 3. state와 action들을 props로 보내면서 counter 컴포넌트를 렌더링
            <Counter
                // state를 select하는(조회하는) 함수들을 props로 넣어준다.
                number={number}
                diff={diff}
                // action을 dispatch하는(전달하는) 함수들을 props로 넣어준다.
                onIncrease={onIncrease}
                onDecrease={onDecrease}
                onSetDiff={onSetDiff}
            />
        )
    }

    export default CounterContainer



1. src/App.js 수정 : Counter 컨테이너 컴포넌트 렌더링을 추가
    import React from 'react'
    // 컨테이너 컴포넌트를 렌더링
    import CounterContainer from './components/CounterContainer'

    function App() {
        return (
            <div>
                <CounterContainer />
            </div>
        )
    }

    export default App



1. 테스트 : input의 숫자를 변경한 다음에 +, - 버튼을 눌러서, 카운터가 잘 작동하는지 확인
    $ cd app1
    $ npm start



1. 정리 : component와 container를 나누는 이유
    컴포넌트를 두 개(Container, Presentational)로 나누는 것은 재사용성을 확보하기 위해서이다.
    예를 들어, 컨테이너 없이 컴포넌트를 만들면 스토어가 포함되어 있을텐데 그러면 다른곳에서 재사용할때도 
    리덕스에 접근하는 코드들을 다같이 가져가야 하니까, 중복코드가 상당히 많아질 것이다.
    이를 피하고 코드가 더 간결한 상태에서 재사용하기 위해 
    리덕스에 접근하는 콘테이너와, props로 받는 컴포넌트를 따로 만드는 것이다.

    원래는 components/Counter.js, container/CounterContainer.js 이런 식으로
    폴더를 분리해서 작성하는 것이 정석이긴 하지만, 꼭 굳이 그럴 필요는 없다. 같은 폴더에 넣어놔도 된다.
    (실전에선 src/components/pages/counter 같은 방식의 폴더명이겠지만)



1. ★★ 요약 : Redux 컴포넌트 만들기 (컴콘렌)
    컴포넌트 만들기(src/components/*.js) : ui 선언에 집중하는 components를 만들고, redux에 직접 접근하지 않고 state(값), action(함수)를 props를 통해 받는다.
    콘테이너 만들기(src/components/*Container.js) : redux에 대신 접근하여 component가 state(값), action(함수)를 가져올 수 있게 한다.
        state는 "useSelector" Hook을 사용하고,
        action은 "useDispatch" Hook을 사용한다.
    렌더링하기(src/App.js) : 원하는 곳에 container를 임포트해와서 렌더링한다.
