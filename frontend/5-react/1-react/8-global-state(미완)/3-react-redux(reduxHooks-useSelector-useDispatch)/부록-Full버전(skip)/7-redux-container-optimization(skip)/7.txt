[Redux Container 최적화하기]

1. Redux 컨테이너에서 불필요한 리렌더링 체크
    이전에 Todos 기능을 만들 때, 프리젠테이셔널 컴포넌트에서만 React.memo를 사용하여 리렌더링 최적화를 해줬었는데, 
    이번엔 컨테이너 컴포넌트에 불필요한 리렌더링이 있는지 체크해보자.
        웹스토어 react context devtool를 설치가 되어있는 지 체크한다. 
        그 후, 리액트 개발자 도구의 Profiler 탭의 톱니바퀴를 눌러서 Highlight Updates를 체크한다.
        그 후, 카운터의 +, - 를 누른다고 하단의 TodoList가 리렌더링되지는 않지만, TodoList의 항목을 클릭해서 토글 할 때 카운터가 리렌더링되고 있음을 확인한다.

    const todos = useSelector(state => state.todos)
        기본적으로, useSelector라는 Redux Hook을 통해 리덕스 스토어의 상태를 조회 할 땐 만약 state가 바뀌지 않았으면 리렌더링하지 않는다.
        예를 들어, TodosContainer의 경우, 카운터 값이 바뀔 때 todos 값엔 변화가 없으니까, 리렌더링되지 않는다.        

    const { number, diff } = useSelector(state => ({
        number: state.counter.number,
        diff: state.counter.diff
    }))
        반면, CounterContainer에서는, 사실상 useSelector라는 Redux Hook을 통해 매번 렌더링 될 때마다,
        새로운 객체 { number, diff }를 만드는 것이기 때문에 상태가 바뀌었는지 바뀌지 않았는지 확인을 할 수 없어서
        불필요한 렌더링이 이루어진다.

    이를 최적화 하기 위해선 두가지 방법이 있다.

    

1. 최적화하는 방법 1 : src/components/Counter/CounterContainer.js에서, useSelector를 여러번 사용하기
    const number = useSelector(state => state.counter.number)
    const diff = useSelector(state => state.counter.diff)

    이렇게 하면 해당 값들 하나라도 바뀌었을 때에만 컴포넌트가 리렌더링 된다.



1. 최적화하는 방법 2 : src/components/Counter/CounterContainer.js에서, react-redux의 shallowEqual 함수를 useSelector의 두번째 인자로 전달하기
    import { useSelector, useDispatch, shallowEqual } from 'react-redux'
    
    function CounterContainer() {
        const { number, diff } = useSelector(
            state => ({
                number: state.counter.number,
                diff: state.counter.diff
            }),
            shallowEqual
        )

    useSelector의 두번째 파라미터는 equalityFn이다.
        equalityFn?: (left: any, right: any) => boolean
        이전 값과 다음 값을 비교하여 true가 나오면 리렌더링을 하지 않고 false가 나오면 리렌더링을 한다.
    shallowEqual은 react-redux에 내장되어있는 함수로써, 객체 안의 "가장 겉에 있는 값"들을 모두 비교해줍니다.
        여기서 겉에 있는 값이란, 만약 다음과 같은 객체가 있다면
        const object = {
            a: { x: 3, y: 2, z: 1 },
            b: 1,
            c: [{ id: 1 }]
        }
    가장 겉에 있는 값은 object.a, object.b, object.c 이므로 여기 값들만 비교하고,
    shallowEqual 에서는 해당 값들만 비교하고 object.a.x 또는 object.c[0] 값은 비교하지 않는다.



1. 테스트 : 둘 중 하나의 방식으로 최적화를 해주고, 컨테이너 컴포넌트에 불필요한 리렌더링이 없는지 확인
    $ cd app1
    $ npm start
