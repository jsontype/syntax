[SASS, CSS module 조합]

1. SASS, CSS module의 조합이 가능할까?
  물론이다.
  ★ sass, css-module는 서로 배타적인 것이 아니라, 함께 사용할 수 있다. (*.module.scss 확장자 사용)
  ★ styled-component의 *.js(또는 *.jsx, *.tsx 등)을 함께 쓴다면, 셋을 동시에 쓸수도 있는 것이다.

1. src/Button.module.css 파일명 수정
  Button.module.scss로 확장자 수정

1. src/Button.module.scss 수정 : scss도 적용하기
  // 변수 선언
  $blue: #228be6;

  .button {
    // 색상 변수
    background: $blue;

    // 버튼 스타일
    display: inline-flex;
    color: white;
    font-weight: bold;
    outline: none;
    border-radius: 4px;
    border: none;
    cursor: pointer;
    align-items: center;
    justify-content: center;
    width: 110px;
    height: 2.25rem;
    padding-left: 1rem;
    padding-right: 1rem;
    font-size: 1rem;

    // 가상 클래스
    // &:hover는 .Button:hover를 의미한다.
    &:hover {
      // lighten() : 색상 10% 밝게
      background: lighten($blue, 10%);
    }

    &:active {
      // darken() : 색상 10% 어둡게
      background: darken($blue, 10%);
    }

    // 사이즈 관리
    &.large {
      height: 3rem;
      padding-left: 1rem;
      padding-right: 1rem;
      font-size: 1.25rem;
    }

    &.medium {
      height: 2.25rem;
      padding-left: 1rem;
      padding-right: 1rem;
      font-size: 1rem;
    }

    &.small {
      height: 1.75rem;
      padding-left: 1rem;
      padding-right: 1rem;
      font-size: 0.875rem;
    }

    // 버튼이 함께 있을 때 우측 버튼에 여백을 설정
    // & + &는 .Button + .Button를 의미한다.
    // + 는 "인접했을 때"를 뜻하는 선택자 옵션이다.
    &+& {
      margin-left: 1rem;
    }
  }

1. src/components/Button.js 수정 : scss 파일로 임포트 변경, (원한다면) classNames 라이브러리도 도입하기
  import React from "react"
  import styles from "./Button.module.scss"
  // import classNames from "classnames"

  function Button({ children, size }) {
    // npm i classnames : 조건부 스타일링을 할 때 아래처럼 함수의 인자에 문자열, 배열, 객체 등을 전달하여 손쉽게 문자열을 조합 할 수 있다.
    // classNames('foo', 'bar'); // => 'foo bar'
    // classNames('foo', { bar: true }); // => 'foo bar'
    // classNames({ 'foo-bar': true }); // => 'foo-bar'
    // classNames({ 'foo-bar': false }); // => ''
    // classNames({ foo: true }, { bar: true }); // => 'foo bar'
    // classNames({ foo: true, bar: true }); // => 'foo bar'
    // classNames(['foo', 'bar']); // => 'foo bar'
    // classNames('foo', { bar: true, duck: false }, 'baz', { quux: true }); // => 'foo bar baz quux'
    // classNames(null, false, 'bar', undefined, 0, 1, { baz: null }, ''); // => 'bar 1' (* false, null, 0, undefined 는 무시된다.)

    // classnames 사용 후
    // return <button className={classNames("button", size)}>{children}</button>
    // classnames 사용 전1
    // return <button className={['button', size].join(' ')}>{children}</button>
    // classnames 사용 전2
    return (
      <button className={`${styles.button} ${styles[size]}`}>{children}</button>
    )
  }

  Button.defaultProps = {
    size: "medium",
  }

  export default Button

1. 테스트 : 브라우져의 F12에서, Button의 클래스 이름이 고유한 클래스명으로 자동변경된 것을 확인
  $ cd app1
  $ npm start
