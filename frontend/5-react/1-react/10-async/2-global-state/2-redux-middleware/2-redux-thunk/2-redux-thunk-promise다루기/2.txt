[Redux-thunk로 Promise 다루기]

1. redux-thunk를 사용하여 Promise를 다루는 방법을 알아보겠다.

1. src/api/posts.js 생성 : API 만들기
    // n 밀리세컨드동안 기다리는 프로미스를 만들어주는 함수
    const sleep = n => new Promise(resolve => setTimeout(resolve, n))

    // 더미 post 목록 데이터
    const posts = [
        {
            id: 1,
            title: '리덕스 미들웨어를 배워봅시다',
            body: '리덕스 미들웨어를 직접 만들어보면 이해하기 쉽죠.'
        },
        {
            id: 2,
            title: 'redux-thunk를 사용해봅시다',
            body: 'redux-thunk를 사용해서 비동기 작업을 처리해봅시다!'
        },
        {
            id: 3,
            title: 'redux-saga도 사용해봅시다',
            body:
                '나중엔 redux-saga를 사용해서 비동기 작업을 처리하는 방법도 배워볼 거예요.'
        }
    ]

    // post 목록을 가져오는 비동기 함수
    export const getPosts = async () => {
        await sleep(500) // 0.5초 쉬고
        return posts // posts 배열을 리턴한다.
    }

    // ID로 post를 조회하는 비동기 함수
    export const getPostById = async id => {
        await sleep(500) // 0.5초 쉬고
        return posts.find(post => post.id === id) // id가 일치하는 post를 반환한다.
    }



1. src/lib/asyncUtils.js 생성 : Thunk 함수를 만들 때 사용할 비동기 함수들을 미리 선언해두기
    /* Thunk 함수를 만들 때 사용할 비동기 함수들 모음 */
    // 이 파일에 있는 아래 함수들을 따로 선언하지 않고, 바로 posts 리덕스 모듈(src/modules/posts.js)에 넣어서 제작해도 되지만, 코드가 지저분해진다.
    // 사전에 리덕스 모듈 중복 제거를 위한 리팩토링을 하는 것이기도 하다.

    // Promise에 기반한 Thunk를 만들어주는 함수
    export const createPromiseThunk = (type, promiseCreator) => {
        // 성공, 실패 문자열 변수 선언
        const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`]

        // 이 함수는 promiseCreator가 단 하나의 파라미터만 받는다는 전제하에 작성되었다.
        // 만약 여러 종류의 파라미터를 전달해야하는 상황이라면, 객체 타입 파라미터를 받아오면 된다. -> 예: writeComment({ postId: 1, text: '댓글 내용' })
        return param => async dispatch => {
            // 요청 시작
            dispatch({ type, param })
            try {
                // 결과물을 payload에 담는다.
                const payload = await promiseCreator(param)
                // dispatch가 성공했을 때의 처리
                dispatch({ type: SUCCESS, payload })
            } catch (e) {
                // dispatch가 실패했을 때의 처리
                dispatch({ type: ERROR, payload: e, error: true })
            }
        }
    }

    // 리듀서에서 사용할 유틸 함수 모음
    export const reducerUtils = {
        // 초기 state : 초기 data 값은 기본적으로 null이지만 바꿀 수도 있다.
        initial: (initialData = null) => ({
            loading: false,
            data: initialData,
            error: null
        }),
        // 로딩중 state :  prevState의 경우엔 기본값은 null이지만 값을 지정하면 prevState 값을 유지시켜 쓸 수 있다.
        loading: (prevState = null) => ({
            loading: true,
            data: prevState,
            error: null
        }),
        // 성공시 state
        success: payload => ({
            loading: false,
            data: payload,
            error: null
        }),
        // 실패시 state
        error: error => ({
            loading: false,
            data: null,
            error: error
        })
    }

    // 비동기 관련 액션들을 처리하는 리듀서 함수
    export const handleAsyncActions = (type, key) => { // type은 액션타입, key는 state의 key(예: posts, post)
        const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`]
        return (state, action) => {
            switch (action.type) {
                case type:
                    return {
                        ...state,
                        [key]: reducerUtils.loading()
                    }
                case SUCCESS:
                    return {
                        ...state,
                        [key]: reducerUtils.success(action.payload)
                    }
                case ERROR:
                    return {
                        ...state,
                        [key]: reducerUtils.error(action.payload)
                    }
                default:
                    return state
            }
        }
    }



1. src/modules/posts.js 생성 : posts 리덕스 모듈 만들기
    /* 
        [프로미스를 다루는 리덕스 모듈 만들기]

        * 프로미스를 다루는 리덕스 모듈을 다룰 때의 고려사항은 다음과 같다.
            1. 액션타입 생성 : 리듀서에서 액션에 따라 로딩중, 결과, 에러 상태를 변경해주어야 한다.
            2. 액션타입함수 생성 : 각 프로미스(posts, post)마다 각각 다른 thunk 함수를 만들어주어야 한다.
            3. 리듀서 생성: 프로미스가 시작, 성공, 실패했을때 각각 다른 액션을 디스패치 해야 한다.
    */

    // api/posts.js 안의 모든 함수들을 임포트
    import * as postsAPI from '../api/posts'
    // lib/asyncUtils 안의 리팩토링용 함수들을 임포트
    import {
        createPromiseThunk,
        reducerUtils,
        handleAsyncActions
    } from '../lib/asyncUtils'

    // 액션타입
    // 포스트 여러개 조회하기
    const GET_POSTS = 'GET_POSTS' // 요청 시작
    const GET_POSTS_SUCCESS = 'GET_POSTS_SUCCESS' // 요청 성공
    const GET_POSTS_ERROR = 'GET_POSTS_ERROR' // 요청 실패
    // 포스트 하나 조회하기
    const GET_POST = 'GET_POST' // 요청 시작
    const GET_POST_SUCCESS = 'GET_POST_SUCCESS' // 요청 성공
    const GET_POST_ERROR = 'GET_POST_ERROR' // 요청 실패

    // ★ 액션타입함수를 Thunk 함수로 대체 : 액션타입함수를 생성하는 대신 Thunk 함수를 생성한다. 
    // lib/asyncUtils.js를 createPromiseThunk() 함수를 통해 심플하게 중복제거 리팩토링 된 코드이다.
    export const getPosts = createPromiseThunk(GET_POSTS, postsAPI.getPosts)
    export const getPost = createPromiseThunk(GET_POST, postsAPI.getPostById)

    // ★ 초기값 : 초기값를 asyncUtils 함수를 통해 생성하기
    // lib/asyncUtils.js의 initial() 함수를 통해 심플하게 중복제거 리팩토링 된 코드이다.
    const initialState = {
        posts: reducerUtils.initial(),
        post: reducerUtils.initial()
    }

    // ★ 리듀서
    export default function posts (state = initialState, action) {
        switch (action.type) {
            case GET_POSTS:
            case GET_POSTS_SUCCESS:
            case GET_POSTS_ERROR:
                // return handleAsyncActions(GET_POSTS, 'posts')(state, action) // 아래 리턴과 동일하다.
                const postsReducer = handleAsyncActions(GET_POSTS, 'posts')
                return postsReducer(state, action)
            case GET_POST:
            case GET_POST_SUCCESS:
            case GET_POST_ERROR:
                // return handleAsyncActions(GET_POST, 'post')(state, action) // 아래 리턴과 동일하다.
                const postReducer = handleAsyncActions(GET_POST, 'post')
                return postReducer(state, action)
            default:
                return state
        }
    }



1. src/modules/index.js 수정 : posts 모듈을 루트 리듀서에 등록해주기
    import { combineReducers } from 'redux'
    import counter from './counter'
    import posts from './posts'

    // 루트리듀서 생성 : 지금은 서브리듀서가 counter, posts 두개가 되었다.
    const rootReducer = combineReducers({ counter, posts })

    export default rootReducer



1. src/components/PostList.js 생성 : 포스트 목록의 프리젠테이셔널 컴포넌트를 만들기
    import React from 'react'

    function PostList ({ posts }) {
        return (
            <ul>
                {posts.map(post => (
                    <li key={post.id}>
                        {post.title}
                    </li>
                ))}
            </ul>
        )
    }

    export default PostList



1. src/containers/PostListContainer.js 생성 : 포스트 목록의 컨테이너 컴포넌트를 만들기
    import React, { useEffect } from 'react'
    import { useSelector, useDispatch } from 'react-redux'
    import PostList from '../components/PostList'
    import { getPosts } from '../modules/posts'

    function PostListContainer () {
        const { data, loading, error } = useSelector(state => state.posts.posts)
        const dispatch = useDispatch()

        // 컴포넌트 마운트 후 포스트 목록 요청
        useEffect(() => {
            dispatch(getPosts())
        }, [dispatch])

        if (loading) return <div>로딩중...</div>
        if (error) return <div>에러 발생!</div>
        if (!data) return null
        return <PostList posts={data} />
    }

    export default PostListContainer



1. src/App.js : PostListContainer 컴포넌트를 App에서 렌더링하기
    import React from 'react'
    import CounterContainer from './containers/CounterContainer'
    import PostListContainer from './containers/PostListContainer'

    function App () {
        return <PostListContainer />
    }

    export default App



1. 테스트 : 콘솔로그 열고 비동기 작업이 잘 처리되고 있는지 확인
    $ cd app1
    $ npm start
