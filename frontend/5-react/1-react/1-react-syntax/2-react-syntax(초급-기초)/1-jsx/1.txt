[JSX 문법]

1. React.js 구조
  public/ : 정적파일폴더(html, 이미지, 영상, 음악 파일 모음)(추후 추가)
  src/components/ : 컴포넌트폴더(버튼같은 부품 모음)(추후 추가)
  src/App.js : 메인페이지
  src/index.js : 메인페이지 윗 단계로, 앱에서 사용할 라이브러리들을 적용하는 곳이다.
    react-dom : 리액트와 돔을 연결한다.
    <App /> : 메인페이지 컴포넌트를 불러온다.
    <React.StrictMode> : StrictMode(애플리케이션 내의 잠재적인 문제를 알아내기 위한 도구)를 씌운다.
      개발 모드에서만 활성화되기 때문에, 프로덕션 빌드에는 영향을 끼치지 않는다.
      * 이를 위해서 사전에 한번 더 렌더링을 하기 때문에, 개발 도중 컴포넌트의 Render가 2번씩 반복되는 현상이 발생한다. 
      * 이는 <React.StrictMode> 태그를 지운채 실행하면 해결이 된다.

1. JSX 문법 정의
  JSX 문법이란, React에서 사용하는, JS에 XML을 추가한 문법이다.
  XML이란, Extensible Markup Language의 약자로서,
    HTML(HyperText Markup Language)과 달리 태그가 미리 정해지지 않고, 
    data를 표현하는게 아닌 전달하는 데에 포커스를 맞춘 언어이다.
    (XML은 HTML과 달리 사용자가 직접 태그를 정의할 수 있다.)

1. ★★ JSX 문법 특징
  XML 부분에 JS 변수나 함수 쓸 때는 {}으로 묶어서
  XML 부분에 class 대신 className으로 사용
  XML 부분에 부모 Tag는 하나만 가능 : div 쓰기 싫을 때는 fragment(<></>) 써도 된다.
  XML 부분에 태그에 style을 넣을 때는 style={{ fontSize: '30px' }}과 같이 객체형으로 넣는다.

1. 불필요 부분을, 연동까지 삭제

1. src/App.js 수정 : {}을 통해 데이터바인딩을 한다.
  // CSS 임포트
  import './App.css'

  function App() {
    // JS 로직
    console.log('hello')
    const name = 'Shin'

    // HTML 돔
    return (
      <div className="hello">
        {console.log('hello')}
        <div>{name}</div>
      </div>
    )
  }

  export default App

1. src/App.css 수정
  .hello {
    color: red;
  }

1. 테스트
  $ cd app1
  $ npm start (또는 yarn start)
  http://localhost:3000

1. 보충 : 확장자에 대하여
  앞으로는 화면, 로직 구분 없이 "*.js"로 구현할 예정이지만,
  xml 유무에 따라 "*.jsx", "*.js"로 확장자를 구분하기도 한다.
  타입스크립트라면 "*.tsx", "*.ts"로 확장자를 구분한다.
  이 점을 참고해두고 가자.
