[Composables: useTodos]

1. 사전준비 : 프로젝트를 새로 깔지 않고, 이전 챕터에서의 코드를 그대로 카피해서 가지고 온다.

1. src/composables/useTodos.js 작성 : 로직 분리를 위한 커스텀훅 만들기
  import { useState } from "react"

  export default function useTodos() {
    const [todos, setTodos] = useState([])
    const [todoKey, setTodoKey] = useState(todos.length + 1)

    // Insert
    const addTodo = (text) => {
      const newTodo = { id: todoKey, title: text, completed: false }
      setTodoKey(todoKey + 1)
      setTodos([...todos, newTodo])
    }

    // Delete
    const delTodo = (id) => {
      const newTodos = todos.filter((todo) => todo.id !== id)
      setTodos(newTodos)
    }

    // Update
    const toggleTodo = (id) => {
      const newTodos = todos.map((todo) =>
        todo.id === id ? { ...todo, completed: !todo.completed } : todo
      )
      setTodos(newTodos)
    }

    return { todos, addTodo, delTodo, toggleTodo }
  }

1. src/pages/Todos/index.js 수정 : 화면에서 로직을 분리
  import React, { useState } from "react"
  import Checkbox from "@mui/material/Checkbox"
  import IconButton from "@mui/material/IconButton"
  import DeleteIcon from "@mui/icons-material/Delete"
  import TextField from "@mui/material/TextField"
  import Label from "../../components/Atoms/Label"
  import NormalButton from "../../components/Atoms/NormalButton"
  import useTodos from "../../composables/useTodos"

  export default function Todos() {
    const todos = useTodos()

    // 나중에 인풋 발리데이션 다루는 커스텀훅은 utils 폴더로 분리할 예정
    const [inputText, setInputText] = useState("")

    // 나중에 API 다루는 커스텀훅은 connectors 폴더로 분리할 예정
    // useEffect(() => {
    //   fetch("https://jsonplaceholder.typicode.com/todos")
    //     .then((res) => res.json())
    //     .then((json) => {
    //       const result = json.filter((item) => item.userId === 1)
    //       setTodos(result)
    //       setTodoKey(result.length + 1)
    //     })
    // }, [])

    const render = todos.todos.map((todo) => {
      return (
        <div key={todo.id}>
          <div>
            <span
              className={
                todo.completed ? "text-gray-500 line-through" : "font-bold"
              }
              onClick={() => todos.toggleTodo(todo.id)}
            >
              #{todo.id} / {todo.title}
            </span>
            <Checkbox
              checked={todo.completed}
              onChange={() => todos.toggleTodo(todo.id)}
            />
            <IconButton
              aria-label="delete"
              onClick={() => todos.delTodo(todo.id)}
            >
              <DeleteIcon />
            </IconButton>
          </div>
        </div>
      )
    })

    // Methods
    const addTodo = (inputText) => {
      todos.addTodo(inputText)
      setInputText("")
    }

    return (
      <div>
        <Label text="Todos" />

        <div className="mb-[20px]">
          <span className="mr-[5px]">
            <TextField
              value={inputText}
              size="small"
              required
              placeholder="New Todo"
              onChange={(e) => {
                setInputText(e.target.value)
              }}
            />
          </span>
          <NormalButton buttonText="SEND" onClick={() => addTodo(inputText)} />
        </div>
        <div>{render}</div>
      </div>
    )
  }

1. 테스트
  $ cd app1
  $ npm run dev
