[useMemo의 비용 계산]

1. 사전준비 : 프로젝트를 새로 깔지 않고, 이전 챕터에서의 코드를 그대로 카피해서 가지고 온다.

1. 최적화의 cost를 계산해야하는 이유
    최적화의 cost가 안 했을 때의 cost보다 더 높거나, 차이가 없다면, 오히려 최적화를 안 하는 게 더 나을 수 있다.
    최적화의 cost를 계산하는 방법을 소스코드를 통해 알아보자.

1. useMemo는 언제 써야할까?
    컴퓨터를 활용하는 비싼 연산의 값(ex. 피보나치 수열, 소수 구하기 등)

1. src/App.js 수정
    import React, { useState, useMemo } from "react"

    export default function App() {
        // App 컴포넌트 렌더링
        console.log("render App")
        const [count1, setCount1] = useState(0)
        const [count2, setCount2] = useState(0)

        // 주석토글 1->2는 아래 함수를 쓰지 않고, 주석토글 3->4는 아래 함수를 쓴다. 하나씩 열어보면서 알아보자.
        const double = count => {
            let i = 0
            while (i < 3000000000) i++
            return count * 2
        }



        // <주석토글 1> : "재렌더링 비용 <= useMemo 실행비용"이므로 1 -> 2로 가는 것이 의미가 없다.
        const Counter = (count2) => {
          console.log("render Counter")
          const doubledCount = count2 * 2
          return (
            `Counter: ${count2}, ${doubledCount}`
          )
        }
      
        // <주석토글 2> : "재렌더링 비용 <= useMemo 실행비용"이므로 1 -> 2로 가는 것이 의미가 없다.
        // const Counter = useMemo(() => {
        //   console.log("render Counter")
        //   const doubledCount = count2 * 2
        //   return (
        //     <p>Counter: {count2}, {doubledCount}</p>
        //   )
        // }, [count2])
        
        // <주석토글 3> : "재렌더링 비용 >>> useMemo 실행비용"이므로 3 -> 4로 가서 useMemo를 사용하면 큰 효과를 얻을 수 있다.
        // const Counter = (count2) => {
        //   console.log("render Counter")
        //   const doubledCount = double(count2)
        //   return (
        //     `Counter: ${count2}, ${doubledCount}`
        //   )
        // }
      
        // <주석토글 4> : "재렌더링 비용 >>> useMemo 실행비용"이므로 3 -> 4로 가서 useMemo를 사용하면 큰 효과를 얻을 수 있다.
        // const Counter = useMemo(() => {
        //   console.log("render Counter")
        //   const doubledCount = double(count2) // 이것 때문에 하는 게 더 낫다.
        //   return (
        //     <p>Counter: {count2}, {doubledCount}</p>
        //   )
        // }, [count2])
      


        return (
            <>
                <p>Counter: {count1}</p>
                <button onClick={() => setCount1(count1 + 1)}>Increment count1</button>

                {/* 주석토글 1, 3의 경우 */}
                <p>{Counter(count2)}</p>
                {/* 주석토글 2, 4의 경우 */}
                {/* {Counter} */}
                <button onClick={() => setCount2(count2 + 1)}>Increment count2</button>
            </>
        )
    }



1. 테스트 : lighthouse "기간 모드, 데스크톱 기기"에 체크해서 각각의 성능점수를 테스트 해본다.
    $ cd app1
    $ npm start
    lighthouse "기간 모드, 데스크톱 기기"에 체크
