[gitbash]

1. 관련 용어
    add . : 트럭에 바뀐 택배를 싣는 것 = staging
    commit -m "" : 택배 송장에 무슨 물건이지 적는 것
    pull request : develop 브랜치에 merge 해달라고 리뷰자에게 요청
    clone : 빈 폴더에 해당 develop 브랜치를 복제
    branch : 나뭇가지, 각 개발자가 해결해야할 이슈마다 다른 브랜치를 갖고 있다
    checkout : 보고있는 브랜치를 이동
    merge : 브랜치끼리 병합하는 것 (develop <- feat/이슈번호)
    conflict : 브랜치끼리 병합할 때에 소스가 서로 달라 충돌이 일어나는 것
    local branch : 내 컴퓨터 안에 있는 브랜치
    remote branch : 깃허브 안에 있는 브랜치

1. 다수 프로젝트 작업의 흐름
    초기 권한 세팅
        PL : 깃허브에서 세팅 - manage access - collaborator 깃 유저네임으로 추가
        PG : 메일로 권한 받음 - git 환경구축 - 클론

    clone : 맨 처음 세팅하기
        git clone [url] : url에 해당하는 레포지토리를 클론한다. 부른 위치에서 새 폴더로 생성된다.

    fetch : 이슈를 판 뒤, 우선적으로 할 일
        git fetch origin : 리모트 레포지토리에 있는 git을 전부 fetch한다.
        git pull origin feat/1 : 리모트 레포지토리에 있는 (신규 fetch된) git들로 local을 갱신한다. 
            작업 시작하기 전이나 작업중간에 타 브랜치로부터 merge가 완료된 경우 늘 이를 진행한다.

    branch : 체크아웃
        git checkout feat/1 : "github등을 통해 만들어져서 local에 이미 존재하는" feat/1이라는 branch에 체크아웃
        * git checkout -b feat/1 : local에 feat/1이라는 branch를 생성하면서 체크아웃
            이슈를 해결할 브랜치를 github를 통해 만들지 않을 경우 이 방법을 쓴다. 단, 이때는 commit 명에 #이슈번호를 써서 연동해두는 게 좋다.

    push : 제조 후엔 add, commit, push. 외워둘 것
        git add 올릴파일명(전부일경우에는 .)
        git commit -m "메시지"
        git push origin feat/1 : remote branch에도 해당 branch를 작성하며 올리기

    mr : merge request - 병합있을 시 해결 - 리뷰자에 PR 요청 연락 - merged의 흐름
        각자가 브랜치 작업 후 각자 브랜치에 올리기     
        기능이 완료되었으면 기트허브에 들어가 branch에 커밋한 것의 new pull request를 누른다.
            커밋할 때의 주의사항을 지켰는지 확인한다.
            리뷰자를 지정한다.
            PR을 실시한다.
        기존 master와 충돌이 일어나서 풀리퀘스트가 안될 경우, 로컬 feat/1에 체크아웃한 상태로 master 최신 브랜치를 선택후 패치 - 머지(충돌 both ok 작업)한 뒤 진행한다.
            git checkout feat/1
            기존소스를 다른 폴더에 백업한다.
            git merge master : master 소스를 현 feat/1이라는 branch에 머지한다.
            vscode에서 current/incoming/both changes를 통해서 머지를 완료한다.   
        메신져로 리뷰자에게 PR 리뷰를 요청한다고 연락한다.
        깃허브의 PR창에서 리뷰자가 master 브랜치에 feat/1을 병합해준다. (실습에선 master, 현장에선 develop에 할 것이다)

    closing : merged된 후 기존 branch삭제
        git checkout master : 최신 master 깃을 리모트에서 체크아웃하고 master 로컬 branch를 생성한다.
        git branch -d feat/1 : 로컬 branch 삭제. -D는 commit 이력이 남아있어도 강제로 branch를 삭제한다는 옵션임.
        git push origin --delete feat/1 : 원격 remote branch 삭제(1)
        * 다른 방법으로, 깃허브의 PR창에서 Delete Branch를 눌러서 할 수도 있다.
        * 다른 방법으로, 소스트리를 사용하면 모든 브랜치를 한눈에 볼 수 있어 편리하다.
        깃허브의 issue를 close한다.

    reopen : 새로운 이슈에 대응
        git checkout -b feat/2 : 새로운 이름(feature/2)의 로컬 branch 생성

    stash : 구현 후 에러가 나서 안 돌아갈 때, 이전 커밋에서는 돌아갔었는지 확인해볼 때 사용한다.
        git stash : 이전 커밋으로 되돌려놓고 다시 돌려볼 때 사용한다.
        git stash pop : 다시 현재 커밋으로 되돌아올 때 사용한다.

    reset HEAD^ : 이전 커밋을 취소하고 add 하기 전 상태로 돌려놓는다.
        git log : 리셋 하기 전 커밋 몇번까지 돌려놔야하는지 확인한다.
        git reset HEAD^ : 한번 되돌려놓는다.
        git reset HEAD^^ : 두번 되돌려놓는다.
        git reset HEAD^^^ : 세번 되돌려놓는다.
        git push origin [branch name] -f : 되돌려진 상태에서 새로 commit을 한 것을, 강제로 다시 푸시한다. 
            -f를 걸지 않으면 fast forward error에 걸릴 것이다.



1. 소스트리 사용법
    소스트리 다운받기
    원격브랜치 추가해서 기존 깃 프로젝트 폴더와 연결
    계정연결 방법 :         
        - 깃허브 - 우측상단 유저 아이콘 클릭 - Settings -  Developer settings - Personal access tokens - Generate new token - Note에 메모 적고, No expiration, 권한 전부 체크 - 확인
        - 생성된 토큰키 메모해두기
        - 토큰키를 깃허브 비밀번호로 해서 로그인 연동시키면 된다.

        
        
1. 숙지사항들
    핵심내용 : 브랜치, 머지, 풀리퀘스트
        코드는 로컬브랜치로 관리된다. (커밋시 로컬브랜치에 커밋후 리모트 브랜치에 푸시한다)
        머지를 사용한다.
        master를 직접 쓰지 않고, develop 브랜치를 master처럼 사용한다.

    커밋할 때의 주의사항
        로컬브랜치를 만들때 원칙에 따라 한다. (예: feature/name+?)
        커밋전에 로그상 버그는 전부 디버깅이 원칙이다.
        커밋전에 콘솔로그 정리
        커밋전에 함수는 앞 주석부분에 @param지정을 해준다.
        커밋전에 let이 있으면 가능한 한 const(상수변수, 배열, 객체, 함수 주소참조 하는 것들)로 바꾼다.

    PR시의 절차
        만일을 대비해 지금까지 한 코드를 어딘가에 잘 백업해두자.
        상기 주의사항을 잘 지킨 상태로 커밋을 해둔다.
        내 로컬 브랜치(feature/name)를 체크아웃으로 해서 develop 최신버전(소스트리의 리모트에 있는 origin/develop)을 팻치후에 내 브랜치로 머지한다. (풀 옆에 숫자 뱃지가 없어질 거임)
        컨플릭트가 있을 경우 대응해준다. (incoming할 지 current 쓸지 both를 쓸지 등을 결정한다.)
        로컬상의 브랜치(feature/name)을 푸시해 리모트(origin/feature/name)으로 내려보낸다.
        풀리퀘스트를 누르고, 기능명 쓰고, 리뷰자 지정하고, PR후 리뷰자에게 슬랙을 보내준다.
        automatically merge가 불가능한 상황이면 소스트리에서 디벨롭 최신 머지부터 다시하고(풀에 숫자가 안뜨면 팻치 후에 풀해보자) 빨간 줄 충돌이 있으면 처리 후 다시 풀리퀘스트 한다.

    PR 후, 코드에 문제가 있어서 수정대응 요청이 올 시
        커멘트가 달렸을 때는 커멘트의 대응을 해준다.
        머지 컨플릭트 대응을 하라고 할 때에는 최신화된 소스를 클릭후 내 브랜치에서 "머지"한 뒤 충돌이 난 부분을 대응한다.

    PR 후, 코드에 문제가 없어서 머지 완료가 됐을 시
        다음 머지 전까지 코드 대대적 수정은 안하고, 주석정리나 에러잡기 하며 대기
        closed request 누른 뒤, 삭제
        리모트 브랜치 삭제, 로컬 브랜치 삭제
        git삭제, 모든 워크스페이스 내의 파일 백업후 삭제
        $ npm i , $ npm start 후 테스트
        feature/name으로 새 로컬 브랜치 작성
