[파라미터]

1. 페이지 주소 정의
    값을 페이지 주소로 전달해야 할 때, 그 형태는 파라미터와 쿼리로 나뉘어질 수 있다.

1. 파라미터로 페이지 주소 정의
    파라미터 : /profiles/yang (특정 id나 이름을 가지고 조회를 할 때 주로 사용)

    
    
1. src/index.js 수정 : 라우터를 연결
  import React from 'react'
  import ReactDOM from 'react-dom'
  // react-router-dom 라이브러리로부터 BrowserRouter 함수를 임포트한다.
  import { BrowserRouter } from 'react-router-dom'
  import App from './App'

  ReactDOM.render(
    // App을 BrowserRouter로 감싸면 라우터를 사용할 수 있게 된다.
    <BrowserRouter>
      <App />
    </BrowserRouter>,
    document.getElementById('root')
  )



1. src/Profile.js 생성 : 프로필 페이지 만들기
    import React from 'react'
    // 파라미터값을 받기 위해 useParams 임포트
    import { useParams } from 'react-router-dom'

    // 프로필에서 사용 할 데이터
    const profileData = {
        jsontype: {
            name: 'D.Yang',
            description:
                'Frontend Engineer'
        },
        kimkim12: {
            name: 'K.Kim',
            description: 'Backend Engineer'
        }
    }

    /**
    * URL내의 파라미터를 통해 username과 profile 정보를 추출하여 표시한다.
    * /profile/username 이런식으로 뒷부분에 username을 넣어줄 때 해당 값을 파라미터로 받을 것이다.
    * @param {object} match 현재 URL주소가 Route 컴포넌트에서 정한 규칙과 어떻게 일치하는지에 대한 정보가 들어있다.
    * @returns 렌더링 엘리먼트
    */
    export default function Profile () {
        // 파라미터를 받아올 땐 useParams() 값을 참조한다.
        const params = useParams()
        const { username } = params
        console.log(params)
        const profile = profileData[username]
        if (!profile) {
            return <div>존재하지 않는 유저입니다.</div>
        }
        return (
            <div>
                <h3>
                    {username}({profile.name})
                </h3>
                <p>{profile.description}</p>
            </div>
        )
    }



1. src/Profiles.js 생성 : 프로필리스트 페이지 만들기
    import React from 'react'
    import { Link } from 'react-router-dom'

    export default function Profiles () {
        return (
            <div>
                <h3>유저 목록:</h3>
                <ul>
                    <li>
                        <Link to="../profile/jsontype">jsontype</Link>
                    </li>
                    <li>
                        <Link to="../profile/kimkim12">kimkim12</Link>
                    </li>
                </ul>
                <div>유저를 선택해주세요.</div>
            </div>
        )
    }



1. src/App.js 수정 : 이제 Profile을 App 에서 적용한다. 
    import React from 'react'
    import { Routes, Route, Link } from 'react-router-dom'
    import About from './About'
    import Home from './Home'
    import './App.css'
    // 프로필 임포트
    import Profile from './Profile'
    // 프로필리스트 임포트
    import Profiles from './Profiles'

    export default function App () {
        return (
            <div>
                <ul>
                    <li>
                        <Link to="/">홈</Link>
                    </li>
                    <li>
                        <Link to="/about">소개</Link>
                    </li>
                    <li>
                        <Link to="/profiles">프로필 목록</Link>
                    </li>
                </ul>
                <hr />
                <Routes>
                    <Route path="/" exact={true} element={<Home />} />
                    <Route path="/about" element={<About />} />
                    {/* 프로필 페이지 호출 : 아래 path 규칙대로 넣으면 Profile 컴포넌트에서 match props를 통하여 값을 전달받게 된다. */}
                    <Route path="/profile" element={<Profile />}>
                        <Route path=":username" element={<Profile />} />
                    </Route>
                    {/* 프로필리스트 페이지 호출 */}
                    <Route path="/profiles" element={<Profiles />} />
                </Routes>
            </div>
        )
    }



1. 테스트 : URL 창에 직접 입력하여 들어가서, 파라미터 데이터가 잘 나타나는지 확인
    cd app1
    npm start
    주소창에 http://localhost:3000/profile/jsontype 입력
    주소창에 http://localhost:3000/profile/kimkim12 입력
    주소창에 http://localhost:3000/profile/error 입력 (error 외에 아무거나 입력해도 된다)
