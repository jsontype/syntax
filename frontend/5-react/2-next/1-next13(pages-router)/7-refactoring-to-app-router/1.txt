[Pages Router에서 App Router로의 리팩토링 방법 정리]

1. 사전준비: 프로젝트를 새로 깔지 않고, 이전 챕터에서의 코드를 그대로 카피해서 가지고 온다.
  똑같이 두번 가져와서,
  첫번째는 app1-before 폴더로 바꾸고, 내용은 그대로 두고,
  두번째는 app2-after 폴더로 바꾸고 아래대로 수정한다.

1. Pages-router에서 App-router로 리팩토링해야하는 이유
  - 퍼포먼스 향상
    초기 로딩 속도, TTFB(Time To First Byte), 페이지 인터렉티브 시간(페이지의 첫 렌더링 완료 시간) 단축, 코드 스플리팅 자동화로 개발자가 최적화에 신경쓸 필요 감소, 더 빠른 새로고침 및 개발 서버 성능 향상 등
    실제효과: 현재 앱을 기준으로 설명하면, 최적화된 상태에서 91점을 96점 이상으로 올릴 수 있다. (테스트에서 확인 가능)
  - 가독성 향상
    데이터 페칭 로직이 컴포넌트 내에 직접 위치하여 "응집도" 높아짐:
      pages-router는 src/api 폴더에 데이터 페칭 로직을 분리해놓고 export / import 해서 쓰던 방식 
      → app-router의 async 함수 방식으로 컴포넌트 내에서 API 페칭 로직을 직접 작성
    서버 / 클라이언트 컴포넌트 분리
      pages-router는 SSR과 CSR을 분리하지 않고, CSR이어도 use client 지시어도 별도로 사용하지 않음
      → app-router는 SSR에서 CSR 부분을 분리한 뒤 임포트해서 사용하고, CSR일 경우 use client 지시어 사용을 강제해 컴포넌트 구조가 더 명확해짐
    로딩 및 에러 상태 관리 간소화 (loading.tsx, error.tsx) 등    
  - 기능 향상
    페이지별 메타데이터 선언 가능
    레이아웃과 페이지의 명확한 분리로 코드 구성 개선
    레이아웃 사용을 통한 "부분적 렌더링, 부분적 라우팅"으로 더 부드러운 UX 구현 가능 (SPA처럼 동작 가능)
    중첩 레이아웃으로 코드 재사용성 증가
    SEO, 보안 측면에서도 다양한 방식으로 향상됨

1. package.json 확인: Next.js 버전 확인 (13.4 이상 필요)
  $ npm i next@13 // NEXT13인 경우
  - 또는 NEXT14~15를 쓰고 있다면 그냥 @latest로 설치

1. src/app 생성: 폴더 생성

1. src/components/BackButton.tsx 수정
  - use client 지시어 추가
  - next/router → next/navigation 임포트처 변경
  - text-black 버튼 문구 색상 변경

1. src/components/MovieDetailComment.tsx 수정
  - [Slug] 즉 Path Parameter 의 취득방식 변경: const { id } = router.query 이 방식에서, useParams() 사용으로 변경
  - next/router → next/navigation 임포트처 변경

1. src/components/SortPulldown.tsx 수정
  - 쿼리 스트링 (?id=1234) 즉 Search Parameter 의 취득방식 변경: const { sort, limit } = router.query 이 방식에서, useSearchParams() 사용으로 변경  
  - next/router → next/navigation 임포트처 변경
  - 새로운 URL 생성시 URLSearchParams 사용으로 쿼리 스트링 파싱
  - text-black 라벨 문구 색상 변경

1. src/components/MovieList.tsx 작성
  - 서버 컴포넌트 (영화 목록을 가져오는 부분)과, 클라이언트 컴포넌트(영화 목록을 렌더링하는 부분)를 분리

1. src/pages/_app.tsx → src/app/layout.tsx 변환: 기본 구조 설정, 메타데이터 설정
  - 전역 스타일 임포트: import '@/styles/globals.css' 추가
  - 메타데이터를 export const metadata 여기서 관리하고, 기존 메타데이터 관리처인 _app.tsx, _document.tsx는 제거
  - * 향후 페이지별 중첩 layout 구현 가능

1. src/pages/index.tsx → src/app/page.tsx 변환: 홈페이지 마이그레이션
  - Head 컴포넌트 사용 중지 → metadata 설정
  - * 향후 페이지별 동적 metadata 구현 가능

1. src/pages/movies/index.tsx → src/app/movies/page.tsx 변환: 중첩라우트 페이지 마이그레이션, SSR 데이터 페칭 방식 변경
  - GetServerSideProps 사용 중지, src/api 폴더 내의 getMovies 함수 사용 중지 → 서버 컴포넌트에서 직접 데이터 페칭 ("// 영화 목록 데이터 페칭 함수" 검색)
  - Cache-Control 헤더 설정은 no-store로 간소화: app-router에서는 기본적으로 헤더 캐싱 최적화를 제공하므로, 별도로 설정할 필요 없음. 편리해짐.

1. src/pages/movies/[id]/index.tsx → src/app/movies/[id]/page.tsx 변환: 동적라우트 페이지 마이그레이션, SSG 데이터 페칭 방식 변경
  - GetStaticProps, GetStaticPaths 사용 중지 → 서버 컴포넌트에서 직접 데이터 페칭 ("// 정적 경로 생성 함수" 검색)
  - src/api 폴더 내의 getMovieDetail 함수 사용 중지 → 서버 컴포넌트에서 직접 데이터 페칭 ("// 영화 상세 데이터 페칭 함수" 검색)
  - 동적 메타데이터 구현

1. src/pages/api/hello.ts → src/app/api/hello/route.ts 변환
  - export default function handler → export async function GET(request: Request) { ... } 형태로 작성

1. src/pages/api/setCookie.ts → src/app/api/setCookie/route.ts 변환
  - export default function handler → export async function POST(request: Request) { ... } 형태로 작성

1. tsconfig.json 수정
  - plugin 추가 : next plugins 추가
  - include 추가 : next type 추가

1. 삭제해야하는 항목들: src/pages/api 디렉토리 내의 데이터 페칭 파일들, 불필요한 pages 디렉토리, pages-router 관련 파일 모두 제거
  - src/pages/api/getMovies.ts 삭제 → movies 컴포넌트 내에서 불러오는 async 함수로 작성
  - src/pages/api/getMovieDetail.ts 삭제 → movies/[id] 컴포넌트 내에서 불러오는 async 함수로 작성
  - src/pages/_app.tsx, _document.tsx, _error.tsx, _404.tsx 등 모두 삭제
  - 변환한 파일들 중 남은 것이 있다면 삭제. 근데 그냥 src/pages 폴더 전체 삭제가 필요. 남아있을 시, app-router와 충돌 발생

1. 변경 불필요한 항목들: 그 외의 src/... 들
  - 예를 들면, components, lib, styles, utils, types, hooks, contexts 등
  - 현재 앱에서는 styles 폴더만 사용하고 있으므로, styles 폴더를 그대로 유지한다.

1. 테스트: 모든 페이지 동작 확인, 라우팅, 데이터 페칭, 상태 관리 검증
  $ cd app2-after
  $ npm run dev
  http://localhost:3000/movies에서 lighthouse 점수 확인: 96점 이상으로 향상됨
