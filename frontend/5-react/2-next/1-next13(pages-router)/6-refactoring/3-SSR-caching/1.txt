[SSR 최적화: getServerSideProps에서 캐싱 기능을 사용해, 데이터 호출 시도를 줄이기]

1. 사전준비: 프로젝트를 새로 깔지 않고, 이전 챕터에서의 app2-after 코드를 그대로 카피해서 가지고 온다.
  똑같이 두번 가져와서,
  app1-before 폴더는 그대로 두고,
  app2-after 폴더는 아래대로 수정한다.
  * 복붙시 자동 임포트로 인한 트러블 예방하기
    tsconfig.json 파일을 확인해서, ["../app1-before/src/*"] 등 과거의 파일을 참조하진 않는지 확인한다
    만일 app1-before 것을 참조한다면 현재 tsconfig.json 파일처럼 수정한다.

1. 설치: app2-router에 최적화용 패키지 설치
  $ npm i css-minimizer-webpack-plugin cssnano postcss-preset-env

1. app2-router에서 라이트하우스 성능 점수 확인
  라이트하우스 통지사항(Diagnostics 항목) 중 최적화할 항목들을 확인한다.
  해당 항목들을 하나씩 프롬프트를 날려 확인. 아래는 예시이다.
    "Largest Contentful Paint element 이것만 해결"
    "이미지 랜더링을 더 빠르게 하는 방법이 필요해"
    "TTFB 80% 1,630 ms. 이게 문제야"
    "지금 상황에서 Render Delay 90% 1,690 ms 이거만 줄이면 딱 좋은데"

1. next.config.js 수정: 이미지, API 캐싱 관련 최적화
  - 이미지 관련: 이미지의 생성시 기준이 되는 디바이스 너비를 지정하여 이미지 최적화 설정
  - 이미지 관련: Largest Contentful Paint element - TTFB 해결
    서버에서 받는 속도가 느려 next.config.js 에서 캐시헤더를 추가하여 성능을 향상
  - API 캐싱 관련: 서버 사이드 웹소켓 최적화하여 back/forward 캐시 문제 해결
    
1. src/pages/index.tsx 수정: 이미지, API 캐싱 관련 최적화
  - 이미지 관련: Largest Contentful Paint image was lazily loaded 해결
    바로 화면에 보이는 이미지에 조건부 prioriy, loading을 eager, quality저하를 넣어 성능향상
  - API 캐싱 관련: API 로딩에 try/catch 블록 추가: 자세한건 [ // ! try/catch 블록의 필요성: ] 으로 검색하여 주석확인

1. 테스트
  수정한 각 페이지를 기존의 before 코드와 비교해가며 최적화 처리를 어떻게 했는지 확인

  $ cd app1-before
  $ npm run dev
  $ localhost:3000 에서 테스트

  $ cd app2-after
  $ npm run dev
  $ localhost:3001 에서 테스트

  최적화 확인: 구체적인 최적화 확인 방법은 "1-기본개념/1.txt" 참조
  - Chrome DevTools의 Performance 탭
  - Lighthouse 성능 점수
  - Network 탭의 리소스 로딩 시간
  - React DevTools의 Profiler  



[전반적인 최적화 정리]

1. 최적화 정리: 여기서 쓰지 않은 최적화 방법을 포함해서 정리해보겠다. (* 는 이번 챕터에서 실제로 진행한 것)
  - CSR memoization: 
    * useMemo로 값 메모
    * useCallback으로 함수 메모
    * memo로 컴포넌트 메모
  - SSR caching: 
    * next.config.js 설정을 통해 메모리 캐시 사용
    * getServerSideProp 함수 내에서 try/catch 블록과 signal 도입으로 지연되는 요청 대해 블록 처리를 해서 성능 최적화
    getServerSideProp로 페칭할 때 getInitialProps로 초기데이터 설정
  - SSG ISR:
    * getStaticProps, getStaticPaths를 통해서 빌드 시에 페이지를 정적으로 생성
    revalidate 옵션을 통해 ISR 기능 구현
  - 이미지 최적화:
    * next/image 에서 <Image> 태그를 임포트해서 사용하고, 그 안에서, 아래와 같은 설정을 통해, LCP적 측면에서, 이미지 최적화를 더욱 강력하게 할 수 있다.
    * <Image> 태그 안에서, 인덱스 순서별 렌더링 최적화 (이미지를 바로 표시할 것과 천천히 표시할 것을 구분하여, GPU 가속, 지연 로딩 Lazy Load, 품질 제어, 임시 이미지 사용, 디코딩 방식 동기로 변경 등)
    * <Image> 태그 안에서, 이미지 품질을 80%로 제어
    * <Image> 태그 안에서, 로딩중 blur 처리로 임시 이미지 사용
    * next.config.js 설정: formats 필드에서, 이미지 포맷을 WebP 또는 avif 등으로 최적화
    * next.config.js 설정: deviceSizes, imageSizes 필드에서 화면 크기별 리사이즈 지원
  - 번들 크기 최적화: 
    next.config.js에서 webpack 설정
    next/bundle-analyzer 플러그인으로 번들 시각화
    코드 스플리팅, 다이나믹 임포트 (dynamic()) 활용
  - 폰트 최적화:
    layout.tsx에 next/font/google 로 구글폰트 임포트해서 직접 호스트: <link href="https://fonts.googleapis.com/css2?family=Roboto&display=swap" rel="stylesheet"> 방식 대신 로컬로 불러오므로, 폰트 다운로드 지연을 해소해, LCP 개선
  - CSS 최적화:
    글로벌 CSS 최소화
    스타일 중복 최소화
    사용하지 않는 CSS 제거
  - CDN 활용:
    이미지, 폰트, 정적 파일을 CDN에 배포하면 전 세계 어디서든 빠르게 응답
    배포 후, next.config.js의 assetPrefix로 CDN 경로 지정
  - 서드파티 스크립트 최적화 (외부 스크립트 최적화):
    <Script> 컴포넌트의 strategy 속성 활용 (beforeInteractive, lazyOnload)
    외부 SDK는 반드시 지연 로딩 또는 필요한 페이지에만 로드
    불필요한 <script> 제거
  - 콘솔로그 등 불필요한 코드 제거:
    babel-plugin-transform-remove-console 사용으로 production 로그 제거
    사용되지 않는 컴포넌트, 함수, 임포트 제거하여 빌드 용량 감소
    Dead code elimination 확인
