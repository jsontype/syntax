[Refactoring 기본개념: Pages-router 판]

1. Refactoring의 종류
  - 퍼포먼스 튜닝(최적화): 성능, UX 향상
  - 코드 스플리팅: 가독성, 재사용성, 테스트용이성 향상
  - 아키텍쳐 및 품질 개선: 정밀성, 신뢰성, 생산성, 유지보수성, 시스템안정성(보안) 향상
  * 이중 이번 챕터에서 중점적으로 다룰 내용은 최적화가 되겠다.

1. Pages-router 형식의 Next에서의 최적화 방법
  - 전반적인 최적화
    Image 최적화 (next/image 사용)
    Link 최적화 (next/link 사용)
    Head 최적화 (next/head 사용)
    CSS 최적화 (next/css 사용)
    Font 최적화 (next/font 사용)    
    서드파티 Script 최적화 (next/script 사용)
    번들 크기 최적화 (next/bundle-analyzer 사용)
    CDN 활용: 외부 서비스에서 제공하는 소스를 사용. 단, 링크한 소스에서 문제 발생시 앱에도 영향을 주므로, 실무에서는 가급적 지양함.
    # 논외: 옵셔널체이닝의 지양(if가 더 빠름), 고차함수의 지양(for가 더 빠름)

  - CSR(Client Side Rendering)의 최적화
    memo를 사용한 컴포넌트 메모이제이션
    useMemo와 useCallback을 통한 값과 함수 메모이제이션    
    불필요한 리렌더링 방지: 렌더링 함수에 불필요한 처리가 있는지 확인, useEffect 등에서 불필요한 deps를 줄이기

  - SSR(Server Side Rendering)의 최적화
    getServerSideProps에서 필요한 데이터만 가져오기
    데이터 캐싱 전략 수립
    API 라우트 최적화
    서버 사이드 캐싱 구현

  - SSG(Static Site Generation)의 최적화
    getStaticProps와 getStaticPaths 활용
    ISR(Incremental Static Regeneration) 구현
    정적 페이지 사전 생성
    동적 라우팅 최적화
    SSG로 가능한 페이지는 SSG로 변경하기
      SSG는 ISR(정적 페이지를 미리 생성하고, 필요할 때 업데이트하는 기능)을 구현하기 위한 것이다.
      즉, SSR에서 데이터 호출에 캐싱이 필요한 경우에 사용한다.
      그러므로, SSR -> SSG로 변경하는 것 자체가 일종의 최적화이다.
      단, DB에서 주기적 업데이트가 일어나는 것을 반영해야하는 데이터가 필요한 페이지는 SSG로 변경할 수 없다. (아래 참조)
      이런 경우에는 SSR을 유지하되, 캐싱을 통해 성능을 최적화해야 한다.

1. 적절한 페이지 형태 선택
  - CSR로 구현하는 것이 좋은 컴포넌트 예시: 일반적으로 사용자가 많이 조작하는 페이지
    사용자 인터랙션이 많은 페이지, 드래그 앤 드롭 기능이 있는 페이지, 실시간 필터링/정렬이 필요한 페이지, 
    실시간 검색 자동완성, 실시간 폼 유효성 검사, 실시간 텍스트에디터, 실시간 미리보기, 
    실시간 계산기/변환기, 실시간 지도/위치 서비스, 실시간 날씨 정보, 실시간 환율 정보,
    실시간 주식/코인 차트, 실시간 경기 스코어, 실시간 채팅/메신저, 실시간 협업 도구,
    실시간 설문/투표, 실시간 게임, 실시간 스트리밍 플레이어, 실시간 음악 플레이어,
    실시간 영상 편집기, 실시간 이미지 편집기, 실시간 문서 편집기, 실시간 코드 에디터,
    실시간 대시보드, 실시간 알림, 실시간 피드백, 실시간 분석 도구    
  - SSR로 구현하는 것이 좋은 페이지 예시: 일반적으로 우리가 아는 API 호출이 필요한 페이지
    사용자 인증 관련, 로그인/회원가입 페이지, 마이페이지, 개인정보 수정 페이지, 구독/결제 페이지,
    상세 정보 페이지, 제품 상세 페이지, 영화/드라마 상세 정보, 뉴스 기사 상세, 블로그 포스트,
    검색 결과 페이지, 검색 결과 목록, 필터링된 상품 목록, 카테고리별 상품 목록,
    동적 라우팅이 필요한 페이지, 사용자 프로필 페이지, 동적 카테고리 페이지, 태그별 콘텐츠 페이지,
    SEO가 중요한 페이지, 메인 페이지, 카테고리 메인, 브랜드 소개 페이지,
    서비스 소개 페이지, 데이터가 자주 업데이트되는 페이지, 최신 상품 목록, 인기 상품 목록,
    할인/프로모션 페이지, 이벤트 페이지, 소셜 미디어 피드, 커뮤니티 게시판,
    실시간 뉴스, 실시간 이벤트/공연 정보, 개인화된 콘텐츠, 쇼핑몰 장바구니,
    개인 맞춤 추천, 개인화된 대시보드, 맞춤형 학습 콘텐츠
  - SSG로 구현하는 것이 좋은 페이지 예시: 일반적으로 잘 변경되지 않는 페이지
    정적 콘텐츠, 회사 소개, 이용약관, 개인정보처리방침, FAQ, 도움말,
    자주 변경되지 않는 페이지, 제품 카탈로그, 서비스 가격표,
    연락처 정보, 오시는 길, 마케팅 페이지, 랜딩 페이지,
    프로모션 페이지, 이벤트 안내, 브랜드 스토리,
    * 때에 따라서, SSR 중에서 잘 변경되지 않는 페이지도 SSG로 구현하면 좋음

1. 최적화 확인 방법
  - Chrome DevTools의 Performance 탭
    1. Chrome 브라우저에서 F12 또는 우클릭 > 검사 클릭
    1. Performance 탭 선택
    1. 녹화 버튼(●) 클릭
    1. 페이지 새로고침 또는 테스트할 동작 수행
    1. Stop 버튼 클릭
    1. 가능한 결과 분석:
      - FPS (초당 프레임 수) 확인
      - CPU 사용량 확인
      - 렌더링 시간 확인
      - JavaScript 실행 시간 확인
      - 레이아웃 변경 확인

  - Lighthouse 성능 점수
    1. Chrome DevTools 열기 (F12)
    1. Lighthouse 탭 선택
    1. Categories에서 'Performance' 체크
    1. Device 선택 (Mobile/Desktop)
    1. 'Generate report' 클릭
    1. 가능한 결과 분석:
      - First Contentful Paint (FCP)
      - Largest Contentful Paint (LCP)
      - Time to Interactive (TTI)
      - Total Blocking Time (TBT)
      - Cumulative Layout Shift (CLS)

  - Network 탭의 리소스 로딩 시간
    1. Chrome DevTools 열기 (F12)
    1. Network 탭 선택
    1. 페이지 새로고침
    1. 가능한 결과 분석:
      - Waterfall 차트 확인
      - 각 리소스의 로딩 시간 확인
      - 리소스 크기 확인
      - 요청/응답 헤더 확인
      - 캐시 사용 여부 확인

  - React DevTools(React Developer Tools)의 Profiler로 특정 동작시의 컴포넌트 렌더링 시간 측정
    1. Chrome에 React Developer Tools 확장 프로그램 설치
    1. Chrome DevTools 열기 (F12)
    1. Components 탭 선택: * DevTool의 Components 탭은, HTML element에서 확인할 수 없는 컴포넌트명들도 취득이 가능하므로 편리하다. 선택 아이콘이 기존 선택 아이콘 밑에 있으므로 주의.
    1. Profiler 탭 선택
    1. 녹화 버튼(●) 클릭
    1. 테스트할 동작 수행
    1. Stop 버튼 클릭
    1. 가능한 결과 분석:
      - 컴포넌트 렌더링 시간 확인
      - 불필요한 리렌더링 확인
      - 컴포넌트 렌더링 순서 확인
