[pages-router에서의 refactoring]

1. 사전준비: 프로젝트를 새로 깔지 않고, 이전 챕터에서의 코드를 그대로 카피해서 가지고 온다.

1. page-router 형식의 Next에서의 최적화 방법
  - CSR(Client Side Rendering)의 최적화
    React.memo를 사용한 컴포넌트 메모이제이션
    useMemo와 useCallback을 통한 값과 함수 메모이제이션
    이미지 최적화 (next/image 사용)
    코드 스플리팅 (dynamic import)
    불필요한 리렌더링 방지

  - SSR(Server Side Rendering)의 최적화
    getServerSideProps에서 필요한 데이터만 가져오기
    데이터 캐싱 전략 수립
    API 라우트 최적화
    서버 사이드 캐싱 구현

  - SSG(Static Site Generation)의 최적화
    getStaticProps와 getStaticPaths 활용
    ISR(Incremental Static Regeneration) 구현
    정적 페이지 사전 생성
    동적 라우팅 최적화

  - 그 외 전반적인 최적화
    번들 크기 최적화
    폰트 최적화
    CSS 최적화
    서드파티 스크립트 최적화
    캐싱 전략
    CDN 활용



[CSR 최적화: memo, useMemo, useCallback 사용]

1. src/components/BackButton.tsx 수정: useCallback으로 함수 최적화하기
1. src/components/MovieCard.tsx 수정: memo로 컴포넌트 최적화하기
1. src/components/MovieDetailComment.tsx 수정: memo로 컴포넌트, useCallback으로 함수, useMemo로 값 최적화하기
1. src/components/SortPulldown.tsx 수정: memo로 컴포넌트, useCallback으로 함수 최적화하기



[SSR 최적화: getServerSideProps에서 캐싱 기능을 사용해, 데이터 호출 시도를 줄이기]

1. src/pages/movies.tsx 수정: getServerSideProps에서 캐싱 기능을 사용해, 데이터 호출 시도를 줄이기
1. src/pages/index.tsx 수정: getServerSideProps에서 캐싱 기능을 사용해, 데이터 호출 시도를 줄이기



[SSG 최적화: getStaticProps와 getStaticPaths 활용, ISR 구현]
* ISR이란?: 정적 페이지를 미리 생성하고, 필요할 때 업데이트하는 기능

1. src/pages/movies/[id].tsx 수정: getStaticProps와 getStaticPaths 활용, ISR 구현
1. src/pages/index.tsx 수정: getStaticProps와 getStaticPaths 활용, ISR 구현




1. 테스트: 각 페이지의 최적화 확인
  $ cd app1
  $ npm run dev  
  최적화 확인 방법:
  - Chrome DevTools의 Performance 탭
  - Lighthouse 성능 점수
  - Network 탭의 리소스 로딩 시간
  - React DevTools의 Profiler
  - next/bundle-analyzer를 통한 번들 분석
