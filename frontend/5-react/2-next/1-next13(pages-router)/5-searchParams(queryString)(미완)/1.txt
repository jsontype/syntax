### 5. searchParams
  
5.1. URL 쿼리 파라미터 다루기 (`router.query`)
5.2. 조건부 렌더링에 활용하기
5.3. 필터링 & 정렬 기능 구현

[Next 15 searchParams 의 비동기화]

1. 사전준비: 프로젝트를 새로 깔지 않고, 이전 챕터에서의 코드를 그대로 카피해서 가지고 온다.

1. query string 이란?
  - ? 부분을 쿼리스트링이라고 한다. 그리고 이걸 취득하는 것이 searchParams이다.
    ?sort=title
    ?sort=year
    ?sort=rating
  - ? 뒤에 오는 쿼리스트링을 취득하는 방법은 두가지가 있다.
    - 클라이언트사이드: const { searchParams } = useSearchParams() // 임포트 필요import { useSearchParams } from 'next/navigation'
    - 서버사이드: (await searchParams).get('sort') // NEXT15에서부터 async/await를 쓰도록 바뀜

1. src/app/components/SortPulldown.tsx 작성: 클라이언트 컴포넌트로, sort 풀다운 컴포넌트 만들어두기
  - event listner를 사용해서 sort 풀다운을 선택했을 때, URL의 쿼리스트링을 바꿔주는 컴포넌트
  - * SSR의 await searchParams를, CSR 컴포넌트에서 사용하려면 useSearchParams()를 임포트해서 사용해야 함.
  - * SSR의 await params를, CSR 컴포넌트에서 사용하려면 useParams()를 임포트해서 사용해야 함.
  ```
    "use client"

    import { useState } from 'react'
    import { useRouter, useSearchParams } from 'next/navigation'

    export default function SortPulldown() {
      // 클라이언트 컴포넌트에서 searchParams를 사용하려면 useSearchParams()를 임포트해서 사용해야 함.
      const searchParams = useSearchParams()
      const router = useRouter()
      const [sort, setSort] = useState(String(searchParams.get('sort')) || 'rating')
      const [itemPerPage, setItemPerPage] = useState(Number(searchParams.get('itemPerPage')) || 10)

      const handleChangeSort = (e: React.ChangeEvent<HTMLSelectElement>) => {
        const selected = e.target.value
        setSort(selected)
      }

      const handleChangeItemPerPage = (e: React.ChangeEvent<HTMLSelectElement>) => {
        const selected = e.target.value
        setItemPerPage(Number(selected))
      }

      const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault()
        router.replace(`?limit=${itemPerPage.toString()}&sort=${sort}`)
      }

      return (
        <form onSubmit={handleSubmit} className="border-1 p-2">
          <label htmlFor="sort-select">정렬 기준: </label>
          <select id="sort-select" value={sort} onChange={handleChangeSort}>
            <option value="title">제목</option>
            <option value="year">연도</option>
            <option value="rating">평점</option>
          </select>
          <label htmlFor="sort-select" className="mx-4">표시: </label>
          <select id="sort-select" value={itemPerPage} onChange={handleChangeItemPerPage}>
            <option value={10}>10</option>
            <option value={20}>20</option>
            <option value={30}>30</option>
            <option value={50}>50</option>
          </select>
          <button type="submit" className="ml-4 mr-2 text-blue-500">적용</button>
        </form>
      )
    }
  ```

1. src/app/movies/page.tsx 수정: 무비 리스트 서버 컴포넌트(SSR)에 sort 풀다운 추가하기
  - 서버 컴포넌트에서 searchParams를 사용하려면 Props로 받아야 함.
  - Next15에서는 searchParams에 await가 필요함. (25/4/21 메모: VSCode는 업데이트가.. 불필요하다고 뜨지만 있어야함...)

  import Link from 'next/link'
  import SetCookieButton from '@/app/components/SetCookieButton'
  import SortPulldown from '@/app/components/SortPulldown'
  import { headers, cookies } from 'next/headers'
  import Image from 'next/image'
  
  type Movie = {
    id: number
    title: string
    url?: string
    large_cover_image: string
  }
  
  // 서버 요청 함수: 파라미터에 초기값을 넣어서 null 체크를 하지 않아도 된다.
  async function getData(sort: string = 'rating', limit: number = 20): Promise<Movie[]> {
    const response = await fetch(`https://yts.mx/api/v2/list_movies.json?sort_by=${sort}&limit=${limit}`, {
      cache: 'no-store',
    })
    const data = await response.json()
    return data.data.movies
  }
  
  // searchParams의 Props 타입을 이렇게 선언해도 된다. 단 Next15부터는 searchParams가 비동기이므로 Promise를 쓰는 것을 잊지 말자.
  type Props = {
    searchParams: Promise<{
      sort: string
      limit: number
    }>
  }
  
  export default async function SSR({ searchParams }: Props) {
    // 서버 컴포넌트에서 searchParams를 사용하려면 Props로 받아야 함.
    // Next15에서는 searchParams에 await가 필요함. (25/4/21 메모: VSCode는 업데이트가.. 불필요하다고 뜨지만 있어야함...)
    // 단수일 때는 { id } 이렇게 비구조화 할당으로 하겠지만, 복수일 때는 아래처럼 선언 후, query.sort, query.limit 식으로 쓴다.
    const query = await searchParams
  
    const headersList = await headers()
    const cookiesList = await cookies()
  
    const headerUserAgent = headersList.get('user-agent') || '알 수 없음'
    const cookieMyToken = cookiesList.get('myToken')?.value || '토큰 없음'
  
    console.log('header / UserAgent: ', headerUserAgent)
    console.log('cookie / MyToken: ', cookieMyToken)
  
    const movies = await getData(query.sort, query.limit)
  
    return (
      <div>
        <div className="flex justify-between">
          <h1>SSR: 무비 리스트</h1>
          <SortPulldown />
        </div>
  
        <div>
          {movies.map((movie) => (
            <div key={movie.id}>
              <h2>
                <Link href={`/movies/${movie.id}`}>
                  {movie.title}
                </Link>
              </h2>
              <p>
                <Image src={movie.large_cover_image} alt={movie.title} width={500} height={750} />
              </p>
            </div>
          ))}
        </div>
  
        <SetCookieButton token="myToken" content="abcdefg!!!" />
      </div>
    )
  }

1. 테스트: SSR의 무비 리스트 페이지, 무비 리스트 페이지에서 호출하는 CSR의 소트 풀다운 컴포넌트 확인
  $ cd app1
  $ npm run dev  
  - localhost:3000/movies 무비리스트 페이지에 접속한다.
  - SortPulldown이라는 CSR 컴포넌트에서 sort 풀다운과 itemPerPage 풀다운을 선택하고 적용 클릭 -> URL의 쿼리스트링이 바뀌는지, 리스트 항목에 반영이 되는지 확인한다.
    http://localhost:3000/movies
    http://localhost:3000/movies?sort=rating&limit=20
    http://localhost:3000/movies?sort=year&limit=10
    http://localhost:3000/movies?sort=year&limit=30
    http://localhost:3000/movies?sort=year&limit=50

1. 다음 과제: React Query로 무비 페칭하기
  - 배경: fetch를 쓰고 있는데, SSR인 무비리스트 페이지에서 "제목, 연도, 평점 풀다운을 변경"해서 새롭게 sorting 된 데이터를 받으려고 하면 "pause가 발생하는 부분을 로딩"으로 구현하고 싶다.
  * 다음 과제: SSR에서 로딩 구현하기 (CSR처럼 setLoading을 쓸 수 없으니 react-query의 useQuery를 써서 loading을 구현한다.)
  * 다음 과제: SSR에서 에러 처리하기 (useQuery의 error를 사용해서 에러를 처리한다.)
  * 다음 과제: SSR에서 성공 처리하기 (useQuery의 success를 사용해서 성공을 처리한다.)
