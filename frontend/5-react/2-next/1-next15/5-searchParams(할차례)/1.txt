[Next 15 searchParams 의 비동기화]

1. 사전준비: 프로젝트를 새로 깔지 않고, 이전 챕터에서의 코드를 그대로 카피해서 가지고 온다.

1. query string 이란?
  - ? 부분을 쿼리스트링이라고 한다. 그리고 이걸 취득하는 것이 searchParams이다.
    ?sort=title
    ?sort=year
    ?sort=rating
  - ? 뒤에 오는 쿼리스트링을 취득하는 방법은 두가지가 있다.
    - 클라이언트사이드: const { searchParams } = useSearchParams() // 임포트 필요import { useSearchParams } from 'next/navigation'
    - 서버사이드: (await searchParams).get('sort') // NEXT15에서부터 async/await를 쓰도록 바뀜

1. src/app/components/SortPulldown.tsx 작성: 클라이언트 컴포넌트로, sort 풀다운 컴포넌트 만들어두기
  - event listner를 사용해서 sort 풀다운을 선택했을 때, URL의 쿼리스트링을 바꿔주는 컴포넌트
  - 클라이언트 컴포넌트에서 searchParams를 사용하려면 useSearchParams()를 임포트해서 사용해야 함.
  ```
    'use client'

    import { useRouter, useSearchParams } from 'next/navigation'

    export default function SortPulldown() {
      // 클라이언트 컴포넌트에서 searchParams를 사용하려면 useSearchParams()를 임포트해서 사용해야 함.
      const searchParams = useSearchParams()
      const router = useRouter()

      const handleChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
        const selected = e.target.value
        const sortOption = new URLSearchParams(searchParams.toString())
        sortOption.set('sort', selected)
        router.replace(`?${sortOption.toString()}`)
      }

      const currentSort = searchParams.get('sort') || 'rating'

      return (
        <form>
          <label htmlFor="sort-select">정렬 기준: </label>
          <select id="sort-select" value={currentSort} onChange={handleChange}>
            <option value="title">제목</option>
            <option value="year">연도</option>
            <option value="rating">평점</option>
          </select>
        </form>
      )
    }
  ```

1. src/app/movies/page.tsx 수정: 무비 리스트 서버 컴포넌트(SSR)에 sort 풀다운 추가하기
  - 서버 컴포넌트에서 searchParams를 사용하려면 Props로 받아야 함.
  - Next15에서는 searchParams에 await가 필요함. (25/4/21 메모: VSCode는 업데이트가.. 불필요하다고 뜨지만 있어야함...)

  import Link from 'next/link'
  import SetCookieButton from '@/app/components/SetCookieButton'
  import SortPulldown from '@/app/components/SortPulldown'
  import { headers, cookies } from 'next/headers'

  type Movie = {
    id: number
    title: string
    url?: string
    large_cover_image: string
  }

  // 서버 요청 함수
  async function getData(sort: string = 'rating'): Promise<Movie[]> {
    const response = await fetch(`https://yts.mx/api/v2/list_movies.json?sort_by=${sort}`, {
      cache: 'no-store',
    })
    const data = await response.json()
    return data.data.movies
  }

  type Props = {
    searchParams: {
      sort?: string
    }
  }

  export default async function SSR({ searchParams }: Props) {
    // 서버 컴포넌트에서 searchParams를 사용하려면 Props로 받아야 함.
    // Next15에서는 searchParams에 await가 필요함. (25/4/21 메모: VSCode는 업데이트가.. 불필요하다고 뜨지만 있어야함...)
    const sort = (await searchParams).sort || 'rating'

    const headersList = await headers()
    const cookiesList = await cookies()

    const headerUserAgent = headersList.get('user-agent') || '알 수 없음'
    const cookieMyToken = cookiesList.get('myToken')?.value || '토큰 없음'

    console.log('header / UserAgent: ', headerUserAgent)
    console.log('cookie / MyToken: ', cookieMyToken)

    const movies = await getData(sort)

    return (
      <div>
        <h1>SSR: 무비 리스트</h1>

        <SortPulldown />

        <div>
          {movies.map((movie) => (
            <div key={movie.id}>
              <h2>
                <Link href={`/movies/${movie.id}`}>
                  {movie.title}
                </Link>
              </h2>
              <p>
                <img src={movie.large_cover_image} alt={movie.title} />
              </p>
            </div>
          ))}
        </div>

        <SetCookieButton token="myToken" content="abcdefg!!!" />
      </div>
    )
  }

1. 테스트
  $ cd app1
  $ npm run dev
