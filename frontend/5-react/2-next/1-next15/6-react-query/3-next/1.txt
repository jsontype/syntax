[Next 15 react-query 기능 상세 1]

1. 다음 과제: React Query의 다양한 부가 기능 활용하기 (특히 캐싱)
  * 다음 과제: SSR에서 로딩 구현하기 (CSR처럼 setLoading을 쓸 수 없으니 react-query의 useQuery를 써서 loading을 구현한다.) >>> 리액트쿼리-loading, error... suspense, use훅 분리 순으로 내부 폴더 정렬?
  * 다음 과제: SSR에서 에러 처리하기 (useQuery의 error를 사용해서 에러를 처리한다.)
  * 다음 과제: SSR에서 성공 처리하기 (useQuery의 success를 사용해서 성공을 처리한다.)
  * 다음 과제: SSR에서 쿼리 키를 사용하기 (useQuery의 queryKey를 사용해서 쿼리 키를 사용한다.)
  * 다음 과제: SSR에서 쿼리 클라이언트를 사용하기 (useQueryClient를 사용해서 쿼리 클라이언트를 사용한다.)
  * 다음 과제: SSR에서 쿼리 클라이언트를 사용해서 쿼리 무효화하기 (useQueryClient의 invalidateQueries를 사용해서 쿼리 무효화하기.)
  * 다음 과제: SSR에서 쿼리 클라이언트를 사용해서 쿼리 리패치하기 (useQueryClient의 refetchQueries를 사용해서 쿼리 리패치하기.)
  * 다음 과제: SSR에서 쿼리 클라이언트를 사용해서 쿼리 리셋하기 (useQueryClient의 resetQueries를 사용해서 쿼리 리셋하기.)
  * 다음 과제: SSR에서 쿼리 클라이언트를 사용해서 쿼리 삭제하기 (useQueryClient의 removeQueries를 사용해서 쿼리 삭제하기.)
  * 다음 과제: SSR에서 쿼리 클라이언트를 사용해서 쿼리 캐시하기 (useQueryClient의 setQueryData를 사용해서 쿼리 캐시하기.)
  * 다음 과제: SSR에서 쿼리 클라이언트를 사용해서 쿼리 캐시 삭제하기 (useQueryClient의 clear로 쿼리 캐시 삭제하기.)
  * 다음 과제: SSR에서 쿼리 클라이언트를 사용해서 쿼리 캐시 무효화하기 (useQueryClient의 invalidateQueries로 쿼리 캐시 무효화하기.)
  * 다음 과제: SSR에서 쿼리 클라이언트를 사용해서 쿼리 캐시 리패치하기 (useQueryClient의 refetchQueries로 쿼리 캐시 리패치하기.)
  * 다음 과제: SSR에서 쿼리 클라이언트를 사용해서 쿼리 캐시 리셋하기 (useQueryClient의 resetQueries로 쿼리 캐시 리셋하기.)
  * 다음 과제: SSR에서 무한 스크롤 구현하기 (useInfiniteQuery를 사용해서 무한 스크롤을 구현한다.)
  * 다음 과제: SSR에서 페이지네이션 구현하기 (usePaginatedQuery를 사용해서 페이지네이션을 구현한다.)

1. 리액트쿼리가 생각보다 기능이 많아서 자주쓰는 기능들을 추가적으로 한번 정리하고가야할 필요가있음
