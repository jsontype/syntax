[Next 15 react-query 기능 상세 1]

1. 리액트쿼리가 생각보다 기능이 많아서 자주쓰는 기능들을 추가적으로 한번 정리하고가야할 필요가있음

* 과제: SSR에서 무한 스크롤 구현하기 (useInfiniteQuery를 사용해서 무한 스크롤을 구현한다.)
* 과제: SSR에서 페이지네이션 구현하기 (usePaginatedQuery를 사용해서 페이지네이션을 구현한다.)

1. react-query를 쓰는 이유: useInfiniteQuery를 사용해서, 무한 스크롤을 구현할 수 있다.
  const {
    data,
    fetchNextPage,
    hasNextPage,
    isFetching,
    isFetchingNextPage,
  } = useInfiniteQuery(
    'projects',
    fetchProjects,
    {
      getNextPageParam: (lastPage, pages) => lastPage.nextCursor,
    }
  )
1. react-query를 쓰는 이유: usePaginatedQuery를 사용해서, 페이지네이션을 구현할 수 있다.
  const {
    data,
    isLoading,
    isError,
    isFetching,
    isStale,
    refetch,
  } = usePaginatedQuery(
    'projects',
    fetchProjects,
    {
      page: pageNumber,
      staleTime: 1000 * 60 * 5, // 5분
      cacheTime: 1000 * 60 * 10, // 10분
      refetchOnWindowFocus: false, // 윈도우 포커스 시 리패치 안함
      refetchOnReconnect: false, // 재연결 시 리패치 안함
      refetchInterval: false, // 리패치 안함
      retry: false, // 실패 시 리패치 안함
      onSuccess: (data) => {
        console.log(data)
      },
      onError: (error) => {
        console.log(error)
      },
    }
  )
...

1. 테스트: 리액트쿼리 기능 ... 확인
1. 테스트: 리액트쿼리 기능 ... 확인
1. 테스트: 리액트쿼리 기능 ... 
