[Next 15 Next에서 제공하는 Head, Link, Image, form 컴포넌트 알아두기]

1. 사전준비: 프로젝트를 새로 깔지 않고, 이전 챕터에서의 app3 폴더의 코드를 그대로 카피해서 가지고 온다. app1로 폴더명을 변경한다.
  package.json에서의 앱 이름도 app1으로 변경한다.

1. src/app/ssg, src/app/csr 폴더 삭제

1. src/app/ssr은 폴더명을 /movies로 변경

1. src/app/layout.tsx 수정: 네비게이션 바 이동
  ```
    import type { Metadata } from "next";
    import { Geist, Geist_Mono } from "next/font/google";
    import Link from "next/link";
    import "./globals.css";

    const geistSans = Geist({
      variable: "--font-geist-sans",
      subsets: ["latin"],
    });

    const geistMono = Geist_Mono({
      variable: "--font-geist-mono",
      subsets: ["latin"],
    });

    export const metadata: Metadata = {
      title: "Create Next App",
      description: "Generated by create next app",
    };

    export default function RootLayout({
      children,
    }: Readonly<{
      children: React.ReactNode;
    }>) {
      return (
        <html lang="en">
          <body
            className={`${geistSans.variable} ${geistMono.variable} antialiased`}
          >
            {/* Header: NavBar */}
            <div>
              <span className="pr-1"><Link href="/">홈</Link></span>
              <span className="pr-1"><Link href="/movies">무비앱(SSR)</Link></span>
            </div>
            <hr />
            {/* Main */}
            {children}
          </body>
        </html>
      );
    }
  ```

1. next.config.js 수정: images에 외부 이미지 도메인 설정을 해야 Image 컴포넌트에서 외부 이미지를 사용할 수 있다.
  - "img.yts.mx" 도메인이 홈 페이지에서 사용되는 외부 이미지 도메인이다.
  - "yts.mx"는 추후 영화 API에서 받아와서 Image 컴포넌트에 소스에 사용될 도메인이다.
  import type { NextConfig } from "next"

  const nextConfig: NextConfig = {
    images: {
      domains: ["yts.mx", "img.yts.mx"],
    },
  }

  export default nextConfig

1. src/app/page.tsx 수정: 홈 페이지
  - Head, Link, Image은 모두 Next.js의 내장 컴포넌트로, 페이지 간의 탐색 및 메타데이터 설정을 쉽게 처리할 수 있도록 도와준다.
  - Head: 'next/head'에서 임포트하는 Next.js의 내장 컴포넌트로, 페이지의 메타데이터를 설정하는 데 사용된다.
    메타데이터는 유저 눈에 보이지는 않지만 SEO 최적화, SNS 공유 미리보기, 페이지 제목 등을 설정하는 데 유용하다.
    예: `<title>`, `<meta>` 태그 등을 삽입하여 SEO 및 SNS 공유 미리보기 최적화에 활용 가능
    실제 용례:
      <title>	: 브라우저 탭 제목, 검색엔진 제목
      <meta name="description">	: 검색 결과 요약 설명
      <meta property="og:..."> : SNS 공유 시 사용될 제목, 설명,이미지
      <meta name="robots"> : 검색엔진 크롤링 허용 여부 (index, follow 등)
  - Link: 'next/link'에서 임포트하는 Next.js의 내장 컴포넌트로, 페이지 간의 클라이언트 사이드 탐색을 지원한다.
    <a href=""> 대신 사용하여 페이지를 전환할 때 전체 페이지를 새로 고치지 않고도 빠르게 탐색할 수 있게 해준다. 속도 향상.
  - Image: 'next/image'에서 임포트하는 Next.js의 내장 이미지 최적화 컴포넌트로, 이미지를 자동으로 최적화하여 성능을 향상시킨다.    
    <img src=""> 대신 사용하여 이미지의 크기를 자동으로 조정하고, 로딩 속도를 개선하며, 다양한 해상도에 맞게 이미지를 제공한다.
    Image 컴포넌트 속성에는 다음과 같은 것들이 있다.
      - fill(Next14의 layout="fill"과 같음), objectFit="cover": 이미지를 컨테이너에 꽉 채우기
      - priority: 페이지 로드 시 이미지 우선 로드
      - width, height: 이미지 크기 설정 (필수 props이지만 fill일 때는 필요 없음)
      - placeholder="blur": 로딩 중 블러 처리
      - quality={75}: 이미지 품질 설정 (0~100)
      - loading="lazy": 이미지 로딩 최적화 (브라우저가 스크롤할 때 로드) (priority와 동시에 사용 불가)
      - unoptimized: 기본값은 false. 최적화 비활성화 (서버에서 최적화된 이미지 제공 안함). 즉, Image 컴포넌트는 기본으로 최적화된 이미지를 제공한다는 것.
      등등...
    Image 컴포넌트에서 height, width는 필수인 이유 등, 자주 묻는 질문에 대한 정리
      - Q. Image 컴포넌트에서 height, width는 왜 필수?
        next/image는 이미지를 로딩하기 전에 레이아웃을 확보해야 하므로, 브라우저에 "미리" 가로세로 크기를 알려줄 필요가 있다.
      - Q. 비율이 안 맞게 넣으면 어떻게하지? / 왜 height, width를 지정한대로 렌더링하지 않지?
        next/image는 기본적으로 이미지의 원본 비율을 유지하면서 렌더링된다. (기본값이 layout="intrinsic")
        따라서 width와 height는 비율을 위한 힌트일 뿐이고, 실제 DOM 상에서는 width: 100%, height: auto와 유사하게 동작할 수 있다.
      - Q. 어차피 원본 비율을 유지한다면, width 하나만 넣던지, height 하나만 넣던지 해도 되야하는데, 굳이 height, width를 다 넣으면서까지 Image 컴포넌트를 사용해야 하는 이유는?
        서버 사이드 렌더링 시 layout 미리 계산 기능이 들어있기 때문. → CLS (Cumulative Layout Shift) 방지 → 화면이 덜 흔들림
        LCP 최적화 → 페이지 로딩 속도 지표 개선
      - Q. LCP (Largest Contentful Paint) 란?
        사용자가 웹페이지를 방문했을 때,
        사용자가 느끼는 가장 중요한 콘텐츠(이미지 등 가장 큰 콘텐츠)가 화면에 완전히 보이는 시점을 측정한 값        
  - Form 컴포넌트 X: 사용안함
    Next.js의 app-router에서는 <Form>을 사용하지 않음. <form> 태그 사용. 대신 action 프롭에 서버 액션 함수를 넣어서 사용.
    spa에서 'react-router-dom'에서 임포트하거나, pages-router에서만 'next/form'에서 가져와서 씀.

  ```
    import Head from 'next/head'
    import Image from 'next/image'
    import Link from 'next/link'

    export default function Home() {
      return (
        <>
          {/* 
            Head: 'next/head'에서 임포트하는 Next.js의 내장 컴포넌트로, 페이지의 메타데이터를 설정하는 데 사용된다.
            메타데이터는 유저 눈에 보이지는 않지만 SEO 최적화, SNS 공유 미리보기, 페이지 제목 등을 설정하는 데 유용하다.
            예: <title>, <meta> 태그 등을 삽입하여 SEO 및 SNS 공유 미리보기 최적화에 활용 가능
          */}
          <Head>
            <title>무비앱</title>
            <meta name="description" content="이곳은 내 홈페이지입니다. 최신 정보와 서비스를 확인하세요." />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <meta property="og:title" content="홈 | 내 사이트 이름" />
            <meta property="og:description" content="이곳은 내 홈페이지입니다. 최신 정보와 서비스를 확인하세요." />
            <meta property="og:type" content="website" />
            <meta property="og:url" content="https://www.example.com/" />
            <meta property="og:image" content="https://www.example.com/og-image.jpg" />
            <link rel="icon" href="/favicon.ico" />
          </Head>

          {/* 
            CSS의 position 속성
              - relative: 부모 요소가 기준이 되어 자식의 absolute 위치를 조정 
              - absolute + transform: 텍스트 위치 정렬
          */}
          <div className="relative w-full h-[600px]">
            {/* Image */}
            <Image
              src="https://img.yts.mx/assets/images/movies/captain_america_brave_new_world_2025/background.jpg"
              alt="배경 이미지"
              fill // fill은 부모 div의 width, height를 따라감. 따라서 부모 div의 크기를 지정해줘야 한다.
              sizes="600" // fill을 쓸 때는 sizes에 width size를 넣어주는 게 좋다. 안 넣으면 콘솔에 경고가 뜸.
              style={{ objectFit: 'cover' }}
              priority // priority는 페이지 로딩 시 가장 먼저 로드되도록 설정하는 것. (SEO 최적화에 도움)
            // lazy-loading="lazy" // lazy-loading은 priority를 쓰면 기본값이 "eager"가 되는데, "lazy"를 쓸 경우에는 priority를 쓰면 안됨.
            />
            <div className="absolute top-1/2 left-1/2 text-white text-4xl font-bold transform -translate-x-1/2 -translate-y-1/2">
              {/* Link */}
              <div className="my-6 text-center">
                <Link href="/movies">
                  🎬 영화 보러가기
                </Link>
              </div>

              {/* form: pages router 방식에서는 <Form>을, app router 방식에서는 <form> 사용. api/login.ts에 action 험수를 만들면 연결 가능. */}
              <div className="my-10 text-center">
                <form action="/api/login" method="POST">
                  <div className="my-4">
                    <input
                      type="text"
                      name="username"
                      placeholder="아이디"
                      className="border p-2 mr-2"
                    />
                    <input
                      type="password"
                      name="password"
                      placeholder="비밀번호"
                      className="border p-2 mr-2"
                    />
                  </div>
                  <button className="bg-green-700 text-white mt-5 px-4 py-2 rounded hover:bg-green-800">
                    로그인
                  </button>
                </form>
              </div>
            </div>
          </div>
        </>
      )
    }
  ```

1. src/app/movies/page.tsx 수정: 무비 페이지에 img 태그를 Image 컴포넌트로 변경
  - Image 컴포넌트에 대한 설명은 위의 홈 페이지와 동일하므로 생략한다.
  // export const dynamic = 'force-dynamic' // 선택사항: 명시적으로 SSR 선언하는 용도
  
  import Image from 'next/image'

  type Movie = {
    id: number
    title: string
    url: string
    background_image: string
  }

  async function getData(): Promise<Movie[]> {
    const res = await fetch('https://yts.mx/api/v2/list_movies.json?sort_by=rating', {
      cache: 'no-store' // SSR 시 필수 : 캐시를 아예 저장하지 않겠다는 의미. 즉, 매 페이지 요청마다 API를 다시 호출함. 동적 fetch.
    })
    const json = await res.json()
    return json.data.movies
  }

  export default async function SSR() {
    const movies = await getData()

    return (
      <div>
        <h1>SSR: 무비 리스트</h1>
        {movies.map(movie => (
          <div key={movie.id}>
            <a href={movie.url}>{movie.title}</a>
            <Image src={movie.background_image} alt={movie.title} width={300} height={125} />
          </div>
        ))}
      </div>
    )
  }

1. 테스트: 레이아웃의 Link, 홈 화면의 Link, Image 컴포넌트 동작 확인
  $ cd app1
  $ npm run dev
  - 무비 리스트 페이지에서 이미지가 잘 보이는지 확인
  - 홈 페이지에서 개발자 도구의 element 탭을 열어 meta 태그가 잘 들어가있는지 확인
  - 레이아웃을 통해, 네비게이션 바가 잘 보이고 잘 동작하는지 확인
  - 홈 페이지에서 배경 이미지가 잘 보이는지, 무비 리스트 페이지로의 링크가 잘 작동하는지 확인
