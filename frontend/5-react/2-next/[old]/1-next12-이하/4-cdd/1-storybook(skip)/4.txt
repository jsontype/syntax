[Storybook]

1. 사전준비 : 프로젝트를 새로 깔지 않고, 이전 챕터에서의 코드를 그대로 카피해서 가지고 온다.

1. Storybook이란?
  React.js나 Next.js 프로젝트에서 컴포넌트를 개발할 때,
  개발 후의 적용 결과 화면 확인을 위해서, 화면 전체를 볼 필요없이,
  컴포넌트만 집중적으로 확인하며 개발할 수 있게 하기 위한 라이브러리이다.

1. Storybook 도입시의 장점은?
  Storybook을 활용하면 개발결과를 컴포넌트에 집중해서 확인할 수 있으며,
  컴포넌트에게 전달하는 프롭들이 각각 어떻게 작용하는지도 개발 도중에 쉽게 이해할 수가 있다.
  이렇게 Storybook을 활용하여 개발하는 것을 두고,
  컴포넌트 주도 개발(CDD, Component Driven Development)이라고도 한다.
  Storybook은 이 CDD를 위한 것이다.
  CDD는 "Atomic Design 같은 패턴을 갖고 있는 앱의 경우" 특히 유용하다.
  왜냐하면 컴포넌트가 잘 돌아가는지 확인하기 위해서
  "매번 앱을 켜고, 어디에서 사용되는 컴포넌트인지를 일일이 찾을" 필요가 없기 때문이다.

1. Storybook 설치
  $ cd app1
  $ npm i --save-dev sb // Storybook 설치
  $ npx sb init --builder webpack5 // Storybook 초기화
    eslintPlugin > (Y/n) // y 선택
    npm7 migration? > (Y/n) // n 선택

1. Storybook 설치 확인
  .storybook 폴더 확인 : Storybook에 대한 설정 파일이 들어있음을 확인
  .stories 폴더 확인: Storybook의 샘플 코드
  package.json에 아래 내용이 들어갔는지 확인 : 없으면 추가할 것
  {
    "scripts": {
      "storybook": "start-storybook -p 6006",
      "build-storybook": "build-storybook"
    },
  }

1. stories/Button.tsx 수정 : 샘플 스토리북용 컴포넌트에 주석을 수정하면서 자세히 파악해보자. 
```
  import React from 'react'
  import './button.css'

  interface ButtonProps {
    // 참조 : /** */ 주석으로 해야, 호출하는 곳에서 후버링을 했을 때 vscode상에서 툴팁으로 프롭에 대한 설명이 나온다.
    /**
    * primary 버튼인가?
    */
    primary?: boolean
    /**
    * 버튼의 백그라운드 컬러는?
    */
    backgroundColor?: string
    /**
    * 버튼의 크기는?
    */
    size?: 'small' | 'medium' | 'large'
    /**
    * 버튼의 텍스트는?
    */
    label: string
    /**
    * 클릭 이벤트핸들러 (선택사항)
    */
    onClick?: () => void
  }

  /**
  * Primary UI component for user interaction
  */
  export const Button = ({
    primary = false,
    size = 'medium',
    backgroundColor,
    label,
    ...props
  }: ButtonProps) => {
    const mode = primary
      ? 'storybook-button--primary'
      : 'storybook-button--secondary'
    return (
      <button
        type="button"
        className={['storybook-button', `storybook-button--${size}`, mode].join(
          ' ',
        )}
        style={{ backgroundColor }}
        {...props}
      >
        {label}
      </button>
    )
  }
```

1. stories/Button.stories.tsx 수정 : 샘플 스토리북 화면에 주석을 수정하면서 자세히 파악해보자. 
  // 스토리북에 표시될 버튼 화면
  import React from "react"
  // ComponentStory : 스토리북에 필요한 실제 태그 <button>를 설정한다.
  // ComponentMeta : 스토리북에 필요한 컴포넌트의 타입을 설정한다.
  import { ComponentStory, ComponentMeta } from "@storybook/react"
  // 버튼 컴포넌트를 임포트한다.
  import { Button } from "./Button"

  export default {
    title: "Example/Button",
    component: Button,
    // 인자값 타입
    argTypes: {
      backgroundColor: { control: "color" },
    },
  } as ComponentMeta<typeof Button>

  // 템플릿
  const Template: ComponentStory<typeof Button> = (args) => <Button {...args} />

  // Primary 버튼의 인자값 설정
  export const Primary = Template.bind({})
  Primary.args = {
    primary: true,
    label: "Button",
  }

  // Secondary 버튼의 인자값 설정
  export const Secondary = Template.bind({})
  Secondary.args = {
    label: "Button",
  }

  // Large 버튼의 인자값 설정
  export const Large = Template.bind({})
  Large.args = {
    size: "large",
    label: "Button",
  }

  // Small 버튼의 인자값 설정
  export const Small = Template.bind({})
  Small.args = {
    size: "small",
    label: "Button",
  }

1. 테스트 : Storybook 실행해보기
  $ cd app1
  $ npm i
  $ npm run storybook
  http://localhost:6006/
  Exmaple / Introduction 화면 : ./stories/Introduction.stories.mdx 내용이 출력된다.
  Exmaple / Button / Primary 화면 : ./stories/Button.stories.mdx 내용이 출력된다.
