[Next 15 params 의 비동기화, 렌더링 방식의 위계]

1. 사전준비: 프로젝트를 새로 깔지 않고, 이전 챕터에서의 코드를 그대로 카피해서 가지고 온다.

1. src/app/components/BackButton.tsx 작성: SSG의 자식으로 들어가는 클라이언트 컴포넌트. 뒤로가기 버튼
  - handleClick은 event리스너이기 때문에, client 컴포넌트에서만 사용 가능하다. = use client가 필수이다.
  - 렌더링 방식의 위계
    - 부모가 CSR: 자식은 CSR만 가능. SSR을 자식으로 넣어도 자동으로 CSR로 바뀜.
    - 부모가 SSR, SSG: 자식은 SSR, SSG, CSR 다 가능

  'use client'

  import { useRouter } from 'next/navigation'

  export default function BackButton() {
    const router = useRouter()

    const handleClick = () => {
      router.back()
    }

    return (
      <button onClick={handleClick}>
        돌아가기
      </button>
    )
  }

1. src/app/components/MovieDetailComment.tsx 작성: SSG의 자식으로 들어가는 CSR 컴포넌트. 댓글 컴포넌트
  - onChange가 event리스너이기 때문에, comment, setComment가 스테이터스이기 때문에 client 컴포넌트에서만 사용 가능하다. = use client가 필수이다.
  - slug는 클라이언트 컴포넌트에서는 useParams()으로 받아온다. = import { useParams } from 'next/navigation' 필요

  'use client'

  import { useState } from 'react'
  import { useParams } from 'next/navigation'

  export default function MovieDetailComment() {
    const [comment, setComment] = useState('')

    // (중요) Next15에서는 클라이언트컴포넌트에서는 종전대로 useParams()를 사용한다. import { useParams } from 'next/navigation'
    // 이렇게 하면, [slug]에 있던 [id]를 비구조화할당(destructuring)으로 가져올 수 있다.
    // 여기는 이렇게 취득해서, onSubmit에서 INSERT POST API를 호출할 때, id를 키로 활용하는 흐름이다.
    const { id } = useParams()

    const onSubmit = () => {
      if (!comment) {
        alert('댓글을 입력하세요.')
        return
      }

      alert(`TODO: 댓글이 등록되었습니다. \n 댓글 내용: ${comment} \n 영화 ID: ${id}`)
      setComment('')
    }

    return (
      <div>
        <h2># {id} 영화의 댓글</h2>
        <form onSubmit={onSubmit}>
          <input
            type="text"
            placeholder="댓글을 입력하세요."
            value={comment}
            onChange={(e) => setComment(e.target.value)}
          />
          <button type="submit">등록</button>
        </form>
      </div>
    )
  }

1. (중요) src/app/movies/[id]/page.tsx: "params"를 써서 slug 값을 받아서, SSG로 무비 디테일 페이지 만들기. 
  - [slug] 개념: id 등 routeParams를 받기위한 폴더 방식이다. [id]는 movies/123에서 id가 123임을 의미한다.
  - slug는 서버컴포넌트에서는 params 프롭으로 받아온다.
    # export default async function MovieDetail({ params }: { params: Promise<{ id: string }> }) {
    #   const movieId = (await params).id
    #   ... 중략
  - 위계 상으로는 SSG의 자식이기 때문에, 클라이언트 컴포넌트인 BackButton과 MovieDetailComment를 넣을 수 있다.

  import BackButton from '@/app/components/BackButton'
  import MovieDetailComment from '@/app/components/MovieDetailComment'
  import Image from 'next/image'
  
  type Movie = {
    id: number
    url: string
    imdb_code: string
    title?: string | null
    title_english?: string | null
    title_long?: string
    slug?: string | null
    year: number
    rating: number
    runtime: number
    genres: string[]
    like_count?: number
    description_intro?: string | null
    description_full?: string | null
    yt_trailer_code?: string | null
    language?: string | null
    mpa_rating?: string | null
    medium_screenshot_image1?: string
    medium_screenshot_image2?: string
    medium_screenshot_image3?: string
    large_screenshot_image1?: string
    large_screenshot_image2?: string
    large_screenshot_image3?: string
  }
  
  // 서버 요청 함수 (params.id 사용)
  async function getData(id: string): Promise<Movie> {
    const response = await fetch(`https://yts.mx/api/v2/movie_details.json?movie_id=${id}&with_images=true&with_cast=true`, {
      cache: 'force-cache', // SSG. 단일 영화 데이터는 안 바뀌므로 캐싱한다.
    })
    const data = await response.json()
    console.log('data: ', data)
    return data.data.movie // 단일 영화 데이터
  }
  
  export default async function MovieDetail({ params }: { params: Promise<{ id: string }> }) {
    // (중요) Next15에서는 서버컴포넌트에서 params를 받을 때, params의 타입을 Promise로 감싸야하며, 사용할 때 await를 써야한다. import 불필요.
    const { id } = await params // const id = (await params).id 와 같다.
    const movie = await getData(id)
  
    console.log('movie: ', movie)
  
    return (
      <div>
        <BackButton />
  
        <h1>상세페이지</h1>
        <h2>ID: {movie.id}</h2>
        <h2>제목: {movie.title ?? '-'}</h2>
        <h2>영문제목: {movie.title_english ?? '-'}</h2>
        <h2>슬러그: {movie.slug ?? '-'}</h2>
        <h2>장르: {movie.genres?.length ? movie.genres.join(', ') : '-'}</h2>
        <h2>평점: {movie.rating || '-'}</h2>
        <h2>상영시간: {movie.runtime ? `${movie.runtime} min` : '-'}</h2>
        <h2>연도: {movie.year || '-'}</h2>
        <h2>트레일러: {movie.yt_trailer_code
          ? <a href={`https://www.youtube.com/watch?v=${movie.yt_trailer_code}`} target="_blank">YouTube 보기</a>
          : '-'}</h2>
        <h2>언어: {movie.language ?? '-'}</h2>
        <h2>등급: {movie.mpa_rating ?? '-'}</h2>
        <h2>좋아요 수: {movie.like_count ?? '-'}</h2>
        <h2>설명: {movie.description_full ?? '-'}</h2>
  
        <MovieDetailComment />
  
        {/* 
          TODO: 아래는 댓글 리스트가 들어갈 부분
            - 이걸 실제로 실을 때에는 요청마다 갱신하게끔 'force-cache'를 'no-store' SSG -> SSR로 변경해야함.
            - 위 MovieDetailComment 컴포넌트는 댓글 입력창이라 클라이언트 컴포이므로 분리함.
        */}
        <h3 className="text-sm text-gray-500">아직 댓글이 없습니다.</h3>
  
        <h2>스크린샷:</h2>
        <div style={{ display: 'flex', gap: '12px', flexWrap: 'wrap' }}>
          {[movie.medium_screenshot_image1, movie.medium_screenshot_image2, movie.medium_screenshot_image3]
            .filter(Boolean)
            .map((src, i) => (
              <Image key={i} src={src!} alt={`screenshot${i + 1}`} width={300} height={300} />
            ))}
        </div>
      </div>
    )
  }
      
1. src/app/movies/page.tsx 수정: <Link></Link>를 추가하여, movie.id를 클릭하면 movies/[id]로 이동하도록 한다.
  - Q. SSG로 생성된 페이지 내에서 CSR 컴포넌트가 서버 요청을 하면, 그 페이지는 여전히 SSG인가?
  - A. 그렇다. 해당 페이지는 여전히 SSG이다. CSR(Client Side Rendering) 컴포넌트에서 발생하는 서버 요청은 클라이언트에서 브라우저가 실행할 때 발생하는 것.
  - SSG(Static Site Generation)는 빌드 시점에 HTML을 만들어두는 것이기 때문에, CSR 컴포넌트에서 어떤 API 요청을 하더라도 그 자체로는 SSG의 정적 특성을 바꾸지 않는다.
  - 즉, 정확히 말하면, 아래 코드에서는 모든 코드는 SSG로 구현이 되고, 오직 호출하는 댓글 컴포넌트 부분만 매번 요청을 할 것이다. 그 외 나머지 부분은 계속 SSG로 유지된다!

  import Link from 'next/link'
  import SetCookieButton from '@/app/components/SetCookieButton'
  import { headers, cookies } from 'next/headers'
  import Image from 'next/image'
  
  type Movie = {
    id: number
    title: string
    url?: string
    large_cover_image: string
  }
  
  // 서버 요청 함수
  async function getData(): Promise<Movie[]> {
    const response = await fetch('https://yts.mx/api/v2/list_movies.json', {
      cache: 'no-store', // 'force-cache'는 캐싱된 데이터 사용 (SSG용, Next13에서의 기본값), 'no-store'는 페이지를 열 때마다 매번 새로 요청 (SSR용)
    })
    const data = await response.json()
    return data.data.movies
  }
  
  export default async function SSR() {
    // Next 15에서, headers, cookies를 가져올 때 반드시 async 서버 컴포넌트안에서, await를 붙여야 함. 
  
    // ! headers() : 서버 요청 헤더 정보. 사용자 요청에 대한 정보를 알 수 있음.
    const headersList = await headers()
  
    // ! user-agent: 브라우저/디바이스 식별. 모바일/데스크탑 분기 렌더링할 때 사용.
    const headerUserAgent = headersList.get('user-agent') || '알 수 없음'
    // ! accept-language : 사용자 언어. 다국어(i18n) 초기 로케일 설정 볼 때 사용.
    // const headerLanguage = headersList.get('accept-language') || '언어 정보 없음'
    // ! x-forwarded-for 또는 x-real-ip : 클라이언트 IP. 사용자 위치 기반 기능(Geo, IP 로그)을 만들 때 사용.
    // const headerClientIp = headersList.get('x-forwarded-for') || headersList.get('x-real-ip') || 'IP 정보 없음'
    // ! authorization : 토큰 인증 (API 전용). JWT 등 인증된 요청 판별할 때 사용.
    // const headerAuthToken = headersList.get('authorization') || '토큰 없음'
  
    console.log('headerUserAgent: ', headerUserAgent)
    // console.log('headerLanguage: ', headerLanguage)
    // console.log('headerClientIp: ', headerClientIp)
    // console.log('headerAuthToken: ', headerAuthToken)
  
  
  
    // ! cookies() : 서버 쿠키 정보. 쿠키는 웹앱에서 로컬 파일로 강제 저장시키는 정보이다.
    const cookiesList = await cookies()
  
    // ! myToken: 사용자 인증 토큰. 사용자가 로그인할 때, 서버에서 발급하는 고유한 토큰. 사용자의 인증 상태를 유지하기 위해 사용.
    const myToken = cookiesList.get('myToken')?.value || '토큰 없음'
  
    console.log('myToken:', myToken)
  
  
  
  
  
    const movies = await getData()
  
    console.log('movies: ', movies)
  
    const render = movies.map((movie) => (
      <div key={movie.id}>
        <h2>
          <Link href={`/movies/${movie.id}`}>
            {movie.title}
          </Link>
        </h2>
        <p>
          <Image src={movie.large_cover_image} alt={movie.title} width={500} height={750} />
        </p>
      </div>
    ))
  
    return (
      <div>
        <h1>SSR: 무비 리스트</h1>
        <div>{render}</div>
        <SetCookieButton token="myToken" content="abcdefg!!!" />
      </div>
    )
  }
  

1. 테스트: SSG의 무비 디테일 페이지, 무비 디테일 페이지에서 호출하는 CSR의 댓글 컴포넌트 확인
  $ cd app1
  $ npm run dev
  - 영화 제목을 클릭해, 영화 상세 페이지로 이동 -> 이동, 상세정보 페칭이 잘 되는지 확인
  - 영화 상세 페이지에서 불러온 CSR 컴포넌트인 댓글창에 댓글을 입력하고 등록 버튼을 클릭 -> alert창에서 params로 받은 영화의 id와 입력정보들이 잘 뜨는지 확인
