[useSWR 소개]

1. useSWR 요약
  const fetcher = url => fetch(url).then(r => r.json())

  // GET
  const { data, error, isLoading } = useSWR('/api/data', fetcher, { 
    revalidateOnFocus: false, // 화면 포커스 시 재검증 안함
    revalidateOnMount: true, // 컴포넌트 마운트 시 재검증
    revalidateOnReconnect: true, // 네트워크 재연결 시 재검증
    refreshInterval: 3000, // 3초마다 자동 재검증
  });

  // POST
  const { trigger } = useSWRMutation('/api/movies', fetcher, options)
  trigger(requestBody, {
    onSuccess: (data) => {},
    onError: (error) => {},
  });

1. 사전준비: 프로젝트를 새로 깔지 않고, searchParams 챕터에서의 코드를 그대로 카피해서 가지고 온다.

1. useSWR 주요 기능 정리
  - 데이터 자동 캐싱 및 재사용: 동일한 키로 여러 컴포넌트에서 호출 시 네트워크 요청이 최소화됨.
  - 자동 리페치: 브라우저 포커스, 네트워크 재연결 등 다양한 트리거에서 데이터가 자동으로 최신화됨.
  - 로딩, 에러, 데이터 상태를 간단하게 관리: { data, error, isLoading } 형태로 상태를 쉽게 분기할 수 있음.
  - fetcher 함수 분리: 다양한 데이터 소스(fetch, axios 등)에 유연하게 대응 가능.
  - SWR 옵션을 통한 세부 동작 제어: revalidate, refetch, polling 등 다양한 옵션 제공.

1. 설치: useSWR 라이브러리
  $ npm install swr

1. src/app/components/SWRProvider.tsx 작성: SWRProvider 생성 및 전역 설정
  'use client';
  
  import { SWRConfig } from 'swr';
  import { ReactNode } from 'react';
  
  const defaultFetcher = (url: string) => fetch(url).then((res) => res.json());
  
  export default function SWRProvider({ children }: { children: ReactNode }) {
    return (
      <SWRConfig
        value={{
          fetcher: defaultFetcher,
          revalidateOnFocus: false,
        }}
      >
        {children}
      </SWRConfig>
    );
  }

1. src/app/layout.tsx 수정: SWRProvider 적용
  import SWRProvider from "./components/SWRProvider";
  
  export default function RootLayout({ children }: { children: React.ReactNode }) {
    return (
      <html lang="en">
        <body>
          <SWRProvider>
            {children}
          </SWRProvider>
        </body>
      </html>
    );
  }

1. src/app/components/MoviesList.tsx 수정: MoviesList 컴포넌트 생성 (useSWR 적용)
  'use client';
  
  import useSWR from 'swr';
  
  export default function MoviesList({ sort = 'rating', limit = 20 }) {
    const { data, error, isLoading } = useSWR(
      `https://yts.mx/api/v2/list_movies.json?sort_by=${sort}&limit=${limit}`,
      { revalidateOnFocus: false }
    );
  
    if (isLoading) return <div>로딩 중...</div>;
    if (error) return <div>에러 발생: {error.message}</div>;
    if (!data) return <div>데이터가 없습니다</div>;
  
    return (
      <div>
        {data.data.movies.map((movie) => (
          <div key={movie.id}>
            <h2>{movie.title}</h2>
            {/* 영화 정보 렌더링 */}
          </div>
        ))}
      </div>
    );
  }

1. src/app/components/MovieDetailContent.tsx 수정: MovieDetailContent 컴포넌트 생성 (useSWR 적용)
  'use client';
  
  import useSWR from 'swr';
  
  export default function MovieDetailContent({ id }: { id: string }) {
    const { data, error, isLoading } = useSWR(
      `https://yts.mx/api/v2/movie_details.json?movie_id=${id}&with_images=true&with_cast=true`,
      { revalidateOnFocus: false }
    );
  
    if (isLoading) return <div>로딩 중...</div>;
    if (error) return <div>에러 발생: {error.message}</div>;
    if (!data) return <div>영화 데이터가 없습니다</div>;
  
    const movie = data.data.movie;
    return (
      <div>
        <h2>{movie.title}</h2>
        {/* 영화 상세 정보 렌더링 */}
      </div>
    );
  }

1. package.json 수정 및 라이브러리 재설치: 의존성 호환성 문제 해결 (Next.js 14 + React 18)
  node-module, package-lock.json 삭제
  $ npm i

1. next.config.js 수정: SWR 캐시 설정

1. postcss.config.mjs 작성: PostCSS 설정

1. eslint.config.mjs 작성: ESLint 설정

1. 테스트
  $ cd app1
  $ npm run dev
  - 영화 목록이 useSWR로 로드됨
  - 영화 상세 페이지가 useSWR로 로드됨
  - 페이지 간 이동 시 캐싱된 데이터 재사용
  - 네트워크 오류 시 적절한 에러 표시



[useSWR 고급 기능 둘러보기]

1. 참조: useSWR 고급 기능들
  - 조건부 요청 (Conditional Fetching)
    const { data } = useSWR(shouldFetch ? '/api/data' : null, fetcher);
  - 의존성 있는 요청 (Dependent Fetching)
    const { data: user } = useSWR('/api/user', fetcher);
    const { data: projects } = useSWR(user ? `/api/projects?userId=${user.id}` : null, fetcher);
  - 페이지네이션
    const { data, error, mutate, size, setSize, isValidating } = useSWRInfinite(
      index => `/api/movies?page=${index}&limit=10`,
      fetcher
    );
  - 뮤테이션 (데이터 변경)
    import useSWRMutation from 'swr/mutation';
    
    const { trigger, isMutating } = useSWRMutation('/api/movies', fetcher);
    
    const handleSubmit = async () => {
      await trigger(newMovieData, {
        onSuccess: () => mutate('/api/movies'), // 캐시 갱신
      });
    };
  - 전역 설정과 캐시 조작
    import { useSWRConfig } from 'swr';
    
    function App() {
      const { mutate, cache } = useSWRConfig();
      
      // 모든 캐시 무효화
      mutate(() => true);
      
      // 특정 키 패턴 무효화
      mutate(key => typeof key === 'string' && key.startsWith('/api/movies'));
    }

1. 참조: useSWR vs 다른 데이터 페칭 라이브러리 비교
  - useSWR vs React Query (TanStack Query)
    useSWR:
      더 가볍고 간단한 API
      자동 키 생성과 캐싱
      Vercel에서 개발하여 Next.js와 최적화됨    
    React Query:
      더 많은 기능 (무한 쿼리, 백그라운드 업데이트 등)
      복잡한 상태 관리
      더 세밀한 캐시 제어
  - useSWR vs 일반 fetch/axios
    useSWR:
      자동 캐싱, 재시도, 백그라운드 업데이트
      로딩/에러 상태 자동 관리
      중복 요청 제거  
    일반 fetch/axios:
      직접적인 제어
      상태 관리를 직접 구현해야 함
      캐싱 로직을 별도 구현 필요

1. 참조: useSWR에서의 성능 최적화 팁
  - 적절한 캐시 설정
    const { data } = useSWR('/api/data', fetcher, {
      revalidateOnFocus: false,    // 포커스 시 재검증 안함
      revalidateOnReconnect: true, // 재연결 시 재검증
      refreshInterval: 60000,      // 1분마다 자동 갱신
      dedupingInterval: 2000,      // 2초 내 중복 요청 제거
    });

  - 에러 재시도 설정
    const { data } = useSWR('/api/data', fetcher, {
      errorRetryCount: 3,
      errorRetryInterval: 5000,
      shouldRetryOnError: (error) => error.status !== 404,
    });

  - 프리로딩
    import { preload } from 'swr';
    
    preload('/api/movies', fetcher); // 미리 데이터 로드
