[섹션4. 그런데 백엔드 개발자가 API를 아직 못 만들었다]

1. msw 세팅과 .env
1. next용 msw 컴포넌트
1. 서버 컴포넌트에서 Server Actions 사용하기
1. [Next 15] Form 컴포넌트
1. 클라이언트 컴포넌트에서 Server Actions 사용하기
1. 미들웨어, 라우트 핸들러, catch-all 라우트
1. next-auth로 로그인하기
1. 로그아웃 & 로그인 여부에 따라 화면 다르게 하기
1. react-query SSR 설정하기
1. [Next 15] 바뀐 fetch의 cache + Request Momoization & Data Cache
1. 클라이언트 react-query






<ch 3-1>
1. msw 세팅과 .env : mock service worker로 가짜 api 만들어서 .env 에 넣고 실행하기
1. ★ 클라이언트 컴포넌트를 서버 컴포넌트로 바꾸는 방법
> 전제조건: 부모 컴포넌트 중에 클라이언트 컴포넌트가 있으면 안됨 (그러면 서버 컴포넌트로 바꾼다해도, 클라이언트 컴포넌트로 강제로 변경됨)
> use client 삭제
> useState, useRouter 삭제
> on Event 함수 삭제 후, On EventListner를 담고 있는 모든 컴포넌트들(버튼 등)을 클라이언트 컴포넌트로 분리할 것
> 분리하지 않는 경우 태그안에 내재된 props로 변경한다. 예를 들어 input 태그의 경우, value={password} onChange={onChangePassword} 식으로 되어있는 프롭들을 삭제후, 
submit 버튼의 disabled를 state 값으로 조건분기하고 있다면 disabled 프롭을 없애고, input들에 required를 넣으면 자동으로 됨.
> 그 뒤 <form action={submit}>처럼 action 프롭을 추가한다. 이 submit을 "Server Actions"라고 부른다. 아래는 서버 액션 함수의 예시이다.
const submit = async (formData: FormData) => {
    "use server";
    if (!formData.get('id')) {
      return { message: 'no_id' };
    }
    if (!formData.get('name')) {
      return { message: 'no_name' };
    }
    if (!formData.get('password')) {
      return { message: 'no_password' };
    }
    if (!formData.get('image')) {
      return { message: 'no_image' };
    }
    let shouldRedirect = false;
    try {
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/users`, {
        method: 'post',
        body: formData,
        credentials: 'include',
      })
      if (response.status === 403) {
        return { message: 'user_exists' }
      }
      shouldRedirect = true;
    } catch (err) {
      console.error(err);

    }
    if (shouldRedirect) {
      redirect('/home'); // try/catch문 안에서 X
    }
  }
1. ★ Next의 Form 컴포넌트 사용법
>  <form action={submit}> 이 있으면, GET일 경우 <Form action='/search'> 이렇게 사용가능하다.
> 그 다음 input type='search' name='q' 로 하게 되면, 이걸 q라는 써치파람(쿼리스트링)을 줘서 써밋시의 액션을 수행한다.
> 일단 form과의 차이점은, Next가 SSR한다는 거다. (원래는 페이지 이동시에 그제서야 NEXT 서버로부터 이 서치페이지 데이터들을 받아오지만, 그게 아니라, 서치페이지를 프리페치해준다.
다음 넘어갈 페이지들을 미리 다운로드할 수 있다. 그리고 폼을 통해서 submit을 하면 원래는 페이지가 새로 고침되듯이 이동하는데, 클라이언트 컴포넌트라면 그거를 주로 e.preventDefault로 막는다. 써밋시 액션에 대해서.
근데, Form을 쓰면 그걸 알아서 해준다. 넥스트의 routing도 자연스럽게 통합이 된다. 등등이 장점!
그리고 action="/search" replace={false} scroll={true} prefetch={true} 값이 자동으로 들어있다. 안줘도 되고, 줘야하면 넣어서 바꾸면 된다.






1. _lib/signup.ts: 서버액션 함수를 다음과 같이 따로 만들어준다.

1.signupModal.tsx: 서버액션 함수를 임포트해서 사용한다.
-import { useFormState, useFormStatus } from 'react-dom' 부분 : react19 버전에서는 useActionState로 바뀌었는데, 아직 next에서는 안 된다.

1.auth.js : 로그인 인증용
-CredentialsProvider : 로그인, 로그아웃, 현재 내 정보 불러오기
-npm i next-auth@5 설치가 필요: 이걸 굳이 쓰는 이유는 세션토큰의 탈취 해킹 공격(xss, csrf 공격)을 알아서 막아준다.
-next-auth 최신버전에서는 process.env.AUTH_URL을 쓰면 안되고, process.env.NEXT_PUBLIC_BASE_URL 로 써야한다. 또, .env 에
NEXT_PUBLIC_BASE_URL 아래에, AUTH_SECRET=mustkeepinsecret 과 같이 유출되선 안되는 비밀코드를 적어주면 된다. 보안 조심!
-handlers는 무슨 메소드를 쓰냐이고
-pages의 signIn, newUser는 로그인/회원가입 페이지 적는 것으로 키명은 정해져있다. 이게 없으면 next가 기본적으로 마련해주는 로그인페이지가 뜰 것이다.
-providers: [ CredentialsProvider({ 함수 }...), ...] : 로그인 했을 때의 실행할 함수. 나중에 추가하고 싶은 프로바이더가 있으면 계속 추가하면 된다. (예: KakaoProvider 등)

1.middleware.ts : auth.ts의 auth를 미들웨어처럼 역할하게 하는 것임.
-matcher: 미들웨어를 적용할 페이지 목록임. 이 처리를 통해서 일부 페이지들이 로그인을 해야지만 접근할 수 있는 페이지가 됨.
-페이지라우터에서는 페이지별 권한 주는 것을 페이지라우터에서 하기가 어려웠는데, 앱라우터에서 이 권한별로 접근할 수 있는 페이지를 미들웨어를 통해서 제어할 수 있게 해주었다.
- 임포트쪽에 있는 export { auth as middleware }가 export function middleware 와 같은 역할을 대신한다.
-auth 함수는 내가 로그인했는지 안했는지 알아내기 용이다.
-로그인 실패시 로그인페이지로 다시 라우팅을 하는 등의 처리도 미들웨어 단에 넣는 것이 auth.ts에서 callback 하는 것보다 더 자연스러움.

1.src/app/api/auth/[...nextauth]/route.ts:
-GET함수 : GET /api/auth
-[...폴더이름]과 같은 루트를 catch-all route라고 하는데, app/shop/[...slug]/page.js 이런식으로 있으면, /shop/a 도 되고, /shop/a/b 도 되고, /shop/a/b/c 도 된다. (패스 파라미터는 각각 { slug: ['a'] / ['a', 'b'] / ['a', 'b', 'c'] } 의 형태로 들어가게 된다.)
-프론트 서버도 서버이기 때문에, 백엔드 처리도 localhost:3000에서 같이 할 수 있다. 작은 규모 서비스는 백엔드도 프론트 안에서 처리를 할 수 있게 할 수 있다.

1.LoginModal.tsx: 
-signIn을 임포트 시 주의 : 클라이언트 환경에서는 "next-auth/react" 에서 임포트한 라이브러리 내에 내장된 signIn 함수를, 서버환경에서는 우리가 만든 @/auth에 있는 signIn 함수를 쓴다.

1.(afterLogin)/.../LogoutButton.tsx
-로그아웃: singOut 함수를 사용하면 된다.
-useSession은 내 로그인 정보를 넣는 훅이다. 클라이언트에서만 사용가능.

1. RQProvider.tsx
-인피니티 스크롤링: 로그인하고 나서, 포스트 페이지에서 스크롤을 내릴 때마다 무한으로 조금씩 더 불러오는 것 구현. React Query를 사용함.
-react-query SSR 설정하기: $ npm i @tanstack/react-query@5 로 설치
-RQProvider: Provider 안에 있는 컴포넌트끼리는 데이터가 다 공유가 된다.
-그 후, afterLogin의 레이아웃에 Provider로 감싸준다.

1. getPostRecomands 함수 안에서...
-cache: 'no-store' > next 15의 기본 캐시처리 방식인데, 이 경우 revalidate가 있으면 안된다. revalidate: 60은 60초마다 캐쉬를 초기화하라는 얘긴데, 캐시가 없는데 초기화를 하면 말이 안되므로...

1. home/page.tsx
-클라이언트에 react-query 적용

1. react-query를 쓰는 이유와 fresh, stale, inactive
- redux-toolkit 대신 react-query이나 swr를 쓰는 이유 : redux-toolkit이나 redux-saga, redux-thunk 같은 걸로도 서버 페칭(비동기 처리)이 되지만,
redux의 핵심은 데이터를 컴포넌트간에 공유하는 것이 핵심.
react-query나 swr는 데이터를 "가져오는 행위"가 핵심이 된다.
또, react-query는 가져오면서 "캐싱"을 잘 해준다. 캐싱을 하면 트래픽 비용을 줄이고, 속도도 빠름.
인터페이스를 표준화했다. (loading, success, error 등의 데이터 등)
키 시스템도 잘 되어있다. ["post", "recommend"] 등 사용부.

- RQProvider.tsx
react-query에는 아래 데이터 상태 3가지가 있다. 펫치받은 데이터가 이들중 어느 상태인지는 화면에서 야자수 클릭하면 확인할 수 있음.
>>> fresh : 서버에서 데이터를 불러오면 기본적으로 이것. 최종데이터. 계속 써도 되는 데이터. 그러나 언제까지 프레시한 데이터일까? 그래서, 프레시 기간을 설정해야한다.
>>> stale : staleTime: 60이면 60ms 뒤에 fresh에서 stale 상태로 간다. infinity를 하면 항상 fresh. 일반적으로 모든 데이터는 특정 시간이 지나면 프레시하지 않게 된다. 그 상태를 stale이라 한다. stale 상태에서는 특정 기회가 되면 항상 서버에서 새로 가져와야 한다.
그 특정 refretch기회는, refetchOnWindowFocus , retryOnMount, refetchOnReconnect 이 세개를 기준으로 그 다시 가져오는 기회를 정한다. retry는 서버 가져오는 게 실패시 몇번 다시 시도할 거냐에 대한 설정.
>>> inactive : gcTime이란 게 있다. 이는 garbage collector 타임인데 기본은 5분이다. 보는 화면에서 Post를 안 부르면 inactive가 되는데, 이후, 메모리가 너무 많으면 안쓰는 데이터들을 처리를 해준다. 그래서 메모리를 정리해준다.
브라우져에서 메모리가 넘어가면 앱이 터져버린다. gcTime은 staleTime보다 길어야한다. (gcTime이 넘어서 메모리가 정리되어버리면 staleTime의 캐시초기화가 의미가 없어져버리기 때문)

- React 데이터 페칭 총정리
분류 ... 라이브러리/기술 ... 특징/장점 ... 언제 쓰면 좋나
🔹 기본                                    /useEffect + fetch        /가장 기본적인 방식/ 간단한 컴포넌트
🔹 전역 상태                           /Redux + Thunk /비동기 로직을 액션으로 분리 /큰 앱, 명시적인 흐름
🔹 전역 상태                           /Redux-Saga        Generator /기반 사이드이펙트 처리 /복잡한 흐름, polling 등
🔹 전역 상태                           /Redux Toolkit (RTK) /Redux + Thunk를 쉽게        모던 리덕스 개발 표준
🔹 전역 상태                           /Zustand, Jotai, Recoil 등 /가볍고 간단한 상태 공유 /미니멀한 전역 상태
🔹 데이터 특화                       /React Query /비동기 + 캐싱 + 자동 리페치 /서버 데이터 중심 앱
🔹 데이터 특화                       /SWR /lightweight React Query /Next.js에서 특히 많이 씀
🔹 GraphQL Apollo Client     /GraphQL 쿼리 관리 특화 /GraphQL API 사용 시
🔹 Next.js 서버                        /getServerSideProps, getStaticProps, App Router async /SSR/SSG/ISR 가능 /SEO/빠른 초기 로딩
🔹 커스텀                                  /Custom Hook (useFetch, useUser)        /페칭로직 재사용 /다수 컴포넌트에서 동일 로직 필요 시
