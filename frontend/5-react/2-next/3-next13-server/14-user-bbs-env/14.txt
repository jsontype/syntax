[로그인 ID/PW + JWT 환경에서 .env 파일을 사용해 비밀번호 숨기기]

1. 사전준비 : 프로젝트를 새로 깔지 않고, 이전 챕터에서의 코드를 그대로 카피해서 가지고 온다.

1. .env 파일을 사용해야하는 이유
  .js파일을 공유하거나 어디 올리는 일이 잦을텐데, .js파일에는 중요한 코드가 들어가기도 하기 때문에,
  소스코드 곳곳에 있는 암호나 중요한 문자열들은 깃 스테이징에 올리기 전에 다른 파일로 빼놓는 게 좋다.
  예를 들면 다음과 같다.
    secret: 타인이 타앱에서 이쪽의 로그인이 가능해져서 이쪽 유저의 DB를 해킹할 수 있다.
    clientId: 타인이 타앱에서 "깃허브 등 프로바이더의 OAuth"를 통해 이쪽 앱의 로그인이 가능해져서 소스코드를 넣어 이쪽 유저의 DB를 해킹할 수 있다.
    clientSecret: 타인이 타앱에서 "깃허브 등 프로바이더의 OAuth"를 통해 이쪽 앱의 로그인이 가능해져서 소스코드를 넣어 이쪽 유저의 DB를 해킹할 수 있다.
    url: "mongodb+srv:..." 부분. DB 전체가 털릴 수 있다.  

1. .env 생성
  NEXTAUTH_SECRET='Next Back 용 secret!'
  NEXTAUTH_CLIENT_ID='Next Back 용 clientId!'
  NEXTAUTH_CLIENT_SECRET='Next Back 용 clientSecret!'
  NEXTAUTH_DB_URL='Next Back 용 url!'



1. src/pages/api/auth/[...nextauth].js 수정 : .env 파일에서 읽어오도록 수정한다.
  ...
  clientId: process.env.NEXTAUTH_CLIENT_ID,
  clientSecret: process.env.NEXTAUTH_CLIENT_SECRET,
  ...
  secret: process.env.NEXTAUTH_SECRET

1. src\app\api\connectDB.js 수정 : .env 파일에서 읽어오도록 수정한다.
  const url = process.env.NEXTAUTH_DB_URL
  
1. .gitignore 수정 : 다음을 추가한다.
  ...
  # env
  .env

1. 테스트
  $ cd app1
  $ npm run dev
  http://localhost:3000/bbs
  로그인 해본다.
  로그아웃 해본다.
  새 글을 쓴다.
  새 글에서 삭제을 눌러본다. : 제대로 삭제된다.
  writer가 세션 email과 다른 글에서 삭제을 눌러본다. : 500 에러가 발생한다.
  (세션 email과 다른 글이 없다면 mongodb.com의 Browse Collection 클릭해서 email 정보를 직접 변경한다.)
  새 글을 쓴다.
  새 글에서 삭제을 눌러본다. : 제대로 수정된다.
  writer가 세션 email과 다른 글에서 수정을 눌러본다. : 500 에러가 발생한다. 
  (세션 email과 다른 글이 없다면 mongodb.com의 Browse Collection 클릭해서 email 정보를 직접 변경한다.)



1. DB 정리하기 : BBS 상의 글을 모두 지워둔다.
  mongodb.com 접속
  Browse Collection 클릭
  db1의 bbs1 클릭
  모든 글에서 우측 delete 버튼 클릭
