[로그인 OAuth + Session 환경에서 BBS 글 수정, 삭제 세션 처리]

1. 사전준비 : 프로젝트를 새로 깔지 않고, 이전 챕터에서의 코드를 그대로 카피해서 가지고 온다.

1. src/pages/api/auth/[...nextauth].js 수정 : 주석의 번호만 삭제
1. src/pages/api/bbs/write.js 수정 : 주석의 번호만 삭제
1. src/app/bbs/page.js 수정 : 캐싱 타임을 1로 수정



1. src/pages/api/bbs/delete.js 수정 : 세션의 email과 db의 글쓴이 정보가 같을 때만 삭제 가능하게 변경
  import { ObjectId } from "mongodb"
  import { connectDB } from "@/app/api/connectDB"
  // 글쓴이 정보를 넣기 위해 session 정보를 사용해야 하고, 이를 사용하도록 하기 위해 getServerSession과 authOptions를 추가해야 한다.
  import { getServerSession } from "next-auth"
  import { authOptions } from "../auth/[...nextauth]"

  export default async function handler(req, res) {
    // 세션을 받아온다.
    const session = await getServerSession(req, res, authOptions)

    if (req.method == "DELETE") {
      try {
        const db = (await connectDB).db("db1")
        // DB의 글쓴이 정보를 추출
        const find = await db
          .collection("bbs1")
          .findOne({ _id: new ObjectId(req.body) })
        // 세션의 email과 DB의 글쓴이 정보가 같을 때만 삭제 가능하게 처리
        if (find.writer === session.user.email) {
          await db.collection("bbs1").deleteOne({ _id: new ObjectId(req.body) })
          return res.redirect(302, "/bbs")
        } else {
          return res.status(500).json("권한이 없습니다.")
        }
      } catch (e) {
        console.log(e)
      }
    }
  }



1. src/pages/api/bbs/edit.js 수정 : 세션의 email과 db의 글쓴이 정보가 같을 때만 수정 가능하게 변경
  import { ObjectId } from "mongodb"
  import { connectDB } from "@/app/api/connectDB"
  // 글쓴이 정보를 넣기 위해 session 정보를 사용해야 하고, 이를 사용하도록 하기 위해 getServerSession과 authOptions를 추가해야 한다.
  import { getServerSession } from "next-auth"
  import { authOptions } from "../auth/[...nextauth]"

  export default async function handler(req, res) {
    // 세션을 받아온다.
    const session = await getServerSession(req, res, authOptions)

    if (req.method == "POST") {
      if (req.body.title == "") {
        return res.status(500).json("제목은 필수입니다.")
      }
      try {
        const newData = {
          title: req.body.title,
          content: req.body.content,
        }
        const db = (await connectDB).db("db1")
        // DB의 글쓴이 정보를 추출
        const find = await db
          .collection("bbs1")
          .findOne({ _id: new ObjectId(req.body._id) })
        // 세션의 email과 DB의 글쓴이 정보가 같을 때만 수정 가능하게 처리
        if (find.writer === session.user.email) {
          await db
            .collection("bbs1")
            .updateOne({ _id: new ObjectId(req.body._id) }, { $set: newData })
          return res.redirect(302, "/bbs")
        } else {
          return res.status(500).json("권한이 없습니다.")
        }
      } catch (e) {
        console.log(e)
      }
    }
  }



1. 테스트
  $ cd app1
  $ npm run dev
  http://localhost:3000/bbs
  새 글을 쓴다.
  새 글에서 삭제을 눌러본다. : 제대로 삭제된다.
  writer가 세션 email과 다른 글에서 삭제을 눌러본다. : 500 에러가 발생한다.
  (세션 email과 다른 글이 없다면 mongodb.com의 Browse Collection 클릭해서 email 정보를 직접 변경한다.)
  새 글을 쓴다.
  새 글에서 삭제을 눌러본다. : 제대로 수정된다.
  writer가 세션 email과 다른 글에서 수정을 눌러본다. : 500 에러가 발생한다. 
  (세션 email과 다른 글이 없다면 mongodb.com의 Browse Collection 클릭해서 email 정보를 직접 변경한다.)



1. DB 정리하기 : BBS 상의 글을 모두 지워둔다.
  mongodb.com 접속
  Browse Collection 클릭
  db1의 bbs1 클릭
  모든 글에서 우측 delete 버튼 클릭
