[로그인 OAuth + JWT]

"유저 -O- 서버 -X- DB"

1. 로그인 인증 방식의 종류
  한번 로그인을 하면 어떤 화면에 가도 로그인이 유지되어야 한다.
  이를 위해서는 로그인을 하면 서버에서 로그인 정보를 저장해야 한다.
  이를 "입장권을 지급받는다"는 개념으로 이해하면 쉽다.
  이 입장권에는 누구고, 언제 로그인했고, 어디서 로그인했는지 등등의 정보를 저장할 수 있다.
  이 입장권은 눈으로 보이지는 않지만 다른 곳에서 관리한다.
  로그인 방식은 다음과 같은 다양한 방식이 있다.
  - Cookie 방식 X
    쿠키란 개발자도구에서 application 탭 안의 cookie에 저장되는 정보들을 말한다.
    이 안에 입장권을 숨겨놓는 방식이지만 보안 위험성이 있어 요즘은 deprecated 된 방식이기도 하다.
  - Session 방식 O
    유저가 session id만 제출하면 Server에서 DB를 찾고 해당 id를 확인하고 "아이디/로그인날짜/유효기간" 등을 확인하여 문제가 없으면 입장권을 보내주는 방식이다.
    단점은 DB에 접근해야 하므로 유저가 많을수록 성능이 떨어진다는 것이다.
  - JWT(=JSON Web Token) 방식 O
    토큰 방식이라고 하면 대부분 JWT를 사용하므로 그냥 JWT라고 정의하겠다.
    유저가 로그인에 성공하면, 서버에서 "아이디/로그인날짜/유효기간" 등을 암호화해서 유저에게 토큰을 발급한다.
    암호화할 때마다 문자열이 변경되기 때문에 토큰을 위조했을 시 바로 알 수가 있어서 보안에는 강하다.
    가장 큰 장점으로는 GET / POST 요청을 할 때마다 DB를 거치지 않으므로, 성능에도 영향이 없다는 것이다.
    따라서 유저가 많은 경우나, (매우 많은 서버를 운영하는) 마이크로서비스에서 즐겨쓴다.
    Next.js에서 ID/PW로 로그인시에는 강제로 이것을 사용해야 한다.
    이유는 개발자가 직접 ID/PW 취급하면 보안이슈가 생길 수 있어서 session는 금지해 둔 것이라고 한다. (출처: NextAuth 설명서)
  - OAuth(=오어스, =소셜로그인) 방식 O
    구글로 로그인, 페이스북으로 로그인 같은 것을 OAuth 방식이라고 한다.
    "소셜 로그인"이라고도 한다.
    기본적으로 "JWT 방식"과 함께 쓰이는데, OAuth를 통해 토큰을 만들어서, 유저 정보들을 기입해서 유저에게 보내주는 방식이다.

1. 깃허브 계정 OAuth를 사용하기 위한 준비
  깃허브 로그인
  세팅
  개발자 세팅
  OAuth Apps 탭 클릭
  Register a New Application 버튼 클릭
  폼 입력
    Application Name: Next.js
    Homepage URL: http://localhost:3000
    Authorization callback URL: http://localhost:3000
    Register application 버튼 클릭
  Generate a new client secret 버튼 클릭
  Client ID와 Client Secret을 어딘가에 메모해두기

1. Next-auth (혹은 Auth.js) 설치
  $ cd app1
  $ npm i next-auth@4.21.1



1. src/pages/api/auth/[...nextauth].js 생성 : Next-auth 세팅을 하는 곳이며, [...nextauth].js 라는 이름은 프레임워크에서 지정한 고정 이름이므로 주의
  import NextAuth from "next-auth"
  import GithubProvider from "next-auth/providers/github"

  export const authOptions = {
    providers: [
      // 1. 사용하고 싶은 OAuth 프로바이더를 여기에 추가한다.
      GithubProvider({
        // 2. Github에서 발급받은 ID
        clientId: "Next Back 용 clientId!",
        // 3. Github에서 발급받은 Secret
        clientSecret: "Next Back 용 clientSecret!",
      }),
    ],
    // 4. JWT 생성시 쓰는 암호로, 일단 아무거나 적어둔다.
    secret: "Next Back 용 secret!",
  }

  export default NextAuth(authOptions)



1. src/app/LoginBtn.js 생성 : 로그인 컴포넌트 작성
  "use client"

  // 4. signIn 함수를 사용해 authOptions에 저장해둔 로그인을 실시하는 버튼 컴포넌트를 작성한다.
  import { signIn } from "next-auth/react"

  export default function LoginBtn() {
    return (
      <button
        onClick={() => {
          signIn()
        }}
      >
        로그인
      </button>
    )
  }



1. src/app/LogoutBtn.js 생성 : 로그아웃 컴포넌트 작성
  "use client"

  // 5. signOut 함수를 사용해 authOptions에 저장해둔 로그아웃을 실시하는 버튼 컴포넌트를 작성한다.
  import { signOut } from "next-auth/react"

  export default function LoginBtn() {
    return (
      <button
        onClick={() => {
          signOut()
        }}
      >
        로그아웃
      </button>
    )
  }



1. src/app/layout.jsx 수정 : 메뉴와 함께, 로그인 컴포넌트를 레이아웃에 추가
  import "./globals.css"
  import Link from "next/link"
  // 6. 버튼을 누르면 로그인/로그아웃 처리를 하는 컴포넌트를 임포트해서 로그인/로그아웃을 해주도록 한다.
  import LoginBtn from "./LoginBtn.js"
  import LogoutBtn from "./LogoutBtn.js"
  // 7. getServerSession라는 NextAuth 함수를 임포트해 온다.
  import { getServerSession } from "next-auth"
  // 8. providers 배열이 들어있는 authOptions 객체를 getServerSession라는 NextAuth 함수에 넣어서 호출하면 세션 정보를 취득할 수 있다. (비동기이므로 await로 해야함)
  import { authOptions } from "../pages/api/auth/[...NextAuth].js"

  export const metadata = {
    title: "Create Next App",
    description: "Generated by create next app",
  }

  export default async function RootLayout({ children }) {
    // 9. getServerSession : 로그인 여부 정보를 세션으로 받아온다. 서버 컴포넌트 안에서 사용 가능하다.
    const session = await getServerSession(authOptions)
    // 10. 받은 로그인 세션 정보를 출력해본다.
    const user = session?.user
    console.log(user)

    return (
      <html lang="en">
        <body>
          {/* 11. 로그인 했을 때는 로그아웃, 안했을 때는 로그인 버튼이 뜨도록 한다. */}
          {user ? <LogoutBtn /> : <LoginBtn />}
          {/* 12. 로그인 했을 때는 깃허브 이미지와 유저이름이 뜨도록 한다. */}
          {user && user.image && <img src={user.image} height="15px" />}
          {user && user.name && <span>{user.name}</span>}

          {/* 13. 네비게이션 부분 */}
          <div className="navbar">
            <Link href="/" className="navbarItem">
              HOME
            </Link>
            <Link href="/bbs" className="navbarItem">
              BBS
            </Link>
          </div>

          {/* 14. 컨텐츠 부분 */}
          {children}
        </body>
      </html>
    )
  }



1. src/app/globals.css 수정 : 네비게이션 메뉴 스타일 지정
  /* Global */
  .list-bg {
    background: rgb(249, 250, 255);
    padding: 10px;
  }
  .list-item {
    background: white;
    border-radius: 10px;
    padding: 20px;
    margin-bottom: 5px;
    box-shadow: rgb(224, 224, 224) 0px 2px 4px 0px;
  }
  .list-item h4 {
    font-size: 20px;
    font-weight: 800;
    margin: 0;
  }
  .list-item p {
    color: grey;
    margin : 5px 0px;
  }
  .p-20 {
    padding: 20px;
  }
  input {
    box-sizing: border-box;
    padding: 10px;
    display: block;
    margin-bottom: 10px;
  }
  button {
    padding: 10px 15px;
    background: lightgray;
    border: none;
    border-radius: 5px;
  }
  .navbar {
    margin: 10px;
    padding: 20px;
    border: 1px solid #000;
  }
  .navbarItem {
    color: white;
    text-decoration: none;
    background: gray;
    border: none;
    border-radius: 5px;
    padding: 5px 15px;
    margin: 10px;
  }



1. 테스트
  $ cd app1
  $ npm run dev
  http://localhost:3000
  깃허브로 로그인해보기 : 처음 로그인시에는 깃허브에서 권한을 요청하고, 승인할 경우 자동 가입이 된다.
