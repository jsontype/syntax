[prettier 설치]

1. Next.js 설치와 개발환경 세팅
  - 설치 준비 : Node 18버전 이상인지 확인
    $ node -v
    $ nvm ls available
    $ nvm install 18.16.0
    $ nvm use 18.16.0

  - 설치
    $ npx create-next-app@latest (=yarn create next-app)
    앱이름 : app1
    TypeScript : Yes
    ESLint : No
    Tailwind CSS : No
    src/ directory : Yes
    experimental app/ directory : Yes
      이 부분을 물어보지 않으면, next.config.js를 다음과 같이 수정해야한다.
      /** @type {import('next').NextConfig} */
      const nextConfig = {
        experimental: {
          appDir: true,
        },
      }
      
      module.exports = nextConfig
    다른 건 그냥 엔터
  - 설치 완료후 버전 맞추기
    package.json에 가서 "next": "13.2.4", 로 변경
    $ cd app1
    $ npm i

1. prettier 설치
  $ npm i --save-dev prettier

1. .prettierrc.js 생성
  module.exports = {
    semi: false, // Next.js는 기본적으로 마지막 세미콜론(;)을 사용하지 않는다.
    singleQuote: true, // Next.js는 기본적으로 작은 따옴표(')를 사용한다.
    trailingComma: 'all', // 변경 사항을 최소화하기위해, 콤마를 추가할 수 있으면, 마지막에 콤마를 추가한다.
  }

1. package.json 수정 : 설정한 Prettier를 사용하기 위해 다음과 같이 스크립트를 추가한다. 
  - 여기서는 --ignore-path 옵션으로 .gitignore 파일을 선택함으로써, Git으로 관리하지 않는 파일들은 검사하지 않도록 설정한다.
  "scripts": {
    ... ,
    "format": "prettier --check --ignore-path .gitignore .",
    "format:fix": "prettier --write --ignore-path .gitignore ."
  },

1. prettier 내용 검사 테스트 방법
  $ cd app1
  $ npm run format // 위반되는 파일을 검사한다. 있으면 수정할 파일 위치를 알려주고 에러를 리턴한다.
  $ npm run format:fix // 위반되는 파일을 수정한다.
  $ npm run format // 수정한 뒤, 위반되는 파일을 재검사한다.

1. 테스트
  $ cd app1  
  $ npm start
  http://localhost:3000
