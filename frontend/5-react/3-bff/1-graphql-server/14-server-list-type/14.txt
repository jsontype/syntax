[List 타입 : 리스트 타입]

1. 사전준비 : 프로젝트를 새로 깔지 않고, 이전 챕터에서의 코드를 그대로 카피해서 가지고 온다.

1. List 타입 : 특정 타입의 배열을 반환하는 타입이다.
  사실 이거는 전에 teams-x-supplies 조인할 때 사용해 봤었지만, 다시 한번, 자세히 알아보자.
  ★ List 타입은 선언하는 방식에 따라 다음과 같은 제약사항이 있음을 이해하자.
    - users: [String]
      users: null ✔
      users: [ ] ✔
      users: [..., null] ✔
    - users: [String!]
      users: null ✔
      users: [ ] ✔
      users: [..., null] ❌
    - users: [String]!
      users: null ❌
      users: [ ] ✔
      users: [..., null] ✔
    - users: [String!]!
      users: null ❌
      users: [ ] ✔
      users: [..., null] ❌



1. typedefs-resolvers/equipment.js 수정 : EquipmentAdv 쿼리에 "users: [String!]"을 추가하고, resolevers 객체에도 쿼리 부분에 equipmentAdvs 부분의 처리를 바꿔준다.
  const { gql } = require("apollo-server")
  const dbWorks = require("../dbWorks")

  const typeDefs = gql`
    type Equipment {
      id: String
      used_by: Role!
      count: Int
      new_or_used: NewOrUsed!
    }
    type EquipmentAdv {
      id: ID!
      used_by: String!
      count: Int!
      use_rate: Float
      is_new: Boolean!
      users: [String!]
    }
  `

  const resolvers = {
    Query: {
      equipments: (parent, args) => dbWorks.getEquipments(args),
      equipmentAdvs: (parent, args) =>
        dbWorks.getEquipments(args).map((equipment) => {
          if (equipment.used_by === "developer") {
            equipment.use_rate = Math.random().toFixed(2)
          }
          equipment.is_new = equipment.new_or_used === "new"
          // 50% 확률로 equipmentAdvs 항목에 users 배열을 추가하고, 그 안에 20% 확률로 개발자를 넣는다.
          if (Math.random() > 0.5) {
            equipment.users = []
            dbWorks.getPeople(args).forEach((person) => {
              if (person.role === equipment.used_by && Math.random() < 0.2) {
                equipment.users.push(person.last_name)
              }
            })
          }
          return equipment
        }),
    },

    Mutation: {
      deleteEquipment: (parent, args) => dbWorks.deleteItem("equipments", args),
    },
  }

  module.exports = {
    typeDefs: typeDefs,
    resolvers: resolvers,
  }



1. 테스트
  $ cd app1
  $ npm start
  http://localhost:4000/ 접속 : GraphQL Playground가 열린다.
  GraphQL Playground 사용 : 좌측에 다음 쿼리를 넣고 Run을 클릭
    query {
      equipmentAdvs {
        id
        used_by
        count
        use_rate
        is_new
        users
      }
    }
  equipmentAdvs 데이터안에 50% 확률로 users 배열이 추가되어 있고, 그 안에 20% 확률로 개발자가 들어간 상태인지 확인한다.
