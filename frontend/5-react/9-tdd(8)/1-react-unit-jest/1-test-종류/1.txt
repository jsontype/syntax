[리액트에서 제스트를 통해 TDD 구현하기]
참조URL: https://learn-react-test.vlpt.us/#/

1. 리액트에서 제스트를 통해 TDD 구현하기
  이 튜토리얼에서는 리액트 프로젝트에서 TDD (Test Driven Development · 테스트 주도 개발)을 하는 방법에 대해서 알아보겠다. 

1. 테스트란?
  테스트란, 우리가 작성한 코드가 잘 작동한다는 것을 검증하는 작업을 의미한다.
  특정 기능이 잘 작동하는지 확인하려면 어떻게 해야할까? 
  가장 기본적인 방법으로는 우리가 구현한 기능을 직접 사용해보는 것이다. 
  예를 들어서 직접 마우스로 눌러보고, 키보드로 입력해서 우리의 의도대로 잘 작동하는건지 확인하는 것이다.
  테스트의 종류에는 다음과 같은 두가지가 있다.
    - Unit Test : 함수 하나하나와 같이 코드의 작은 부분을 테스트하는 것이다.
      즉, 모든 함수와 메소드에 대한 테스트 케이스(Test case)를 작성하는 절차를 말한다.
      유닛 테스트는 아주 조그마한 테스트 케이스 단위로 작성된다.
      JEST는 Unit Test의 자동화를 하는데 필요한 라이브러리이다.
    - Integration Test : 서로 다른 시스템들의 상호작용이 잘 이뤄지는지 테스트하는 것이다.
      여러 컴포넌트들을 렌더링하고 서로 상호 작용을 잘 하고 있다던지,
      DOM 이벤트를 발생 시켰을 때 우리의 UI에 원하는 변화가 잘 발생한다던지,
      기능들이 전체적으로 잘 작동하는지 확인하기 위해서 사용 하는 것이다.
    - E2E Test (End point To End point, 종단간 테스트) : 개발물을 "사용자 관점"에서 테스트 하는 방법이다. 
      페이지에서 원하는 텍스트가 제대로 출력이 되었는지, 
      버튼을 클릭 했을 때 올바른 동작을 수행하는 지 등을 테스트한다.
      Cypress는 E2E Test의 자동화를 하는데 필요한 라이브러리이다.
  더 알기 쉽게 예시를 들어보겠다.
  예를 들자면 한 게임에서 유저가 몬스터를 때려잡는 상황을 가정하자. 그 게임의 함수는
    유저가 몬스터에게 달려가는 Move 함수
    유저가 몬스터를 때리는 Attack 함수
    몬스터를 잡고 난 후 전리품을 수집하는 Gather 함수
  가 있다고 가정하자.
    유닛테스트 : "각 함수마다 여러 입력값을 줘"보고, 리턴이 잘 되는지 테스트하는 것이다.
    통합테스트 : 유저가 몬스터를 잡고 전리품을 수집했을 때, 실제로 의도대로 "DB에 잘 저장됐는지" 테스트하는 것이다.
    종단간테스트 : 실제 유저가 되어 이 모든 일련의 과정이 정상적으로 돌아가는지 "게임 내에서" 테스트해보는 것이다.
  이런 느낌이다.

1. 테스트 자동화란?
  개발 자체가 긴급해서 테스트를 직접해가면서, 개발을 마쳤다.
  그런데 우리가 만든 프로젝트의 모든 기능을 사람이 수동으로 하나하나 확인하는 것은 정말 번거로운 일이다.
  그래도 기어이 수동으로 테스트를 하면서 개발을 마치고 나니까, 
  Front-end 테스트가 누락됨에 따라, 
  컴포넌트를 추가/수정하는 과정에서 에러가 발생하는 경우가 생겼다.
  꼭 Front 문제라기 보다는, 
  Back-end 개발자가 api를 변경한 경우에도 종종 문제가 발생하는 경우가 있었다.

  더 이상은 이런 식으로는 안된다.
  매번 테스트를 하는데 시간을 뺏길 수는 없으며,
  모든 문제를 육안으로 모두 체크할 수도 없다.
  그래서 우리는 테스트 자동화라는 작업을 한다.
  사람이 직접 확인을 하는 것이 아니라 테스트를 하는 코드를 작성해서, 테스트 시스템이 자동으로 확인을 해줄 수 있게 하는 것이다.
  이를 테스트 자동화라고 한다.

1. 테스트 자동화를 통해 얻을 수 있는 이점
  협업을 하게 되는 경우 테스트 코드를 작성하는 것은 매우 큰 도움을 준다.

  첫째, 
  "예를 들어 여러분이 코드 A를 작성하고, 다른 개발자가 코드 B를 작성했다고 가정해보자.
  어느날 여러분이 코드를 수정하면서 A 코드와 B 코드를 조금씩 수정했는데,
  여러분이 직접 확인 할 때는 모두 잘 작동하는지 알았는데,
  알고보니 사소한 실수를 했다거나 어떠한 상황을 고려하지 못해서 B 코드의 기능의 일부가 고장나있을 수도 있다.
  그런데 그걸 캐치하지 못하고 서비스가 배포된다면, 치명적인 버그가 있는 상태로 사용자에게 제공되는 것이다."
  프로젝트의 규모가 정말 커서 고려해야 할 사항이 많거나, 
  여러명이 작업을 진행 한 코드여서 코드를 수정한 사람이 해당 코드를 모두 제대로 파악하고 있지 않을 때 이러한 일이 발생하기 쉽다. 
  그런데 만약 우리가 테스트 자동화를 했더라면 우리가 준비해놓은 상황에 대하여 자동으로 빠르게 검사를 해줄 수 있기 때문에 
  코드가 이전과 똑같이 작동하는지 아니면 고장났는지 쉽게 판단을 할 수 있어서 이러한 안타까운 일을 방지 할 수 있다.
  테스트 코드를 사용하면 우리가 프로젝트를 개발하는 과정에서 
  우리가 써내려가는 코드가 기존의 기능들을 실수로 망가뜨리는것을 아주 효과적으로 방지 할 수 있다. 
  또한 개발하게 될 떄 실제 발생 할 수 있게 되는 상황에 대하여 미리 정리해놓고 
  그에 맞춰 코드를 작성하게 되면 우리가 실수로 빠뜨릴 수 있는 사항들을 까먹지 않고 잘 챙길 수 있게 된다.

  둘째, 
  코드를 리팩토링 할 때 좋다. 
  "예를 들어서 우리가 A 라는 기능을 리팩토링할 경우, 리팩토링을 하고 있는 기능이 규모가 커다란 기능이라면 
  실수로 빠뜨릴 수 있는 사항도 있을 수 있다. 
  그래서, 리팩토링 이후에는 버그가 있는지 없는지 정말 세밀하게 또 확인을 해봐야한다."
  그런데 테스트 코드가 존재한다면, 리팩토링 이후에 코드가 이전과 똑같이 작동하는지 검증하는게 매우 쉬워지기 때문에 
  코드의 질을 향상시키는 것에 매우 큰 도움이 된다.
  테스트 코드를 작성한다고해서 프로젝트에서 버그가 발생하지 않는 것은 아니다.
  테스트 코드를 작성해도, 프로젝트에는 버그가 발생할 수 있다. 
  하지만, 만약 버그가 발생했다면, 그 버그를 고치고 나서, 버그가 발생하는 상황에 대한 테스트 코드를 작성해두면,
  두번 다시 똑같은 실수를 하는 것을 방지할 수 있다.

1. 자바스크립트로 작성된 프로젝트에 테스트 자동화를 사용 할 때 사용 할 수 있는 도구
  Jest : Jest는 페이스북 팀에서 Jasmine 기반으로 만든 테스팅 프레임워크이며, 가장 시작하기 편하다. (CRA로 만든 프로젝트에는 자동으로 적용됨)
  Mocha
  Karma
  Jasmine
  Chai

1. TDD란?
  테스트 주도 개발(Test Driven Development)의 약자로, 테스트를 통해 이끌어 나가는 형태의 개발을 의미한다.
  다시 말해, TDD란, 테스트를 먼저 만들고 테스트를 통과하기 위한 것을 짜는 것이다.
  즉, 만드는 과정에서 우선 "테스트를 작성"하고 "테스트를 통과하는 코드를 작성"하고를 반복하면서,
  제대로 동작하는지에 대한 피드백을 적극적으로 받는 것이다.
  (* 여담이지만, 아토믹 디자인에서 TDD를 할 경우, Storybook을 도입해 CDD(Component Driven Development)를 병행하기도 한다.)
