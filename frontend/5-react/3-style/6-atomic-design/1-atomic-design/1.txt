[아토믹디자인]

1. 사전준비 : init 앱을 가지고 온다.

1. 아토믹디자인이란?
  아토믹디자인은 "가장 작은 컴포넌트 단위를 원자(Atoms)로 설정"하고, 이를 바탕으로
  상위 컴포넌트인 "분자(Moleculues), 유기체(Organisms), 템플릿(Templates)"로 모아가며,
  최종적으로는 "페이지(Pages)"에 안착시키는 디자인 패턴이다.

1. 아토믹디자인을 쓰는 이유
  대형 프로젝트에서는 최적화된 코드 재사용이 필수로, 이를 위해서 도입한다.
  아토믹 디자인은 리액트, 뷰, 앵귤러 등 컴포넌트를 사용하는 프레임워크에 모두 사용될 수 있다.

  - 원자(Atoms)
    디자인과 기능의 최소 단위
    레이블(Label), 텍스트(Text), 컨테이너(Container), 버튼(Button), 아이콘(Icon) 등이 있다.
  - 분자(Moleculues)
    원자보다 한 단계 위의 컴포넌트
    입력 폼(Input forms), 내비게이션(Navigation), 카드(Card) 등
  - 유기체(Organisms)
    입력 폼과 함께 헤더를 감싸거나, 여러 카드를 관리하는 그리드
    여기서부터는 명확히 컴포넌트의 사이즈를 설명하기가 어렵다는 단점이 있다
    프로젝트별로 유기체에 해당하는 컴포넌트 단위는 다를 수 있고,
    이를 유기체 단위가 아닌 더 상위컴포넌트라 할 수 있는 템플릿과 페이지로 관리할 수도 있다.
  - 템플릿(Templates)
    여러 유기체가 모여있고, 페이지보다는 낮은 단위이다.

1. 아토믹디자인의 단점
  첫번째 단점은 "비슷하지만 다른 용도의 Atoms가 많아질수록 기능의 구분이 어려워진다"는 점이다.
  예를 들어 Input Area가 있는데,
  다른 용도의 Input Area들이 생길 때마다 Props를 주는 형태로 하다가,
  컴포넌트간 의존성과 복잡도가 생각보다 까다로워서, 
  "새로운 Atoms"를 생성해야하는 경우가 잦아지게 되면,
  "InputAreaText / InputAreaCardInfo / 무한대 ..."와 같이
  원자에 해당하는 컴포넌트가 용도에 따라 파편화되고 난잡해질 수 있다.
  그 결과 "수 많은 원자 컴포넌트가 각각 어떤 기능을 하는지 명확히 구분"하는 것이 어려워진다.

  두번째 단점은,
  하위 컴포넌트에서 예상치 못한 에러가 발생하게 되면 
  모든 상위 컴포넌트가 엉망이 되는 일이 생긴다는 점이다.
