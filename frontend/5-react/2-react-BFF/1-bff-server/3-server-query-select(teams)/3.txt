[Playground에 teams를 불러오는 Query, Type, Resolver를 추가하고 쿼리 날려보기]

1. 사전준비 : 프로젝트를 새로 깔지 않고, 이전 챕터에서의 코드를 그대로 카피해서 가지고 온다.

1. Query란?
  데이터를 반환하는 액션 함수들을 지정해둔 객체이다.

1. 설치 : Apollo 서버 설치 후, GraphQL Playground 사용하기 위한 준비
  $ cd app1
  $ npm i graphql apollo-server

1. index.js 수정 : 아폴로 서버 실행. GraphQL Playground를 사용할 수 있도록 한다.
  const database = require("./database")
  const { ApolloServer, gql } = require("apollo-server")

  // typeDefs : GraphQL 스키마(요청에 사용될 Query들을 정의하고, 해당 Query 요청시 반환될 데이터 타입을 설정하는 것)로, gql(Template Literal Tag) 함수로 생성됨
  const typeDefs = gql`
    type Query {
      teams: [Team]
    }
    type Team {
      id: Int
      manager: String
      office: String
      extension_number: String
      mascot: String
      cleaning_duty: String
      project: String
    }
  `

  // resolvers : 데이터를 반환, 입력, 수정, 삭제하는 액션 함수들을 지정해둔 객체이다.
  const resolvers = {
    // Query : 데이터를 반환하는 액션 함수들을 지정해둔 객체이다.
    Query: {
      teams: () => database.teams,
    },
  }

  // ApolloServer 클래스 : GraphQL 서버를 생성하는 클래스로, 인자값에 typeDefs, resolvers를 넣어서 server 객체를 생성한다.
  const server = new ApolloServer({ typeDefs, resolvers })

  server.listen().then(({ url }) => {
    console.log(`🚀  Server ready at ${url}`)
  })

1. 테스트
  $ cd app1
  $ npm start
  http://localhost:4000/ 접속 : GraphQL Playground가 열린다.
  GraphQL Playground 시작 : Automatically redirect to Studio next time 에 체크 후, Query your server를 클릭
  GraphQL Playground 사용 : 좌측에 다음 쿼리를 넣고 Run을 클릭
    query {
      teams {
        id
        manager
        office
        extension_number
        mascot
        cleaning_duty
        project
      }
    }
  결과가 제대로 표시되는지 확인

1. GraphQL Playground의 그 외 사용법 기억해두기
  GraphQL Playground 좌측에 있는 Schema 아이콘 클릭 : "스키마"를 확인할 수 있다.
  GraphQL Playground 좌측에 있는 Expoloer 아이콘 클릭 : 좌측의 Document에서 "어떤 명령어가 있는지" 확인할 수 있다.
