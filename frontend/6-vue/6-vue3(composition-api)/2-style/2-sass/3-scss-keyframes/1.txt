[Sass Keyframes를 이용해 애니메이션 정의하기]

1. 사전준비: 프로젝트를 새로 깔지 않고, 이전 챕터에서의 코드를 그대로 카피해서 가지고 온다.

>>>>>>> 여기서부터 시작! GPT에서는 전에 물어봤던거, Vue3 Sass keyframes 검색함 나옴!!!! <<<<<<<

1. Keyframes란?
  SCSS에서 @keyframes는 웹 페이지의 요소에 복잡한 애니메이션을 적용하기 위해 사용하는 규칙이다.
  @keyframes 규칙을 사용하여 애니메이션의 시작부터 끝까지 여러 단계에서 요소의 모양, 위치, 색상 등을 단계적으로 변화시킬 수 있다.
  문법은 다음과 같다.
    선언할 때에는 @keyframes example { 0% { 스타일코드 } 50% { 스타일코드 } 100% { 스타일코드 } } 
    또는 @keyframes example { from { 스타일코드 } to { 스타일코드 } } 이렇게 선언한다.
    적용할 때는 div { animation: example 5s infinite } 이렇게 적용한다.

1. src/components/Keyframes.vue 작성 : @keyframes 예시 컴포넌트 만들기
  ```
    <template>
      <div>
        <div class="fade-in">FadeIn 애니메이션</div>
        <div class="slide-in">SlideIn 애니메이션</div>
        <div class="pulse">Pulse 애니메이션</div>
      </div>
    </template>

    <style lang="scss" scoped>
    .fade-in { animation: fadeIn 3s ease-in-out; }
    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }

    .slide-in { animation: slideIn 2s ease-out; }
    @keyframes slideIn {
      from {
        transform: translateX(-100%);
      }
      to {
        transform: translateX(0);
      }
    }

    .pulse { animation: pulse 2s infinite ease-in-out; }
    @keyframes pulse {
      0% { transform: scale(1); }
      50% { transform: scale(1.2); }
      100% { transform: scale(1); }
    }
    </style>
  ```

1. src/App.vue 수정 : @keyframes 예시 컴포넌트 호출
  ```
    <template>
      <Keyframes />
    </template>

    <script setup lang="ts">
    import Keyframes from '@/components/Keyframes.vue';
    </script>

    <style lang="scss" scoped>
    </style>
  ```

1. 테스트 : 화면을 리프레시 했을 때 애니메이션이 잘 나타나는지 확인
  $ cd app1
  $ npm start

1. 과제 : fadeOut keyframes도 만들어보기
