[i18n: 텍스트 다국어지원 라이브러리]

1. 사전준비: init 앱을 가지고 온다.

1. 사전준비: src/components/HelloWorld.vue 삭제

1. 라이브러리 설치
  $ npm i vue-i18n

1. src/i18n/index.js 생성 : 국제화를 위한 초기 설정을 한다.
  ```
    import { createI18n } from "vue-i18n";

    // 메시지 정의
    const messages = {
      en: {
        message: {
          hello: "Hello!",
        },
      },
      ja: {
        message: {
          hello: "こんにちは！",
        },
      },
    };
    
    // i18n 인스턴스 생성
    const i18n = createI18n({
      legacy: false, // Vue2 Options API일 때는 true, Vue3 Composition API일 때는 false로 설정
      locale: "en", // 기본 언어 설정
      fallbackLocale: "en", // 사용 가능한 번역이 없는 경우 대체할 언어
      messages,
    });
    
    export default i18n;
  ```

1. src/main.ts 수정 : Vue 애플리케이션에 i18n 적용
  ```
    import { createApp } from "vue";
    import App from "./App.vue";
    import i18n from "./i18n";

    const app = createApp(App);

    app.use(i18n);
    app.mount("#app");
  ```

1. src/components/Hello.vue 생성 : 국제화 컴포넌트를 생성한다.
  ```
    <template>
      <div id="app">
        <button @click="changeLocale('en')">EN</button> | 
        <button @click="changeLocale('ja')">JA</button>
        <p>{{ t('message.hello') }}</p>
      </div>
    </template>

    <script setup>
    import { useI18n } from 'vue-i18n';

    const { locale, t } = useI18n();

    function changeLocale(newLocale) {
      locale.value = newLocale;
    }
    </script>
  ```

1. src/App.vue 수정 : 컴포넌트를 호출한다.
  ```
    <template>
      <Hello />
    </template>

    <script setup lang="ts">
    import Hello from '@/components/Hello.vue'
    </script>

    <style scoped>
    </style>
  ```

1. 테스트 : 국제화 인사말이 제대로 표시되는지 확인한다.
  $ cd app1
  $ npm run dev
