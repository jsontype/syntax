[async/await]

1. 사전준비: 프로젝트를 새로 깔지 않고, 이전 챕터에서의 코드를 그대로 카피해서 가지고 온다.

1. Async/Await 및 Promise 사용하기
  JavaScript의 비동기 처리를 위해 async/await 및 Promise가 널리 사용된다.
  Vue 컴포넌트 내에서 비동기 데이터를 처리할 때도 이들이 중요한 역할을 한다.
  사용방법은 api 호출 함수(getMovies)를 async로 선언하고, 내부에서 await 키워드를 사용할 수 있다.
  axios.get은 Promise를 반환하며, await을 사용하여 응답을 기다린다.
  기다리다가 데이터가 다 도착하면, movies 배열을 업데이트한다.

1. src/components/MovieApp.vue 수정
  ```
    <template>
      <div>
        <h1>Movie App</h1>
        <div id="movies">
          <div v-for="movie in movies" :key="movie.id" class="movie">
            <a class="movieTitle" :href="movie.url">{{ movie.title }}</a>
            <img class="movieImage" :src="movie.background_image" :alt="movie.title" />
          </div>
        </div>
      </div>
    </template>

    <script setup>
    import { ref, onMounted } from 'vue';

    const movies = ref([]);

    async function getMovies() {
      try {
        const response = await fetch('https://yts.mx/api/v2/list_movies.json?sort_by=rating')
        const data = await response.json()
        movies.value = data.data.movies
        console.log('movies.value: ', movies.value)
      } catch (error) {
        console.error('영화 정보를 불러오는 중 오류 발생:', error)
      }
    }

    onMounted(() => {
      getMovies()
    })
    </script>

    <style lang="css" scoped>
    .movieTitle {
      display: block;
    }
    </style>

  ```

1. 테스트
  $ cd app1
  $ npm run dev

1. 참고: .then과 async/await 비교
  지금까지 API 호출과 같은 비동기 작업을 처리할 때 then을 사용하는 방식과 async/await을 사용하는 두가지 방식을 봤다.
  둘다 promise 기반으로 동작하지만, async/await을 사용하면 코드가 더 간결해진다.
  또한, async/await을 사용하면 에러 처리를 try/catch 문으로 처리할 수 있다.
  .then을 사용할 때는 에러 처리를 catch로 처리해야 한다.

  .then을 사용할 때
    - 장점
      체이닝(Chaining): .then()을 연속해서 사용하여 여러 비동기 작업을 순차적으로 연결할 수 있다.
      유연성: 다양한 상황에 맞게 .then(), .catch(), .finally() 등을 활용하여 세분화된 에러 핸들링 및 처리 흐름을 제어할 수 있다.
    - 단점
      콜백 지옥(Callback Hell): 여러 비동기 작업을 연속해서 처리할 때, 코드가 깊게 중첩되어 복잡해질 수 있다.
      가독성 저하: 중첩된 .then()은 코드의 흐름을 한눈에 파악하기 어렵게 만들 수 있다.
    - 예제
      ```      
        getData()
          .then(data => {
            console.log(data);
            return processData(data);
          })
          .then(processedData => {
            console.log(processedData);
          })
          .catch(error => {
            console.error(error);
          });
      ```

  async/await을 사용할 때
    - 장점
      동기적 코드 스타일: 비동기 코드를 동기적으로 보이게 작성할 수 있어, 가독성이 높다.
      에러 핸들링: try/catch 블록을 사용하여 간결하고 직관적인 에러 핸들링이 가능하다.
      중첩 감소: 중첩된 .then()을 피하고, 코드의 깊이를 줄일 수 있다.
    - 단점
      환경 제한: 오래된 JS 런타임에서는 async/await을 지원하지 않는 환경이 있으므로 Babel과 같은 트랜스파일러가 필수이다.
      단일 try/catch 블록: 여러 비동기 작업을 연속해서 처리할 때, 각각의 에러 처리에 각각의 try/catch 블록이 필요해 "에러처리에 한해서는 가독성이 저하"된다.
    - 예제 
      ```      
        async function handleData() {
          try {
            const data = await getData();
            console.log(data);
            const processedData = await processData(data);
            console.log(processedData);
          } catch (error) {
            console.error(error);
          }
        }
      ```
