[watch]

1. 사전준비 : 프로젝트를 새로 깔지 않고, 이전 챕터에서의 코드를 그대로 카피해서 가지고 온다.

1. watch란?
  watch는 데이터가 변경될 때마다 이를 감지하고, 필요한 작업을 수행할 수 있게 하는 기능이다.

1. reactive state와의 관련성
  당연한 얘기지만, 이 역시 변화를 감지할 수 있는 반응형 상태여야 한다.
  그래서 computed 속성은 "ref 또는 reactive 처리된 변수"를 사용해야 한다.
  (vue의 많은 기능들이 반응형 데이터를 필요로 하기 때문에, 값이 변할 변수를 선언할 때는 늘 ref, reactive를 사용하자.)

1. watch vs computed (차이점)
  watch는 computed와 비슷한 역할을 하지만, 차이점이 있다.
  computed는 데이터의 변화를 감지하고, "변화시 그 값을 기반으로 새로운 값을 만든다."
  watch는 데이터의 변화를 감지하고, "변화시 특정 함수를 수행한다."

  더 쉬운 설명은 다음과 같다.

  ```
  Computed (계산된 값):
    computed는 마치 스마트한 계산기 같다.
    예를 들어, 여러 개의 사과를 가지고 있고, 이 사과의 총 개수를 알고 싶을 때 사용한다.
    사과의 수가 바뀔 때마다, computed는 자동으로 총 개수를 다시 계산해준다.
    하지만 사과의 수가 변하지 않으면, 계산기는 쉬고 있다.
    간단히 말해서, computed는 어떤 값을 기반으로 "새로운 값을 만들 때" 사용한다.

  Watch (감시하기):
    watch는 마치 감시 카메라와 같다.
    예를 들어, 스스로 TV를 보는 시간을 감시하고 싶다고 생각해 보자.
    TV를 켜거나 끌 때마다, watch는 이를 감지하고 부모님에게 알려줄 수 있다.
    간단히 말해서, watch는 어떤 값이 바뀌는 것을 지켜보고, 그 값이 바뀔 때마다 특별한 일을 해주는 도구이다.

  정리:
    computed는 값의 변화를 감시하다가, 변화하면 그 값을 기반으로 한 새로운 다른 값을 만드는 것이고,
    watch는 값의 변화를 감시하다가, 변화하면 어떤 특정한 함수를 실행시키는 것이다.
    이렇게 둘은 서로 다른 일을 하지만, 둘 다 Vue에서 중요한 역할을 한다.
  ```

1. watch의 실제 사용 예시
  경로 감시 (Route monitoring): 
    아래와 같이 URL 경로의 변화를 감시하고, 그에 따라 특정 작업을 수행할 수 있다.
    "watch(() => route.path, (newPath, oldPath) => { /* 로직 */ }, { immediate: true })"
    이때 { immediate: true } 옵션을 추가하면, watch가 처음 등록되는 시점부터(= Mounted 시점부터) 즉시 실행된다.
  폼 데이터 감시 (Form data monitoring): 
    아래와 같이 사용자의 입력이나 선택 등 폼 데이터의 변화를 감시하여, 데이터의 유효성 검사, 자동 저장 등의 기능을 구현할 수 있다.
    "watch(() => form.name, (newName, oldName) => { /* 로직 */ })"
