[v-model]

1. 사전준비 : 프로젝트를 새로 깔지 않고, 이전 챕터에서의 코드를 그대로 카피해서 가지고 온다.

1. v-model
  v-bind(:)가 단방향 데이터 바인딩(JS → HTML)이라면,
  v-model은 양방향 데이터 바인딩(JS ↔︎ HTML)으로, 주로 폼 입력 같은 곳에 바인딩하여 사용된다.

1. v-model 이용 시 주의사항
  v-model은 "@change" 또는 ":value"와 같은 속성을 함께 사용하지 않는 것이 좋다.
  v-model이 양방향 데이터 바인딩이기 때문에, value와 input 이벤트에 대한 기본적인 바인딩을 제어하기 때문이다.

1. src/components/VModel.vue 생성
  ```
    <template>
      <div>
        <h2>v-model 양방향 데이터 바인딩</h2>
        <form>
          <input
            type="text"
            id="input-example"
            placeholder="값을 입력하세요"
            v-model="inputValue"
          />
          <p>입력값: {{ inputValue }}</p>
        </form>
      </div>
    </template>

    <script setup>
    import { ref } from 'vue';

    const inputValue = ref('');
    </script>

    <style scoped>
    </style>
  ```

1. src/App.vue 수정 : VModel 컴포넌트를 호출한다.
  ```
    <template>
      <VBind />
      <VBindProps 
        :string1="str1" 
        :string2="str2" 
        :number1="num1" 
        :boolean1="bool1"
        :on-click="showAlert"
      />
      <hr />
      <VOn />
      <hr />
      <VIf />
      <VElse />
      <VElseIf1 />
      <VElseIf2 />
      <VShow />
      <hr />
      <VFor />
      <hr />
      <VModel />
    </template>

    <script setup lang="ts">
    import VBind from '@/components/VBind.vue'
    import VBindProps from '@/components/VBindProps.vue'
    import VOn from '@/components/VOn.vue'
    import VIf from '@/components/VIf.vue'
    import VElse from '@/components/VElse.vue'
    import VElseIf1 from '@/components/VElseIf1.vue'
    import VElseIf2 from '@/components/VElseIf2.vue'
    import VShow from '@/components/VShow.vue'
    import VFor from '@/components/VFor.vue'
    import VModel from '@/components/VModel.vue'

    const str1 = 'String 1'
    const str2 = 'String 2'
    const num1 = 9999
    const bool1 = num1 > 9998
    const showAlert = () => {
      alert('clicked')
    }
    </script>

    <style scoped>
    </style>
  ```

1. 테스트
  $ cd app1
  $ npm run dev
