[v-on, v-model 수식자]

1. 사전준비 : 프로젝트를 새로 깔지 않고, 이전 챕터에서의 코드를 그대로 카피해서 가지고 온다.

1. 수식자(modifier)란?
  v-on과 v-model에 사용되는 점(.)으로 시작하는 특수 접미사이다.
  사용시에는, @click.once, v-model.lazy와 같이 사용된다.
  수식자별로 다음과 같은 추가적인 기능을 부여한다.
    .once 수식자: 처음 한번만 실행
    .lazy 수식자: 입력이 다 끝나면 실행 (@change와 같은 효과)
    .trim 수식자: 양 끝의 공백을 제거
    .number 수식자: 입력을 숫자로 처리

1. src/components/VModelModifier.vue 생성 : 수식자 추가
  ```
    <template>
      <div>
        <h1>V-Model, V-On에 쓰이는 이벤트 수식자(Modifier)들</h1>

        <h3>.once : 한 번만 실행</h3>
        <button @click.once="onceHandler">버튼</button>

        <h3>.lazy : 입력을 마칠때까지 기다렸다가 업데이트</h3>
        <input 
          v-model.lazy="lazyValue"       
          @input="lazyHandler"
          @change="lazyHandler"
        />

        <h3>.trim : 양 끝의 공백을 제거</h3>
        <input 
          v-model.trim="trimmedInput" 
          @input="trimHandler" 
          placeholder=""
        />

        <h3>.number : 숫자 입력만 처리</h3>
        <input 
          v-model.number="numberInput" 
          @input="numberHandler" 
        />
      </div>
    </template>

    <script setup>
    import { ref } from 'vue'

    // .once 이벤트 수식자의 이용
    const onceHandler = () => {
      console.log('이 이벤트는 한 번만 실행된다.')
    }

    // .lazy 이벤트 수식자의 이용
    const lazyValue = ref('');
    const lazyHandler = () => {
      console.log('Lazy Value:', lazyValue.value)
    }

    // .trim 이벤트 수식자의 이용
    const trimmedInput = ref('');
    const trimHandler = () => {
      console.log('Trimmed Input:', trimmedInput.value)
    }

    // .number 이벤트 수식자의 이용
    const numberInput = ref(0);
    const numberHandler = () => {
      console.log('Number Input:', numberInput.value)
    }
    </script>

    <style scoped>
    </style>
  ```

1. src/App.vue 수정 : VModelModifier 컴포넌트를 호출한다.
  ```
    <template>
      <VBind />
      <VBindProps 
        :string1="str1" 
        :string2="str2" 
        :number1="num1" 
        :boolean1="bool1"
        :on-click="showAlert"
      />
      <hr />
      <VOn />
      <hr />
      <VIf />
      <VElse />
      <VElseIf1 />
      <VElseIf2 />
      <VShow />
      <hr />
      <VFor />
      <hr />
      <VModel />
      <VModelModifier />
    </template>

    <script setup lang="ts">
    import VBind from '@/components/VBind.vue'
    import VBindProps from '@/components/VBindProps.vue'
    import VOn from '@/components/VOn.vue'
    import VIf from '@/components/VIf.vue'
    import VElse from '@/components/VElse.vue'
    import VElseIf1 from '@/components/VElseIf1.vue'
    import VElseIf2 from '@/components/VElseIf2.vue'
    import VShow from '@/components/VShow.vue'
    import VFor from '@/components/VFor.vue'
    import VModel from '@/components/VModel.vue'
    import VModelModifier from '@/components/VModelModifier.vue'

    const str1 = 'String 1'
    const str2 = 'String 2'
    const num1 = 9999
    const bool1 = num1 > 9998
    const showAlert = () => {
      alert('clicked')
    }
    </script>

    <style scoped>
    </style>
  ```

1. 테스트 : 콘솔값을 확인하면서 각 폼에 키 입력을 해본다.
  $ cd app1
  $ npm run dev

1. 참고 : 아래와 같이, v-on에서도 modifier를 쓸 수 있다.
  ```
    <button @click.once="onceHandler">버튼</button>
    <input @input.lazy="lazyHandler" @change="lazyHandler" :value="lazyHandler" placeholder="lazyHandler" />
    <input @input.trim="trimHandler" placeholder="trimHandler" />
    <input @input.number="numberHandler" placeholder="numberHandler" />
  ```
