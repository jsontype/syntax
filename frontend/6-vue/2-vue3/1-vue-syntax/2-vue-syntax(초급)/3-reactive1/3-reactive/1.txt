[reactive]

1. 사전준비 : 프로젝트를 새로 깔지 않고, 이전 챕터에서의 코드를 그대로 카피해서 가지고 온다.

1. reactive란?
  reactive는 객체 타입(Array 객체, Object 객체, Function) 내부의 값이 변경되면, 자동으로 반응하여 화면을 갱신한다.

1. ref와 reactive의 차이
  reactive도 ref와 마찬가지로, 반응형 변수를 만들어주는 함수이지만,
  reactive는 ref와 다르게, "객체 타입(Array 객체, Object 객체, Function)"를 반응형으로 만들어줄 때 쓰며,
  reactive는 ref와 다르게, ".value"로 접근하지 않고, 그냥 접근한다.

1. src/App.vue 수정
  ```
    <template>
      <HelloWorld msg="Hello" />
      <GlobalHelloWorld msg="Vue3" />
      <NoRef />
      <Ref />
      <NoReactive />
      <Reactive />
    </template>

    <script setup lang="ts">
    import HelloWorld from '@/components/HelloWorld.vue'
    import NoRef from '@/components/reactive/NoRef.vue'
    import Ref from '@/components/reactive/Ref.vue'
    import NoReactive from '@/components/reactive/NoReactive.vue'
    import Reactive from '@/components/reactive/Reactive.vue'
    </script>

    <style scoped>
    </style>
  ```

1. src/components/reactive/NoReactive.vue 생성
  ```
    <template>
      <div>
        <h1>No Reactive</h1>
        <p>{{ obj }}</p>
        <p>{{ arr }}</p>
        <button @click="changeObj">Change Obj?</button>
        <button @click="changeArr">Change Arr?</button>
      </div>
    </template>

    <script setup>
    // 아래처럼 객체나 배열을 정의하고, 이를 DOM에 바인딩하면 
    // "변화를 인식하고 이에 반응해서" DOM을 변경할 수 없다.
    const obj = {
      foo: 'foo',
      bar: 'bar',
    }
    const arr = [1, 2, 3]

    const changeObj = () => {
      obj.foo = 'FOO'
      obj.bar = 'BAR'
    }

    const changeArr = () => {
      arr.push(4)
    }
    </script>

    <style scoped>
    </style>

  ```

1. src/components/reactive/Reactive.vue 생성
  ```
    <template>
      <div>
        <h1>Reactive</h1>
        <p>{{ obj }}</p>
        <p>{{ arr }}</p>
        <button @click="changeObj">Change Obj</button>
        <button @click="changeArr">Change Arr</button>
      </div>
    </template>

    <script setup>
    // 아래처럼 객체나 배열을 정의하고, 이를 DOM에 바인딩하면 
    // "변화를 인식하고 이에 반응해서" DOM을 변경할 수 있다.
    import { reactive } from 'vue'

    const obj = reactive({
      foo: 'foo',
      bar: 'bar',
    })
    const arr = reactive([1, 2, 3])

    const changeObj = () => {
      obj.foo = 'FOO'
      obj.bar = 'BAR'
    }

    const changeArr = () => {
      arr.push(4)
    }
    </script>

    <style scoped>
    </style>

  ```

1. 테스트
  $ cd app1
  $ npm run dev
