[watch: deep]

1. 사전준비 : 프로젝트를 새로 깔지 않고, 이전 챕터에서의 코드를 그대로 카피해서 가지고 온다.

1. Deep Watch란?
  일반적인 watch는 특정 데이터가 변경될 때만 반응한다.
  하지만, 객체나 배열과 같은 복합 데이터 타입을 감시할 때, 그 내부 속성이나 요소의 변경은 기본적으로 감지되지 않는다.
  이 때 아래와 같이 watch 함수의 3번째 인자에 { deep: true } 옵션을 넣으면, Vue는 객체, 배열의 내부 값 변경까지 감지할 수 있다.
  Vue 3에서 deep watch를 설정하는 방법은 다음과 같다. 여기서는 "user"라는 객체를 감시한다고 가정해보자.
  ```
    import { watch } from 'vue';

    watch(() => user, (newValue, oldValue) => {
      // 데이터가 변경될 때 실행할 로직
    }, {
      deep: true
    });
  ```
  이렇게 설정하면, user 데이터의 내부 구조에 발생하는 모든 변경을 감지하고, 해당 변경에 대응하는 로직을 실행할 수 있다.
  단, 첫번째 인자값에 "() => user" 대신에 "user"만 넣게 되면, 자동으로 deep watch를 하게 되는 기능이 있어, deep 옵션을 추가하지 않아도 된다. 
  그러나, 상황에 따라서는 반드시 함수형 업데이트를 해서, 리턴값을 조정하는 처리를 해야 하는 경우도 있을 수 있으므로, 잘 알아두자.

1. src/components/reactive/WatchNoDeep.vue 생성 : 객체의 변경을 감지하지 하지 못함
  ```
    <template>
      <div>
        <h1>Watch: Deep 옵션 없을 때</h1>
        <input v-model="user.userName" placeholder="Name" />
        <input v-model="user.details.age" placeholder="Age" />
        <div>Updated at: {{ lastUpdated }}</div>
      </div>
    </template>

    <script setup>
    import { reactive, ref, watch } from "vue";

    // 사용자 정보를 reactive 객체로 정의
    const user = reactive({
      userName: "",
      details: {
        age: "",
      },
    });

    const lastUpdated = ref("");

    // watch의 첫번째 인자가 함수형 리턴값인데, 세번째 인자값에 { deep: true } 옵션이 없으면, user 객체의 변경은 감지하지 못함
    watch(
      () => user,
      (newValue, oldValue) => {
        lastUpdated.value = new Date().toLocaleTimeString();
      }
    );
    </script>
  ```

1. src/components/reactive/WatchDeep.vue 생성 : 객체의 변경을 감지함
    ```
    <template>
      <div>
        <h1>Watch: Deep 옵션 있을 때</h1>
        <input v-model="user.userName" placeholder="Name" />
        <input v-model="user.details.age" placeholder="Age" />
        <div>Updated at: {{ lastUpdated }}</div>
      </div>
    </template>

    <script setup>
    import { reactive, ref, watch } from "vue";

    const user = reactive({
      userName: "",
      details: {
        age: "",
      },
    });

    const lastUpdated = ref("");

    // watch의 첫번째 인자가 함수형이 아니라 그냥 user이거나, 세번째 인자값에 { deep: true } 옵션이 있으면, user 객체의 변경을 감지함
    watch(
      () => user, // 첫번째 인자가 () => user와 같은 함수형이 아니라 그냥 user이면, user 객체의 변경을 감지함
      (newValue, oldValue) => {
        lastUpdated.value = new Date().toLocaleTimeString();
      },
      { deep: true } // 또는, 세번째 인자값에 { deep: true } 옵션이 있으면, user 객체의 변경을 감지함
    );
    </script>
  ```

1. src/views/Home.vue 변경 : 컴포넌트 호출
  ```
    <template>
      <Computed />
      <NoComputed1 />
      <NoComputed2 />
      <Watch />
      <WatchForm />
      <WatchNoDeep />
      <WatchDeep />
    </template>

    <script setup lang="ts">
    import Computed from "@/components/reactive/Computed.vue";
    import NoComputed1 from "@/components/reactive/NoComputed1.vue";
    import NoComputed2 from "@/components/reactive/NoComputed2.vue";
    import Watch from "@/components/reactive/Watch.vue";
    import WatchForm from "@/components/reactive/WatchForm.vue";
    import WatchNoDeep from "@/components/reactive/WatchNoDeep.vue";
    import WatchDeep from "@/components/reactive/WatchDeep.vue";
    </script>

    <style scoped>
    </style>
  ```

1. 테스트 : 위 폼은 변화를 감시하지 못하고, 아래 폼은 감시하는 것을 확인
  $ cd app1
  $ npm run dev
