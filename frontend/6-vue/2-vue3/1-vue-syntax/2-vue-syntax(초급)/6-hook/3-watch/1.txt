[watch]

1. 사전준비 : 프로젝트를 새로 깔지 않고, 이전 챕터에서의 코드를 그대로 카피해서 가지고 온다.

1. watch란?
  watch는 데이터가 변경될 때마다 이를 감지하고, 필요한 작업을 수행할 수 있게 하는 기능이다.

1. reactive state와의 관련성
  당연한 얘기지만, 이 역시 변화를 감지할 수 있는 반응형 상태여야 한다.
  그래서 computed 속성은 "ref 또는 reactive 처리된 변수"를 사용해야 한다.
  (vue의 많은 기능들이 반응형 데이터를 필요로 하기 때문에, 값이 변할 변수를 선언할 때는 늘 ref, reactive를 사용하자.)

1. watch vs computed (차이점)
  watch는 computed와 비슷한 역할을 하지만, 차이점이 있다.
  computed는 데이터의 변화를 감지하고, "변화시 그 값을 기반으로 새로운 값을 만든다."
  watch는 데이터의 변화를 감지하고, "변화시 특정 함수를 수행한다."

  더 쉬운 설명은 다음과 같다.

  ```
  Computed (계산된 값):
    computed는 마치 스마트한 계산기 같다.
    예를 들어, 여러 개의 사과를 가지고 있고, 이 사과의 총 개수를 알고 싶을 때 사용한다.
    사과의 수가 바뀔 때마다, computed는 자동으로 총 개수를 다시 계산해준다.
    하지만 사과의 수가 변하지 않으면, 계산기는 쉬고 있다.
    간단히 말해서, computed는 어떤 값을 기반으로 "새로운 값을 만들 때" 사용한다.

  Watch (감시하기):
    watch는 마치 감시 카메라와 같다.
    예를 들어, 스스로 TV를 보는 시간을 감시하고 싶다고 생각해 보자.
    TV를 켜거나 끌 때마다, watch는 이를 감지하고 부모님에게 알려줄 수 있다.
    간단히 말해서, watch는 어떤 값이 바뀌는 것을 지켜보고, 그 값이 바뀔 때마다 특별한 일을 해주는 도구이다.

  정리:
    computed는 값의 변화를 감시하다가, 변화하면 그 값을 기반으로 한 새로운 다른 값을 만드는 것이고,
    watch는 값의 변화를 감시하다가, 변화하면 어떤 특정한 함수를 실행시키는 것이다.
    이렇게 둘은 서로 다른 일을 하지만, 둘 다 Vue에서 중요한 역할을 한다.
  ```

1. src/components/reactive/Watch.vue 생성
  ```
    <script setup>
    import { ref, watch } from 'vue'

    const count = ref(0)
    const increment = () => {
      count.value++
    }
    // 첫번째 인자는 watch할 대상이 되는 변수, 두번째 인자는 watch하는 대상이 바뀌었을 때 실행할 함수
    const stop = watch(count, (newValue, oldValue) => {
      console.log(`count가 ${oldValue}로부터 ${newValue}로 바뀜`)
    })
    </script>

    <template>
      <h1>Watch</h1>
      <p>Count: {{ count }}</p>
      <button @click="increment">Increment</button>
    </template>
  ```

1. src/App.vue 수정 : Watch 컴포넌트 호출 추가
  ```
    <template>
      <Computed />
      <NoComputed1 />
      <NoComputed2 />
      <Watch />
    </template>

    <script setup lang="ts">
    import Computed from '@/components/reactive/Computed.vue'
    import NoComputed1 from '@/components/reactive/NoComputed1.vue'
    import NoComputed2 from '@/components/reactive/NoComputed2.vue'
    import Watch from '@/components/reactive/Watch.vue'
    </script>

    <style scoped>
    </style>
  ```

1. 테스트
  $ cd app1
  $ npm run dev



[watch의 실제 사용예시1]

1. 폼 데이터 감시 (Form data monitoring) 후 입력값이 변경될 때마다 밸리데이션 처리
  아래와 같이 사용자의 입력이나 선택 등 폼 데이터의 변화를 감시하여, 데이터의 유효성 검사, 자동 저장 등의 기능을 구현할 수 있다.
  "watch(() => form.name, (newName, oldName) => { /* 로직 */ })"

1. src/components/reactive/WatchForm.vue 생성 : 폼 데이터의 변화를 감시하는 예시
  ```
    <template>
      <div>
        <h1>Watch: 폼 Validation 처리</h1>
        <form>
          <input type="text" placeholder="성함을 입력해주세요" v-model="username" />
        </form>
      </div>
    </template>

    <script setup>
    import { ref, watch } from 'vue'

    const username = ref('')
    const stop = watch(username, (newValue, oldValue) => {
      if (newValue.length > 10) {
        alert('10글자 이상은 입력할 수 없습니다.')
        username.value = oldValue
        return
      }
    })
    </script>

    <style lang="scss" scoped>
    </style>
  ```

1. src/App.vue 수정 : WatchForm 컴포넌트 호출 추가
  ```
    <template>
      <Computed />
      <NoComputed1 />
      <NoComputed2 />
      <Watch />
      <WatchForm />
    </template>

    <script setup lang="ts">
    import Computed from '@/components/reactive/Computed.vue'
    import NoComputed1 from '@/components/reactive/NoComputed1.vue'
    import NoComputed2 from '@/components/reactive/NoComputed2.vue'
    import Watch from '@/components/reactive/Watch.vue'
    import WatchForm from '@/components/reactive/WatchForm.vue'
    </script>

    <style scoped>
    </style>
  ```

1. 테스트 : 인풋에 10자 이상 입력하면 경고창이 뜨고, 이전 값으로 돌아가는지 확인
  $ cd app1
  $ npm run dev



[watch의 실제 사용예시2]

1. 사전준비 : 루터 라이브러리 설치
  $ npm i vue-router

1. 경로 감시 (Route monitoring) 후, path나 query가 변경될 때마다의 특정한 처리
  아래와 같이 URL 경로의 변화를 감시하고, 그에 따라 특정 작업을 수행할 수 있다.
  "watch(() => route.path, (newPath, oldPath) => { /* 로직 */ }, { immediate: true })"
  이때 { immediate: true } 옵션을 추가하면, watch가 처음 등록되는 시점부터(= Mounted 시점부터) 즉시 실행된다.

1. src/router.ts 생성
  ```
    import { createRouter, createWebHistory } from 'vue-router'

    import Home from '@/views/Home.vue'
    import WatchRoute from '@/views/WatchRoute.vue'
    
    const routes = [
      { path: '/', name: 'Home', component: Home },
      { path: '/watch-route', name: 'WatchRoute', component: WatchRoute },
      { path: '/other-route', name: 'OtherRoute', component: WatchRoute },
    ]
    
    const router = createRouter({
      history: createWebHistory(),
      routes: routes,
    })
    
    export default router
  ```

1. src/main.ts 수정: router를 사용하겠다고 선언
  ```
    import { createApp } from 'vue'
    import App from './App.vue'
    import router from './router'

    const app = createApp(App)

    app.use(router)
    app.mount('#app')
  ```

1. src/views/Home.vue 생성 : src/App.vue의 내용을 모두 잘라내기 하여 붙여넣기
  ```
    <template>
      <Computed />
      <NoComputed1 />
      <NoComputed2 />
      <Watch />
      <WatchForm />
    </template>

    <script setup lang="ts">
    import Computed from '@/components/reactive/Computed.vue'
    import NoComputed1 from '@/components/reactive/NoComputed1.vue'
    import NoComputed2 from '@/components/reactive/NoComputed2.vue'
    import Watch from '@/components/reactive/Watch.vue'
    import WatchForm from '@/components/reactive/WatchForm.vue'
    </script>

    <style scoped>
    </style>
  ```

1. src/App.vue 수정 : 루터를 연결하여, 상단에 페이지 이동이 가능한 메뉴 만들기
  ```
    <template>
      <router-link to="/">Home</router-link> | 
      <router-link to="/watch-route">WatchRoute</router-link> | 
      <router-link to="/other-route">OtherRoute</router-link>
      <router-view></router-view>
    </template>

    <script setup lang="ts">
    </script>

    <style scoped>
    </style>
  ```

1. src/views/WatchRoute.vue 생성 : 경로의 변화를 감시하는 예시
  ```
    <template>
      <div>
        <h1>Watch: 경로 변경시의 처리</h1>
        <button @click="noQuery">쿼리 안주고 이동</button>
        <button @click="yesQuery">쿼리 주고 이동</button>
      </div>
    </template>
    
    <script setup>
    import { ref, watch } from 'vue'
    import { useRoute, useRouter } from 'vue-router'
    
    const route = useRoute()
    const router = useRouter()
    
    const noQuery = () => {
      router.push('/watch-route') // = router.push({ path: '/watch-route' })와 같음
    }
    const yesQuery = () => {
      router.push({ path: '/watch-route', query: { id: 'test', serialNumber: '12345' } })  
    }
    
    watch(() => route.path, (newValue, oldValue) => {
      console.log('----------------------------')
      console.log('이전 Path: ', oldValue)
      console.log('현재 Path: ', newValue)
    }, { immediate: true })
    
    watch(() => route.query, (newValue, oldValue) => {
      console.log('----------------------------')
      console.log('이전 Query: ', oldValue)
      console.log('현재 Query: ', newValue)
    }, { immediate: true })
    </script>
    
    <style lang="scss" scoped>
    </style>
  ```

1. 테스트
  $ cd app1
  $ npm run dev  
  이하의 내용을 확인할 것.
    "WatchRoute", "OtherRoute" 번갈아가며 누르면, watch가 path의 변화를 감지하여 콘솔로그 찍힘
    "쿼리 안주고 이동", "쿼리 주고 이동" 번갈아가며 누르면, watch가 query의 변화를 감지하여 콘솔로그 찍힘
    "OtherRoute" 페이지 안에서, "쿼리 주고 이동" 누르면 watch가 path와 query 모두의 변화를 감지하여 콘솔로그 찍힘
