[computed]

1. 사전준비 : 프로젝트를 새로 깔지 않고, 이전 챕터에서의 코드를 그대로 카피해서 가지고 온다.

1. computed란?
  computed 속성은 내부적으로 의존하는 반응형 상태가 변경될 때만 다시 계산되고,
  그렇지 않은 경우 이전에 계산된 값을 즉시 반환하는 캐싱된 기능이다.
  (캐싱이란, 어떤 값을 메모리에 미리 저장해 두었다가 필요할 때 불러와서 사용하는 것을 말한다.)
  이를 통해 불필요한 계산을 줄이고 성능을 향상시킬 수 있다.

  더 쉬운 설명은 다음과 같다.

  ```
    상상해보자. 
    당신이 마법사이고 컴퓨터는 당신의 마법책이다.
    이 마법책에는 다양한 마법 주문들이 있는데, 이들은 모두 "캐스팅"이라는 로딩시간이 필요하다.
    그래서 당신이 마법을 사용할 때마다, 컴퓨터는 캐스팅을 해야한다.
    예를 들어, 당신이 "2번 곱하기"라는 마법 주문을 사용할 때마다, 컴퓨터는 "2번 곱하기"라는 마법 주문을 새로 캐스팅해야 한다.
    캐스팅하는 데에는 속도가 걸리기 때문에, 많은 고급 마법을 사용하면, 마법책은 느려지게 될 것이다.

    그런데, computed는 "캐스팅을 미리 해주는 마법사 보조스킬"이다.
    "상황이 바뀔 때마다, 미리 캐스팅을 해두어서, 발동될 때의 딜레이를 없앤다."
    그래서 마법의 "발동" 속도를 향상시키는 강력한 보조스킬이다.

    예1. 당신이 "2번 곱하기"라는 마법 주문을 만들고 싶다고 해보자.
      당신은 computed 마법을 쓰고, 이 마법 주문이 어떻게 작동해야 하는지 알려준다.
      예를 들어, "이 숫자를 가져와서 2배로 만들어!"라고 말이다.
      그런 다음, 당신이 숫자를 바꿀 때마다, computed 마법은 자동으로 새로운 2배 숫자를 만들어준다.
      그래서 컴퓨터는 덜 힘들게 일할 수 있고, 모든 것이 더 빨리 작동하게 된다.
      하지만, 숫자가 바뀌지 않으면, computed 캐스팅은 발동되지 않을 것이다.

    예2. "이 숫자를 가져와서 2배로 만들고, 그 다음에 3을 더해줘!"를 캐스팅한다고 가장하자.
      이렇게 하면, 당신이 숫자를 바꿀 때마다, computed 마법은 미리 자동으로 새로운 2배 숫자를 만들고, 그 다음에 3을 더해준다.
      하지만, 숫자가 바뀌지 않으면, computed 캐스팅은 발동되지 않을 것이다.

    예3. "현재 연도"라는 변수와 "태어난 해"라는 변수를 가지고 있다면,
      computed를 사용해서 "현재 나이"라는 새로운 변수를 만들 수 있다.
      이 새로운 변수는 "현재 연도"에서 "태어난 해"를 빼서 계산될 것이다.
      하지만, "현재 연도"가 바뀌지 않으면, computed 캐스팅은 발동되지 않을 것이다.
  ```

1. reactive state와의 관련성
  당연한 얘기지만, 이 역시 변화를 감지할 수 있는 반응형 상태여야 한다.
  그래서 computed 속성은 "ref 또는 reactive 처리된 변수"를 사용해야 한다.
  (vue의 많은 기능들이 반응형 데이터를 필요로 하기 때문에, 값이 변할 변수를 선언할 때는 늘 ref, reactive를 사용하자.)

1. 사전준비 : src/components/HelloWorld.vue 삭제

1. src/components/Computed.vue 생성
  ```
    <script setup>
    import { ref, computed } from 'vue'
    
    const count = ref(0)
    // computed된 변수를 정의해두면, count 값이 바뀔 때마다 자동으로 doubleCount 값도 바뀐다.
    const doubleCount = computed(() => count.value * 2)
    
    // count.value의 값이 바뀌면 미리 장전(=계산)되기 때문에, doubleCount 마법을 발사하는 경우에는
    // 아래에서는 장전(=계산)이 필요없게 된다.
    const increment = () => {
      count.value++
    }
    </script>
    
    <template>
      <h1>Computed</h1>
      <p>Count: {{ count }}</p>
      <p>Double Count: {{ doubleCount }}</p>
      <button @click="increment">Increment</button>
    </template>
  ```

1. src/App.vue 수정 : Computed 컴포넌트 호출
  ```
    <template>
      <Computed />
    </template>

    <script setup lang="ts">
    import Computed from '@/components/reactive/Computed.vue'
    </script>

    <style scoped>
    </style>
  ```

1. 테스트 : 화면을 띄워서 결과를 확인해보자.
  $ cd app1
  $ npm run dev



[computed를 사용하지 않았을 때의 결과 확인하기]

1. src/components/NoComputed1.vue 생성 : 주석을 읽어보면서 computed된 처리와 비교해보자.
  ```
    <script setup>
    import { ref, computed } from 'vue'

    const count = ref(0)
    // 아래는 둘다 computed 되지 않은 속성을 정의하므로, 반응성이 없다. 초기값으로만 사용 가능하다. 
    // 초기값이 0이므로, 계속 NaN이 된다. count 값을 바꿔도 마찬가지이다.
    const doubleCount1 = count.value * 2
    const doubleCount2 = ref(count.value * 2)

    const increment = () => {
      count.value++
    }
    </script>

    <template>
      <h1>No Computed1: 반응성 없음</h1>
      <p>Count: {{ count }}</p>
      <p>Double Count1: {{ doubleCount1 }}</p>
      <p>Double Count2: {{ doubleCount2 }}</p>
      <button @click="increment">Increment</button>
    </template>
  ```

1. src/components/NoComputed2.vue 생성 : 주석을 읽어보면서 computed된 처리와 비교해보자.
  ```
    <script setup>
    import { ref, computed } from 'vue'

    const count = ref(0)
    const doubleCount = ref(0)

    const increment = () => {
      count.value = count.value + 1
      // computed를 사용하지 않고 doubleCount 값을 변경하려면,
      // 매번 직접 계산을 해야 하고, 캐스팅하는 시간이 늘어난다.
      doubleCount.value = count.value * 2
    }
    </script>

    <template>
      <h1>No Computed2: 비효율적 (캐스팅이 매번 발생)</h1>
      <p>Count: {{ count }}</p>
      <p>Double Count: {{ doubleCount }}</p>
      <button @click="increment">Increment</button>
    </template>
  ```    

1. src/App.vue 수정 : NoComputed1과 NoComputed2 컴포넌트 호출. 
  ```
    <template>
      <Computed />
      <NoComputed1 />
      <NoComputed2 />
    </template>

    <script setup lang="ts">
    import Computed from '@/components/reactive/Computed.vue'
    import NoComputed1 from '@/components/reactive/NoComputed1.vue'
    import NoComputed2 from '@/components/reactive/NoComputed2.vue'
    </script>

    <style scoped>
    </style>
  ```

1. 테스트: 화면을 띄워서 결과를 computed된 처리와 비교해보자.
  $ cd app1
  $ npm run dev
