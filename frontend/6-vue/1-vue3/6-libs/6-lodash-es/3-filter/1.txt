[lodash-es: filter]

1. filter 함수란?
  js의 기존 filter 함수와 동일하다.
  배열에서 주어진 조건에 맞는 모든 요소를 필터링하여 새로운 배열로 반환하는 함수이다.

1. 사전준비: 프로젝트를 새로 깔지 않고, 이전 챕터에서의 코드를 그대로 카피해서 가지고 온다.

1. src/components/Filter.vue 생성
```
  <template>
    <h1>Filter</h1>
    <input
      v-model="searchText"
      placeholder="Search By teamId (= 1, 2, 3)"
      @input="onSearch"
    />
    <p>검색 결과:</p>
    <div v-for="item in searchResult">
      <div :key="item.id">
        <div v-if="item.name">
          {{ item.name }}
        </div>
        <div v-else>
          없음
        </div>
      </div>
    </div>
  </template>

  <script setup>
  import { ref } from 'vue'
  import { filter } from 'lodash-es'

  const users = [
    { teamId: '1', name: 'ACDC' },
    { teamId: '1', name: 'Alice in Chain' },
    { teamId: '2', name: 'Bob Dylan' },
    { teamId: '2', name: 'Beatles' },
    { teamId: '3', name: 'Skid Row' },
    { teamId: '3', name: 'Queen' }
  ]

  const searchResult = ref([])
  const searchText = ref('')

  const onSearch = () => {
    // filter로 검색결과 취득
    // const result = filter(users.teamId === searchText.value) // 기존 JS의 형태
    const result = filter(users, user => user.teamId === searchText.value) // lodash의 형태 : 일관성, 확장성, 호환성 등을 위해서 적용할 수 있다.

    // 예외처리
    if (!result) { 
      searchResult.value = []
      return
    }
    searchResult.value = result
  }
  </script>

  <style scoped>
  input {
    width: 170px;
  }
  </style>
```

1. src/App.vue 수정 : 컴포넌트를 호출한다.
```
  <template>
    <CloneDeep />
    <Find />
    <Filter />
  </template>

  <script setup lang="ts">
  import CloneDeep from '@/components/CloneDeep.vue'
  import Find from '@/components/Find.vue'
  import Filter from '@/components/Filter.vue'
  </script>

  <style scoped>
  </style>
```

1. 테스트
  $ cd app1
  $ npm run dev
