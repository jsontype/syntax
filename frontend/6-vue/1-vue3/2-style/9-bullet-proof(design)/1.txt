[Vue3 / Nuxt3 불릿프루프 설계]

1. 불릿프루프 설계
  - 불릿프루프는 Atomic Design(아토믹 디자인)과 비슷한 개념으로, 컴포넌트와 함수를 단일책임의 작은 단위로 나누어 관리하는 방법이다.
  - 불릿프루프 원칙
    단일책임원칙 적용: 각 컴포넌트와 함수는 하나의 책임만 가지도록 설계한다.
      즉, 하나의 특정 기능이나 UI 요소에 집중해야 한다는 말이다.
      예를 들어, 사용자 프로필 페이지가 있다면 다음과 같이 나눌 수 있다.
        UserProfile (전체 프로필 페이지)
        UserAvatar (사용자 아바타 표시)
        UserInfo (사용자 기본 정보 표시)
        UserPosts (사용자 게시물 목록)
    컴포지션 API활용: 로직을 재사용 가능한 컴포지션 함수로 분리한다.
    상태관리 최적화: Pinia나 Vuex를 사용하여 전역 상태를 효율적으로 관리한다.
  - 불릿프루프 장점
    아토믹디자인과 같이 대규모 애플리케이션에서도 유지보수가 쉬운 구조(재사용성, 유지보수성)를 제공하면서도,
    각 폴더의 역할이 명확히 구분되어 있어 개발자들이 코드를 쉽게 찾고 관리할 수 있다.
  - 불릿프루프 단점
    프로젝트의 규모가 작을 경우에는 불릿프루프 구조가 오히려 복잡성을 더해줄 수 있다.
    또한, 처음에는 구조를 이해하는데 시간이 걸릴 수 있으므로, 팀원들에게 충분한 교육이 필요하다.

1. 폴더 구조
  src/
  ├── assets/ (SCSS, 폰트, 이미지 등의 정적 파일)
  ├── components/ (재사용 가능한 모든 컴포넌트들)
  │   ├── base/ (버튼, 입력 필드, 라벨 등 기본 UI 컴포넌트)
  │   ├── common/ (헤더, 푸터, 사이드바 등 공통 컴포넌트)
  │   └── feature/ (특정 기능에 관련된 컴포넌트)
  ├── composables/ (재사용 가능한 use~ 컴포지션 훅 함수)
  ├── config/ (환경 설정, 상수 등의 정의 파일)
  ├── layouts/ (전체 애플리케이션의 레이아웃을 정의하는 컴포넌트)
  ├── views/ (실제 페이지 컴포넌트 ※ Nuxt.js의 경우 pages/로 사용)
  ├── router/ (라우터 설정)
  ├── services/ 
  │   ├── api/ (API 호출 등의 서비스 로직)
  │   └── helpers/ (비즈니스 로직 헬퍼 함수)
  ├── store/ (Vuex 또는 Pinia 상태관리파일 설정)
  │   ├── modules/
  │   └── index.ts
  ├── types/ (TypeScript 타입 정의 파일)
  └── utils/ (범용 유틸리티 함수)
