[Nuxt2 → Nuxt3 이행]

1. 이행 시나리오
  현장에 갔더니 EOL 문제로 Nuxt2에서 Nuxt3로 이행을 해야한다고 한다.
  사양은 다음과 같다.
    - ts에서 ts로 이행한다.
    - 스타일은 PrimeVue에서 PrimeVue로 이행.
    - 스토어는 Pinia에서 Pinia로 이행.
    - options api로 적힌 코드들을 composition api의 setup 문법으로 이행한다.

1. 이행준비 : 초기 인프라구축
  Nuxt3 프로젝트 생성: Nuxt3 프로젝트를 새로 생성하거나, 기존 Nuxt2 프로젝트를 Nuxt3로 업그레이드한다.
  package.json 수정: Nuxt3는 Vue3를 기반으로 하므로, Vue3 호환 라이브러리로 의존성을 교체하거나 업데이트한다.
  
1. 이행준비 : 작업전 준비 루틴
  기본적으로 아래의 형태로 VSCode를 양분하여 열어둔다. 아래는 예시이다.
    Nuxt3 앱 // Nuxt2 앱
    components/pages/Login/[id].vue         // components/pages/Login/_id.vue
    components/models/LoginCard/index.vue   // components/models/Login/index.vue
    store/Login/useLoginStore.ts            // store/loginModule.ts
    composables/Login/useLogin.vue          // components/models/Login/login.ts (Logic 부)
    composables/Login/useLoginConnector.vue // components/models/Login/login.ts (Connector 부)

1. 이행 : Atoms
  기존 앱 거동확인: Nuxt2앱의 Storybook을 기동해서 화면을 확인한다.
  기존 Vue 인스턴스 옵션(props, emits, data, methods, computed 등)을 setup 함수로 변환:
    props는 interface와 함께 정의한다.
      - case 1: required props 밖에 없을 경우 
        interface Props { id: number, name: string }
        const props = defineProps<Props>()
      - case 2 : optional props에, 디폴트값이 있을 경우
        interface Props { id?: number, name?: string }
        const props = withDefaults(defineProps<Props>(), { id: 0, name: '' })
      - 사용하는 쪽 : props.id, props.name
    emits는 interface와 함께 정의한다.
      - case 1: param이 없는 경우
        interface Emits { (e: 'click'): void, (e: 'change'): void }
        const emit = defineEmits<Emits>()
      - case 2: param이 있는 경우
        interface Emits { (e: 'change', v: string): void }
        const emit = defineEmits<Emits>()
      - 사용하는 쪽 : const emitChange = (value) => { emit('change', value) }
    data는 ref나 reactive를 사용하여 선언하고, 호출부에서 this.를 삭제하고 .value를 붙인다.
      경우에 따라서는 함수의 리턴값이 들어간 data들이 있다.
      이 경우 ref의 초기값에 바로 안들어가는 경우가 있는데 그럴땐 일단 ref('') 등으로 설정하고,
      다음에 onMounted 함수에서 name.value = getName() 이런식으로 넣어주면 된다.
    methods는 const 화살표 함수로 변환한다.
    computed는 computed 함수를 사용하여 정의한다.
    lifecycle은 onMounted 등의 함수를 사용하여 정의한다.
  달러 문법 변환: 예를 들어 i18n의 변환이라면, 기존의 $t에서 i18n.t()로 변환하는등 $문법을 수정한다.

1. 이행절차 : Models, Pages 이행
  기존 앱 거동확인: Nuxt2앱을 구동해서 화면을 확인한다.
  기존 Vue 인스턴스 옵션(data, methods, computed)을 setup 함수로 변환: Atoms와 동일
  달러 문법 변환: Atoms와 동일
  Atoms 호출부 이행
  Models, Pages 호출부 이행
  import types {} from './types' 이행
  store 이행:
    store/useLoginStore.ts 같은 파일 생성
    storeKey.ts 에서 storeKey를 추가한다. 예를 들면 login: 'login'과 같은 방식으로 추가한다.
    각 스토어를 defineStore를 사용하여 설정하고, state, getters, actions를 정의한다.
      // PINIA의 경우
      // state => ref
      // getter => computed
      // action => function (arrow function -> const 기능명 = () => {} 의 형태로...)
      // mutation => 뮤테이션은 set만 하는 뮤테이션은 안써도 됨. 다 버려도 됨. 그 외의 뮤테이션은 actions에 넣는다.
    사용하는 쪽 수정: loginModule.함수명(파라미터) 이런식으로 쓰던 것을 
      const loginStore = useLoginStore() 한 다음, loginStore.함수명(파라미터) 이런식으로 수정한다.
  composables 이행:
    composables/useLogin.ts 같은 파일 생성
    사용하는 쪽 수정: 임포트후 함수명(파라미터) 이런식으로 쓰던 것을
      const login = useLogin() 로 바꾼 다음, 사용하는 쪽에서 login.해당기능(파라미터) 이런식으로 수정한다. 
  connectors 이행:
    composables/useLoginConnector.ts 같은 파일 생성
      사용하는 쪽 수정: 임포트후 함수명(파라미터) 이런식으로 쓰던 것을
      const loginConnector = useLoginConnector() 한 다음, loginConnector.함수명(파라미터) 이런식으로 수정한다.
  utils 이행:
    utils/useLoginOOOUtil.ts 같은 파일 생성 (그 외 남은 것들은 Util이 안 붙는 것도 Util에다가 넣는다.)
    사용하는 쪽 수정: 임포트후 함수명(파라미터) 이런식으로 쓰던 것을
      const loginOOOutil = useLoginOOOUtil() 로 바꾼 다음, 사용하는 쪽에서 loginOOOutil.해당기능(파라미터) 이런식으로 수정한다. 
  Style 수정: 
    변경된 라이브러리(예: scss → tailwindcss class)로 변경
    transition의 사용은 보통 mixin을 사용해서 <transition name="fade"> 한 뒤, .fade { @include transition-fade(); } 이런 느낌으로 변경
  Storybook 작성(Atoms, Models만 해당. Pages는 그냥 들어가서 보면 됨) :
    <login-card ... 를 검색해서 넘겨주는 props 등 추출해서 만들기
    스토리 페이지 작성후 직접 넣어서 거동 확인해보기

1. 테스트
  레거시 코드 체크: 아래의 문자열 검색후 존재시 다 삭제
    this
    $t
    hc-
    console.log
    # 주석
  코드 최적화
  단위 및 통합 테스트: 
    컴포넌트와 스토어의 기능이 올바르게 작동하는지 확인한다.
    특히 상태 관리와 API 통합 부분에서 기존 로직과의 호환성을 확인해야 한다.
