[axios]

1. 사전준비: 프로젝트를 새로 깔지 않고, 이전 챕터에서의 코드를 그대로 카피해서 가지고 온다.

1. 라이브러리 설치
  $ npm i axios (= yarn add axios)

1. src/componentns/MovieApp.vue 수정 : axios 라이브러리를 사용하여 영화 목록을 불러오기
  ```
    <template>
      <div>
        <h1>Movie App</h1>
        <div id="movies">
          <div v-for="movie in movies" :key="movie.id" class="movie">
            <a class="movieTitle" :href="movie.url">{{ movie.title }}</a>
            <img class="movieImage" :src="movie.background_image" :alt="movie.title" />
          </div>
        </div>
      </div>
    </template>

    <script setup>
    import { ref, onMounted } from 'vue'
    import axios from 'axios'

    const movies = ref([])

    function getMovies() {
      axios.get('https://yts.mx/api/v2/list_movies.json?sort_by=rating')
        .then(response => {
          movies.value = response.data.data.movies
          console.log('movies.value: ', movies.value)
        })
        .catch(error => {
          console.error('영화 정보를 불러오는 중 오류 발생:', error)
        })
    }

    onMounted(() => {
      getMovies()
    })
    </script>

    <style lang="css" scoped>
    .movieTitle {
      display: block;
    }
    </style>
  ```

1. 테스트
  $ cd app1
  $ npm run dev

1. 보충: 이 코드에는 없지만, Axios로 POST 요청할 때의 예제
  ```
    import axios from 'axios';

    const postData = {
      title: 'New Post',
      body: 'This is the body of the new post',
      userId: 1,
    };

    axios.post('https://jsonplaceholder.typicode.com/posts', postData, {
      headers: {
        'Content-Type': 'application/json'
      },
      timeout: 1000,
    })
    .then(response => {
      console.log(response.data);
    })
    .catch(error => {
      console.error('Error:', error);
    });
  ```
  Axios와 Fetch의 차이점은 다음과 같다.
    문법적 차이: Axios는 data를 직접 전달할 수 있지만, Fetch에서는 body에 문자열로 변환된 데이터를 전달해야 한다.
    응답 처리: Axios는 자동으로 JSON 응답을 객체로 변환해주지만, Fetch에서는 .json() 메소드를 사용하여 수동으로 변환해야 한다.
    설정 가능한 옵션: Axios와 Fetch 모두 다양한 설정 옵션을 제공한지만, Fetch는 좀 더 많은 HTTP 관련 설정을 직접 제어할 수 있다.
    에러 처리: 
      Axios는 네트워크 오류 또는 HTTP 상태 코드가 200 범위 밖일 때 예외를 발생시킨다.
      Fetch는 네트워크 오류에만 예외를 발생시키고, HTTP 오류 상태는 예외로 처리하지 않는다.
    장점: 
      Axios는 보다 간단한 구성과 자동화된 JSON 처리가 장점이며, 
      Fetch는 브라우저 내장 API로서 추가적인 라이브러리 없이 사용할 수 있다는 장점이 있다.
      - 각각의 방법은 자신의 장단점을 가지고 있으며, 사용자의 필요와 프로젝트의 요구 사항에 따라 적절한 방법을 선택하면 된다.
