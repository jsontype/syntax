[v-show]

1. 사전준비: 프로젝트를 새로 깔지 않고, 이전 챕터에서의 코드를 그대로 카피해서 가지고 온다.

1. v-if와 v-show의 차이점
  v-if는 엘리먼트가 조건이 참일 때만 렌더링한다. 조건이 거짓이면 렌더링 자체를 않는다.
  v-show는 엘리먼트가 항상 그 자리에 렌더링되지만, 조건이 참일 때는 보여지고, 거짓일 때는 display:hidden이 된다.

1. src/components/VShow.vue 생성 : V-if와 똑같은 형태이다.
  ```
    <template>
      <div>
        <h2 v-if="isOpen">Hi! (v-if 사용)</h2>
        <h2 v-show="isOpen">Hi! (v-show 사용)</h2>
        <button @click="toggle">Toggle</button>
      </div>
    </template>

    <script setup>
    import { ref } from 'vue'

    const isOpen = ref(true)
    const toggle = () => isOpen.value = !isOpen.value
    </script>

    <style scoped>
    </style>
  ```

1. src/App.vue 수정 : VShow 컴포넌트를 호출한다.
  ```
    <template>
      <VBind />
      <VBindProps 
        :string1="str1" 
        :string2="str2" 
        :number1="num1" 
        :boolean1="bool1"
        :on-click="showAlert"
      />
      <hr />
      <VOn />    
      <hr />
      <VIf />
      <VElse />
      <VElseIf1 />
      <VElseIf2 />
      <VShow />
    </template>

    <script setup lang="ts">
    import VBind from '@/components/VBind.vue'
    import VBindProps from '@/components/VBindProps.vue'
    import VOn from '@/components/VOn.vue'
    import VIf from '@/components/VIf.vue'
    import VElse from '@/components/VElse.vue'
    import VElseIf1 from '@/components/VElseIf1.vue'
    import VElseIf2 from '@/components/VElseIf2.vue'
    import VShow from '@/components/VShow.vue'

    const str1 = 'String 1'
    const str2 = 'String 2'
    const num1 = 9999
    const bool1 = num1 > 9998
    const showAlert = () => {
      alert('clicked')
    }
    </script>

    <style scoped>
    </style>
  ```

1. 테스트 : 개발자 도구를 열고 렌더링 여부를 확인
  $ cd app1
  $ npm run dev
  * 둘간의 차이를 알기 위해서는 F12로 개발자 도구를 연 다음, Elements 탭에서 해당 엘리먼트를 찾아서 확인해야 한다.
    - v-if는 조건이 거짓이면 해당 엘리먼트 자체가 렌더링되지 않는다.
    - v-show는 조건이 거짓이면 해당 엘리먼트는 렌더링되지만, display:none이 된다.
