# ***! 여행 2

[Custom Hooks: use...]

1. 사전준비 : 초급의 counter-app을 가져온다.
기본적인 카운터 앱을 기반으로, 카운트 관련 로직을 별도의 커스텀 훅(composable)으로 분리하고 관리할 수 있는 방법을 보여드리겠습니다. 이렇게 하면 카운터 기능을 다른 컴포넌트에서도 쉽게 재사용할 수 있습니다.

1. useCounter: 카운터 로직 관리
카운터의 증가, 감소 기능과 카운트 상태를 관리하는 커스텀 훅을 만듭니다.

src/composables/useCounter.ts
typescript
Copy code
import { ref } from 'vue'

export function useCounter(initialValue = 0) {
  const count = ref(initialValue);

  function increase() {
    count.value++;
  }

  function decrease() {
    if (count.value > 0) {  // Optionally prevent going below zero
      count.value--;
    }
  }

  return { count, increase, decrease };
}
2. CounterApp.vue: 컴포넌트 수정
useCounter 커스텀 훅을 사용하여 카운터 기능을 간결하게 구현합니다.

vue
Copy code
<template>
  <h1>Counter App</h1>
  <div>
    <h2>카운트: {{ count }}</h2>
    <button @click="increase">+</button>
    <button @click="decrease">-</button>
  </div>
</template>

<script setup lang="ts">
import { useCounter } from '@/composables/useCounter';

const { count, increase, decrease } = useCounter();
</script>

<style scoped>
button {
  margin: 5px;
  padding: 10px 20px;
}
</style>
3. 마무리
위의 예시에서 useCounter 커스텀 훅을 통해 카운터 관련 로직을 모듈화하여 다른 컴포넌트에서도 쉽게 재사용할 수 있습니다. 커스텀 훅을 사용함으로써 카운터 앱의 구성 요소를 더욱 단순화하고, 코드의 유지 관리와 확장성을 향상시킬 수 있습니다.

이 접근 방식은 Vue.js에서 커스텀 훅을 활용하여 컴포넌트 간에 공통 로직을 공유하고, 각 컴포넌트의 코드를 더욱 깔끔하게 유지하는 데 큰 도움이 됩니다.

