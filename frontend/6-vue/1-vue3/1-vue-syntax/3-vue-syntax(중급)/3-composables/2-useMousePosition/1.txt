[Custom Hooks: useMousePosition]

1. 사전준비 : init 앱을 가지고 온다.

1. 사전준비 : src/components/HelloWorld.vue 삭제

1. Composables(=Custom Hooks)이란?
  재사용 가능한 로직을 별도의 훅 함수(use~)로 만든 것을 말한다.
  여러 컴포넌트에서 동일한 기능을 사용할 때 유용하다.
  커스텀 훅스를 모아두는 특정한 표준 폴더는 없지만, 일반적으로 "hooks" 또는 "composables" 라는 폴더명을 사용하므로 참고하자.

1. Composables의 장점
  재사용성: 로직을 함수로 분리함으로써 다양한 컴포넌트에서 같은 로직을 재사용할 수 있다.
  유지보수성: 관련 로직이 한 곳에 모여 있어 유지보수가 용이하다.
  테스트 용이성: 독립적인 함수 단위로 로직을 구성하기 때문에 테스트가 용이하다.

1. src/composables/useMousePosition.js 생성 : 마우스 위치를 추적하는 커스텀 훅스
  ```
    import { ref, onMounted, onUnmounted } from 'vue';

    export function useMousePosition() {
      const x = ref(0);
      const y = ref(0);

      function update(e) {
        x.value = e.pageX;
        y.value = e.pageY;
      }

      onMounted(() => window.addEventListener('mousemove', update));
      onUnmounted(() => window.removeEventListener('mousemove', update));

      return { x, y };
    }
  ```

1. src/components/MousePosition.vue 생성 : 만든 커스텀 훅스는 아래와 같이 꺼내서 사용한다.
  ```
    <template>
      <div>
        X: {{ x }}, Y: {{ y }}
      </div>
    </template>

    <script setup>
    import { useMousePosition } from '@/composables/useMousePosition';

    const { x, y } = useMousePosition();
    </script>
  ```

1. src/App.vue 수정 : 컴포넌트를 호출한다.
  ```
    <template>
      <MousePosition />
    </template>

    <script setup lang="ts">
    import MousePosition from '@/components/MousePosition.vue'
    </script>

    <style scoped>
    </style>
  ```

1. 테스트
  $ cd app1
  $ npm run dev
