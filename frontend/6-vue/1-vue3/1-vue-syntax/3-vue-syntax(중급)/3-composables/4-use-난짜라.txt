# ***! 여행 4444

계속 추가할 것. 몇가지

... 아래는 템플릿임 ...

1. 사전준비 : init 앱을 가지고 온다.

1. 사전준비 : src/components/HelloWorld.vue 삭제



[실무에서 쓸만한 커스텀 훅스의 예시]

1. 폼 관련
  useForm: 폼 데이터 관리와 유효성 검사 로직을 캡슐화한다.
  useFieldArray: 배열로 구성된 폼 데이터를 관리한다.
  useReactiveState: 상태 저장 컴포넌트에서 데이터를 선언적으로 관리한다.
  기타
  useDocumentTitle: 컴포넌트의 상태에 따라 브라우저의 문서 제목을 변경한다.

1. UI/UX 및 이벤트 처리
  useDebounce: 빠른 연속 입력에서의 성능 최적화를 위해 Debounce 기능을 제공한다.
  useThrottle: 과도한 이벤트 발생을 제한하기 위해 Throttle 기능을 제공한다.
  useEventListener: 이벤트 리스너를 등록하고 제거하는 로직을 간편화한다.
  useToggle: 버튼 클릭 시 컴포넌트의 상태를 토글한다.
  useIntersectionObserver: 컴포넌트의 화면 노출 여부를 감지한다.

1. 화면 및 위치 추적
  useWindowSize: 브라우저 창 크기의 변경을 감지한다.
  useWindowResize: 브라우저 창의 크기가 변경될 때마다 이벤트를 감지한다.
  useMousePosition: 마우스의 현재 위치를 추적한다.
  useScrollPosition: 스크롤 위치를 추적한다.
  useResizeObserver: 객체의 크기 변경을 감지한다.

1. 스토리지 관련
  useLocalStorage: 로컬 스토리지에 데이터를 저장하고 검색한다.
  useSessionStorage: 세션 스토리지에 데이터를 저장하고 검색한다.

1. API 및 데이터 관련
  useApi: API 요청을 보내고 응답을 처리하며, 응답 상태에 따라 오류 처리를 한다.
  useFetchData: 서버에서 데이터를 가져와 컴포넌트의 상태를 업데이트한다. 비동기 HTTP 요청을 처리하는 로직을 포함한다.  

1. 마무리
  이러한 카테고리화는 각 훅스의 기능과 사용 목적에 따라 이루어졌으며, 실제 프로젝트에서 필요에 따라 다른 방식으로 분류하거나 새로운 카테고리를 추가할 수 있다. 
  커스텀 훅스는 중복을 제거하여, 프로젝트의 구조와 유지보수를 용이하게 하는 데 도움을 준다. 실제 사용할 때는 GPT 등을 참조해서 만들면 된다.
