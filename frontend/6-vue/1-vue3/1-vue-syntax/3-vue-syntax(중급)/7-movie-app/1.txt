# ***! 여행 8

... GPT ...
[Custom Hooks: use...]

1. useMovies: 영화 데이터 불러오기
영화 목록을 불러오고 상태를 관리하는 커스텀 훅입니다. 로딩 상태와 오류 처리 기능을 포함합니다.

src/composables/useMovies.js
javascript
Copy code
import { ref, onMounted } from 'vue';

export function useMovies() {
  const movies = ref([]);
  const loading = ref(false);
  const error = ref(null);

  const fetchMovies = async () => {
    loading.value = true;
    error.value = null;
    try {
      const response = await fetch('https://yts.mx/api/v2/list_movies.json?sort_by=rating');
      if (!response.ok) throw new Error('Failed to fetch movies');
      const json = await response.json();
      movies.value = json.data.movies;
    } catch (err) {
      error.value = err.message;
    } finally {
      loading.value = false;
    }
  };

  onMounted(fetchMovies);

  return { movies, loading, error, fetchMovies };
}
2. MovieApp.vue: 영화 목록을 표시하는 컴포넌트
useMovies 훅을 사용하여 영화 목록을 불러오고 로딩 상태 및 오류 메시지를 처리합니다.

vue
Copy code
<template>
  <div>
    <h1>Movie App</h1>
    <div v-if="loading">Loading...</div>
    <div v-if="error">{{ error }}</div>
    <div id="movies" v-else>
      <div v-for="movie in movies" :key="movie.id" class="movie">
        <a class="movieTitle" :href="movie.url">{{ movie.title }}</a>
        <img class="movieImage" :src="movie.background_image" :alt="movie.title" />
      </div>
    </div>
  </div>
</template>

<script setup>
import { useMovies } from '@/composables/useMovies';

const { movies, loading, error } = useMovies();
</script>

<style lang="css" scoped>
.movieTitle {
  display: block;
}
.movieImage {
  width: 100%;
  height: auto;
}
</style>
3. 테스트 및 개발 서버 실행
커스텀 훅과 컴포넌트가 올바르게 작동하는지 테스트하고 개발 서버를 실행합니다.

bash
Copy code
npm run serve
마무리
위의 코드를 사용하면 영화 애플리케이션의 다양한 기능을 효과적으로 분리할 수 있으며, Vue의 반응형 시스템을 활용하여 데이터 관리의 복잡성을 줄일 수 있습니다. 또한, 각 기능별로 커스텀 훅을 생성함으로써 향후 유지보수 및 확장성도 크게 향상됩니다.











