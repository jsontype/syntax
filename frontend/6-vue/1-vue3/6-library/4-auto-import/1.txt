[unplugin-auto-import: 자동으로 임포트를 해주는 라이브러리]

1. 배경
  vue2와 달리 vue3부터는 기본적으로,
  ref, reactive, computed, life cycle hooks 등 자주 쓰는 함수들도 기본적으로 임포트하지 않으면 사용할 수가 없게 해놓았다.
  이는 속도 향상을 위해, "사용하는 것만 임포트하자"라는 취지이다.
  그러나, 매번 임포트하는 것은 귀찮기 때문에, "AutoImport를 사용하여 필요한 기능들을 자동으로 임포트"하는 해결책은 개발 과정을 매우 편리하게 만들어준다.
  특히 computed, ref와 같은 자주 사용되는 Vue Composition API를 매번 수동으로 임포트하지 않아도 되기 때문에 코드가 더욱 깔끔해지고, 개발 속도도 향상될 수 있다.
  그러므로 Auto Import가 필요해지는 것이다. 앞으로 임포트는 이 라이브러리를 써서 자동으로 처리해주자.

1. 사전준비 : init 앱을 가지고 온다.

1. 사전준비 : src/components/HelloWorld.vue 삭제

1. 라이브러리 설치
  $ npm i -D unplugin-auto-import (= yarn add -D unplugin-auto-import)

1. vite.config.js 수정 : AutoImport를 임포트하고, plugins에 추가한다.
  ```
    import { defineConfig } from "vite";
    import vue from "@vitejs/plugin-vue";
    import path from "path";
    import AutoImport from "unplugin-auto-import/vite";
    
    export default defineConfig({
      plugins: [
        vue(),
        AutoImport({
          imports: ["vue", "vue-router", "vue-i18n"], // 필요한 라이브러리
          dts: "src/auto-imports.d.ts", // TypeScript 사용 시 타입 정의 파일 생성 경로
        }),
      ],
      resolve: {
        alias: {
          "@": path.resolve(__dirname, "src"),
        },
      },
    });
  ```

1. src/AutoImport.vue 생성 : 임포트를 하지 않은 채로 ref가 들어간 카운트 컴포넌트를 만든다.
  ```
    <template>
      <button @click="increment">Count is: {{ count }}</button>
    </template>

    <script setup lang="ts">
    const count = ref(0) // 여기서 ref는 자동으로 임포트된다.

    function increment() {
      count.value++
    }
    </script>

    <style scoped>
    </style>
  ```

1. src/App.vue 수정 : 컴포넌트를 호출한다.
```
  <template>
    <AutoImport />
  </template>

  <script setup lang="ts">
  import AutoImport from '@/components/AutoImport.vue'
  </script>

  <style scoped>
  </style>
```  

1. 테스트 : Auto Import가 잘 되는지 확인한다.
  $ cd app1
  $ npm run dev
  브라우져에서 의도대로 count 앱이 잘 동작하는지 확인한다.
  auto-imports.d.ts 파일이 생성되었는지 확인한다.
  auto-imports.d.ts 파일을 열어, "const ref"로 시작하는 ref 임포트를 정의하고 있는 행이 잘 들어가 있는지 확인한다.
