[Store 사용하기: Pinia]

1. 사전준비 : init 앱을 가지고 온다.

1. 사전준비 : src/components/HelloWorld.vue 삭제

1. 라이브러리 설치
  $ npm i pinia (= yarn add pinia)

1. pinia가 vuex보다 좋은 점
  - vuex는 모든 상태를 store/index.js 한곳에 다 모아두고, 
    pinia는 stores/counterStore.js, stores/XXXStore.js 등등 모듈별로 상태를 관리한다. 
    대규모 어플리케이션이 되면, 스토어를 모듈별로 나눠서 관리하는 것이 가능해지므로 더 좋다.
  - vuex는 모든 상태를 한번에 가져오고,
    pinia는 필요한 상태만 가져온다. 그래서 속도면에서 빠르다.
  - vuex는 모든 상태를 한번에 업데이트하고,
    pinia는 필요한 상태만 업데이트한다.

1. src/store/counterStore.js 생성 : 카운터 모듈 전용 스토어를 생성한다.
  ```
    import { defineStore } from 'pinia'

    export const useCounterStore = defineStore('counter', {
      state: () => ({
        count: 0
      }),
      actions: {
        increment() {
          this.count++
        }
      }
    })
  ```

1. src/main.ts 수정 : pinia를 연결한다.
  ```
    import { createApp } from 'vue'
    // 선언한 스토어를 앱에 연결
    // 1. pinia를 생성하는 함수를 임포트한다.
    import { createPinia } from 'pinia'
    import App from './App.vue'

    const app = createApp(App)
    // 2. pinia를 생성한다.
    const pinia = createPinia()

    // 3. app.use 함수를 통해 pinia를 앱에 연결한다.
    app.use(pinia)
    app.mount('#app')
  ```

1. src/components/Component1.vue 생성 : pinia를 컴포넌트에서 사용해보기
  ```
    <template>
      <div>
        <h1>Components1</h1>
        <p>Count: {{ count }}</p>
        <button @click="increment">증가</button>
      </div>
    </template>

    <script setup>
    // 피니아 스토어의 사용
    // 1. useCounterStore, computed를 가져온다.
    import { useCounterStore } from '@/stores/counterStore'
    import { computed } from 'vue'
    // 2. useCounterStore를 통해 store를 가져온다.
    const counterStore = useCounterStore()
    // 3. count 변수(state)를 선언한다. store가 변경되면, 자동으로 count가 변경된다.
    const count = computed(() => counterStore.count)
    // 4. increment 함수(action)를 선언한다.
    const increment = counterStore.increment
    </script>
  ```

1. src/components/Component2.vue 생성 : pinia를 컴포넌트에서 사용해보기
  ```
    <template>
      <div>
        <h1>Components2</h1>
        <p>Count: {{ count }}</p>
        <button @click="increment">증가</button>
      </div>
    </template>

    <script setup>
    // 피니아 스토어의 사용
    // 1. useCounterStore, computed를 가져온다.
    import { useCounterStore } from '@/stores/counterStore'
    import { computed } from 'vue'
    // 2. useCounterStore를 통해 store를 가져온다.
    const counterStore = useCounterStore()
    // 3. count 변수(state)를 선언한다. store가 변경되면, 자동으로 count가 변경된다.
    const count = computed(() => counterStore.count)
    // 4. increment 함수(action)를 선언한다.
    const increment = counterStore.increment
    </script>
  ```

1. src/App.vue 수정 : 컴포넌트 호출하기
  ```
    <template>
      <Component1 v-if="toggle"/>
      <Component2 v-else />
      <button @click="toggle = !toggle">컴포넌트 변경</button>
    </template>

    <script setup lang="ts">
    import { ref } from 'vue'
    import Component1 from '@/components/Component1.vue'
    import Component2 from '@/components/Component2.vue'

    const toggle = ref(true)
    </script>

    <style scoped>
    </style>
  ```

1. 테스트 : 수정한 카운트 값이 타 컴포넌트에도 유지되는지 확인
  $ cd app1
  $ npm run dev
