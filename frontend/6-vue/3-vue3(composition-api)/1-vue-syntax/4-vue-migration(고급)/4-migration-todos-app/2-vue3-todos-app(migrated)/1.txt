[Todo App : Vue2에서 Vue3로 마이그레이션하기]

1. 사전준비: 프로젝트를 새로 깔지 않고, 이전 챕터에서의 1-vue2-movie-app 코드를 그대로 카피해서 가지고 온다.

1. package.json 수정
  아래의 vue2 코드를 수정해야 한다.
  ```
    {
      "name": "app1",
      "version": "0.1.0",
      "private": true,
      "scripts": {
        "serve": "vue-cli-service serve",
        "build": "vue-cli-service build",
        "lint": "vue-cli-service lint"
      },
      "dependencies": {
        "core-js": "^3.8.3",
        "vue": "^2.6.14"
      },
      "devDependencies": {
        "@babel/core": "^7.12.16",
        "@babel/eslint-parser": "^7.12.16",
        "@vue/cli-plugin-babel": "~5.0.0",
        "@vue/cli-plugin-eslint": "~5.0.0",
        "@vue/cli-service": "~5.0.0",
        "eslint": "^7.32.0",
        "eslint-plugin-vue": "^8.0.3",
        "vue-template-compiler": "^2.6.14"
      },
      "eslintConfig": {
        "root": true,
        "env": {
          "node": true
        },
        "extends": [
          "plugin:vue/essential",
          "eslint:recommended"
        ],
        "parserOptions": {
          "parser": "@babel/eslint-parser"
        },
        "rules": {}
      },
      "browserslist": [
        "> 1%",
        "last 2 versions",
        "not dead"
      ]
    }
  ```
  $ vue create app1
  위 cli를 사용하여 vue3 프로젝트를 새로 만들고, 해당 package.json을 그대로 가져와서,
  vue3 코드와 같은 형식으로 수정한다.
  ```
    // Vue 3.x
    {
      "name": "app1",
      "version": "0.1.0",
      "private": true,
      "scripts": {
        "dev": "vue-cli-service serve",
        "build": "vue-cli-service build",
        "lint": "vue-cli-service lint"
      },
      "dependencies": {
        "core-js": "^3.8.3",
        "vue": "^3.2.13"
      },
      "devDependencies": {
        "@babel/core": "^7.12.16",
        "@babel/eslint-parser": "^7.12.16",
        "@vue/cli-plugin-babel": "~5.0.0",
        "@vue/cli-plugin-eslint": "~5.0.0",
        "@vue/cli-service": "~5.0.0",
        "eslint": "^7.32.0",
        "eslint-plugin-vue": "^8.0.3"
      },
      "eslintConfig": {
        "root": true,
        "env": {
          "node": true
        },
        "extends": [
          "plugin:vue/vue3-essential",
          "eslint:recommended"
        ],
        "parserOptions": {
          "parser": "@babel/eslint-parser"
        },
        "rules": {}
      },
      "browserslist": [
        "> 1%",
        "last 2 versions",
        "not dead",
        "not ie 11"
      ]
    }
  ```

1. package.json 바뀐 점에 대한 상세 설명
  Vue.js 버전:
    Vue.js 버전이 "^2.6.14"로 지정되어 있다가, 아래 코드에서는 Vue.js 버전이 "^3.2.13"로 업데이트되었다.
  eslintConfig 확장 설정: 
    기존에는 eslintConfig의 extends 항목에 "plugin:vue/essential"을 사용하여 Vue.js와 관련된 ESLint 규칙을 확장하고 있었다.
    새 코드에서는 extends 항목이 "plugin:vue/vue3-essential"으로 변경된다. 이것은 Vue 3에 맞춘 새로운 Vue.js 규칙을 사용하도록 설정한 것이다.
  Browserslist 설정:
    기존에는 Browserslist 설정에 "> 1%", "last 2 versions", "not dead"만 있었다.
    새 코드에서는 추가로 "not ie 11"이 포함되었습니다. 이것은 Internet Explorer 11을 지원하지 않겠다는 것을 나타낸다.

1. package.json 재설치
  기존의 node_modules 폴더 삭제
  기존의 package-lock.json 파일 삭제
  $ npm install

1. src/main.js 수정
  아래의 vue2 코드를 아래의 vue3 코드와 같은 형식으로 수정한다.
  * 실무의 경우에는 GPT에게 "아래 vue2 코드를 vue3 코드로 바꿔줘"라고 부탁하여 바꾸면 된다.
  ```
    // Vue 2.x
    import Vue from 'vue'
    import App from './App.vue'

    Vue.config.productionTip = false

    new Vue({
      render: h => h(App),
    }).$mount('#app')
  ```
  이런 형태가 되는지 확인한다.
  ```
    // Vue 3.x
    import { createApp } from 'vue'
    import App from './App.vue'

    createApp(App).mount('#app')
  ```

1. src/App.vue 수정
  아래의 vue2 코드를 아래의 vue3 코드와 같은 형식으로 수정한다.
  * 실무의 경우에는 GPT에게 "아래 vue2 코드를 vue3 코드로 바꿔줘. <script setup> 넣어서 간결하게 해라." 라고 부탁하여 바꾸면 된다.
  ```
    // Vue 2.x
    <template>
      <div>
        <button @click="onClick">Toggle</button>
        <div v-if="isOpen">
          <TodoApp />
        </div>
      </div>
    </template>
    
    <script>
    import TodoApp from './components/TodoApp.vue'
    
    export default {
      name: 'App',
      components: {
        TodoApp
      },
      data() {
        return {
          isOpen: false
        }
      },
      methods: {
        onClick() {
          this.isOpen = !this.isOpen
        }
      }
    }
    </script>
  ```
  이런 형태가 되는지 확인한다.
  ```
    // Vue 3.x
    <template>
      <div>
        <button @click="toggle">Toggle</button>
        <div v-if="isOpen">
          <TodoApp />
        </div>
      </div>
    </template>

    <script setup>
    import { ref } from 'vue';
    import TodoApp from './components/TodoApp.vue';

    const isOpen = ref(false);

    function toggle() {
      isOpen.value = !isOpen.value;
    }
    </script>
  ```

1. src/components/TodoApp.vue 수정
  아래의 vue2 코드를 아래의 vue3 코드와 같은 형식으로 수정한다.
  * 실무의 경우에는 GPT에게 "아래 vue2 코드를 vue3 코드로 바꿔줘. <script setup> 넣어서 간결하게 해라." 라고 부탁하여 바꾸면 된다.
  ```
    // Vue 2.x
    <template>
      <div>
        <div>
          <input type="text" v-model="title" />
          <button @click="onAdd">ADD</button>
        </div>
        <div v-for="todo in todos" :key="todo.id">
          <span @click="onDone(todo.id)">
            <span># {{ todo.id }} / </span>
            <span>{{ todo.title }} / </span>
            <span>{{ todo.completed ? 'O' : 'X' }} </span>        
          </span>
          <button @click="onDelete(todo.id)">DEL</button>
        </div>
      </div>
    </template>
    
    <script>
    export default {
      data() {
        return {
          todos: [],
          title: '',
          newTodoId: 0
        }
      },
    
      // count가 필요 없다면 이 메소드들을 제거
      methods: {
        onDone(id) {
          this.todos.map(item => {
            if (item.id === id) {
              item.completed = !item.completed
            }
            return item
          })
        },
        onDelete(id) {
          this.todos = this.todos.filter(item => item.id !== id)
        },
        onAdd(title) {
          this.newTodoId = this.newTodoId + 1
          this.todos.push({
            id: this.newTodoId,
            title: this.title,
            completed: false
          })
          this.title = ''
        }
      },
    
      created() {
        fetch('https://jsonplaceholder.typicode.com/todos')
          .then(res => res.json())
          .then(json => {
            // userId가 1인 것만(= 로그인된 사용자의 것만) 가져옴
            this.todos = json.filter(item => item.userId === 1)
            this.newTodoId = this.todos.length
            console.log(this.todos)
          })
      },
      mounted() {
        console.log(`更新された！`)
      },
      updated() {
        console.log(`成長した！`)
      },
      destroyed() {
        console.log(`死んだ！`)
      },
    }
    </script>
  ```
  이런 형태가 되는지 확인한다.
  ```
    // Vue 3.x
    <template>
      <div>
        <div>
          <input type="text" v-model="title" />
          <button @click="onAdd">ADD</button>
        </div>
        <div v-for="todo in todos" :key="todo.id">
          <span @click="onDone(todo.id)">
            <span># {{ todo.id }} / </span>
            <span>{{ todo.title }} / </span>
            <span>{{ todo.completed ? 'O' : 'X' }}{{ ' ' }}</span>        
          </span>
          <button @click="onDelete(todo.id)">DEL</button>
        </div>
      </div>
    </template>
    
    <script setup>
    import { ref, onMounted, onUpdated, onBeforeUnmount } from 'vue';
    
    const todos = ref([]);
    const title = ref('');
    let newTodoId = 0;
    
    const onDone = (id) => {
      todos.value = todos.value.map(item => {
        if (item.id === id) {
          item.completed = !item.completed;
        }
        return item;
      });
    };
    
    const onDelete = (id) => {
      todos.value = todos.value.filter(item => item.id !== id);
    };
    
    const onAdd = () => {
      newTodoId++;
      todos.value.push({
        id: newTodoId,
        title: title.value,
        completed: false
      });
      title.value = '';
    };
    
    onMounted(() => {
      fetch('https://jsonplaceholder.typicode.com/todos')
        .then(res => res.json())
        .then(json => {
          todos.value = json.filter(item => item.userId === 1);
          newTodoId = todos.value.length;
          console.log(todos.value);
        });
    });
    
    onUpdated(() => {
      console.log(`成長した！`);
    });
    
    onBeforeUnmount(() => {
      console.log(`死んだ！`);
    });
    </script>
  ```



[번외편: Reactive를 사용한 TodoAppReactive.vue]

1. src/components/TodoAppReactive.vue 생성
  무비앱을 할 때는 하지 않았지만... 투두앱은 CRUD도 있으므로 여기서 종합적으로 다뤄보고자 한다.
  Reactive를 사용한 todos 배열은 이런 느낌이라는 것을 인지해두자.
  먼저, Reactive를 사용하면 다음과 같은 변화가 생긴다.
    - todos.value를 쓰지 않는다.
    - todos = sth 과 같이 대입을 쓸 수 없다. (대입은 ref만 가능)
      CRUD의 경우에, forEach, findIndex, filter, map등을 적절히 사용하여 그 뒤에 push나 splice로 처리해야한다.
      때문에 코드의 난이도가 좀 올라갈 수 있다.
    - todos.push() 등을 쓸 수 있게 된다. (배열이나 객체의 프로토타입 함수는 reactive만 가능)
      물론, ref를 썼을 때에는 todos.value.push()도 가능하다.
  결론: 실장 난이도가 급상승하므로, 간단한 배열이 아니라 API 호출 후 JSON 형태의 리턴값을 받아오는 배열, 객체라면 ref를 써서 간단하게 처리해도 된다.
  ```
    <template>
      <div>
        <div>
          <input type="text" v-model="title" />
          <button @click="onAdd">ADD</button>
        </div>
        <div v-for="todo in todos" :key="todo.id">
          <span @click="onDone(todo.id)">
            <span># {{ todo.id }} / </span>
            <span>{{ todo.title }} / </span>
            <span>{{ todo.completed ? 'O' : 'X' }}{{ ' ' }}</span>        
          </span>
          <button @click="onDelete(todo.id)">DEL</button>
        </div>
      </div>
    </template>

    <script setup>
    import { reactive, ref, onMounted, onUpdated, onBeforeUnmount } from 'vue';

    const todos = reactive([]);
    const title = ref('');
    let newTodoId = 0;

    const onDone = (id) => {
      todos.forEach(item => {
        if (item.id === id) {
          item.completed = !item.completed;
        }
      });
    };

    const onDelete = (id) => {
      const index = todos.findIndex(item => item.id === id);
      if (index !== -1) {
        todos.splice(index, 1);
      }
    };

    const onAdd = () => {
      newTodoId++;
      todos.push({
        id: newTodoId,
        title: title.value,
        completed: false
      });
      title.value = '';
    };

    onMounted(() => {
      fetch('https://jsonplaceholder.typicode.com/todos')
        .then(res => res.json())
        .then(json => {
          const todosData = json.filter(item => item.userId === 1);
          todosData.forEach(item => {
            todos.push({
              id: item.id,
              title: item.title,
              completed: item.completed
            });
          });
          newTodoId = todos.length;
          console.log(todos);
        });
    });

    onUpdated(() => {
      console.log(`成長した！`);
    });

    onBeforeUnmount(() => {
      console.log(`死んだ！`);
    });
    </script>
  ```

1. src/App.vue 수정
  ```
    <template>
      <div>
        <button @click="toggle">Toggle</button>
        <div v-if="isOpen">
          <!-- <TodoApp /> -->
          <TodoAppReactive />
        </div>
      </div>
    </template>

    <script setup>
    import { ref } from 'vue';
    // import TodoApp from './components/TodoApp.vue';
    import TodoAppReactive from './components/TodoAppReactive.vue';

    const isOpen = ref(false);

    function toggle() {
      isOpen.value = !isOpen.value;
    }
    </script>
  ```

1. 테스트
  $ cd app1
  $ npm run dev
