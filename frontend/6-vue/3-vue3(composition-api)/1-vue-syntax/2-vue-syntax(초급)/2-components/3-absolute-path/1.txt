[절대경로 alias 설정]

1. 사전준비: 프로젝트를 새로 깔지 않고, 이전 챕터에서의 코드를 그대로 카피해서 가지고 온다.

1. 상대경로 vs 절대경로
  상대경로(Relative Path) : 현재 위치를 기준으로 한 상대적인 경로
    ./ : 현재 디렉토리
    ../ : 상위 디렉토리
    ../../ : 상위의 상위 디렉토리
  절대경로(Absolute Path) : 최상위 디렉토리(= 루트 디렉토리)부터 시작하는 전체 경로
    @/ : 루트 디렉토리 (@를 alias로 설정해야함)
    / : 루트 디렉토리 (''를 alias로 설정해야함)
    * vue에서는 보통 src를 루트 디렉토리로 설정해놓음

1. 절대경로는 설정하는 것의 장점
  임포트시에 ./ ../ 등 폴더의 현 위치를 신경쓰지 않아도 되서 좋다.
  폴더의 위치가 바뀌어도 임포트 경로를 수정할 필요가 없다.

1. vite.config.js 수정 (또는 vue.config.js 수정)
  절대경로를 사용하기 위해 "resolve 옵션을 추가해서" 루트 디렉토리 설정
  ```
    import { defineConfig } from 'vite'
    import vue from '@vitejs/plugin-vue'
    import path from 'path'

    export default defineConfig({
      plugins: [vue()],
      resolve: {
        alias: {
          '@': path.resolve(__dirname, 'src'),
        },
      },
    })
  ```

1. src/App.vue 수정 : 자식컴포넌트 호출부를 절대경로로 변경
  import 부분에 "@를 써서", src로부터의 절대경로로 변경
  ```
    <template>
      <HelloWorld :id=1 msg="Hello" username="vue" mark="!" :secondary="false" hover @click="click()" />
      <HelloWorld :id=2 msg="Hi" secondary />
      <GlobalHelloWorld msg="Vue3" />
    </template>

    <script setup lang="ts">
    import HelloWorld from '@/components/HelloWorld.vue'

    const click = () => {
      alert('clicked')
    }
    </script>

    <style scoped>
    </style>
  ```

1. src/main.ts 수정 : App.vue과 글로벌컴포넌트 호출부를 절대경로로 변경
  import 부분에 "@를 써서", src로부터의 절대경로로 변경
  ```
    import { createApp } from 'vue';
    import App from "@/App.vue";
    import GlobalHelloWorld from "@/components/GlobalHelloWorld.vue";

    const app = createApp(App)

    app.component('GlobalHelloWorld', GlobalHelloWorld)
    app.mount('#app');
  ```

1. 테스트
  $ cd app1
  $ npm run dev
