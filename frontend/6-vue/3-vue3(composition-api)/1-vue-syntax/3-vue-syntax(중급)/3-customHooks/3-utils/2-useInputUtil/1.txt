[Utils: useInputUtil]

1. 사전준비: 프로젝트를 새로 깔지 않고, 이전 챕터에서의 코드를 그대로 카피해서 가지고 온다.

1. src/utils/useInputUtil.js 작성 : Input창의 value와 onChange를 관리하고, validation 에러를 검출하여 표시하는 커스텀훅 만들기
  ```
    import { ref } from "vue"

    export function useInputUtil(initialValue = "", options = {}) {
      const value = ref(initialValue)
      const error = ref(null)
    
      const {
        maxLength = 100,
        minLength = 0,
        required = false,
        noSpecialChars = false,
      } = options
    
      const validate = (newValue) => {
        if (required && !newValue) {
          error.value = "이 항목은 필수입니다."
          return false
        }
        if (newValue.length > maxLength) {
          error.value = `${maxLength}자 이상으로 입력할 수 없습니다.`
          return false
        }
        if (newValue.length < minLength) {
          error.value = `${minLength}자 미만으로 입력할 수 없습니다.`
          return false
        }
        if (noSpecialChars && /[^a-zA-Z0-9]/.test(newValue)) {
          error.value = "특수문자를 입력할 수 없습니다."
          return false
        }
        error.value = null
        return true
      }
    
      const onChange = (event) => {
        const newValue = event.target.value
        if (validate(newValue)) {
          value.value = newValue
        }
      }
    
      return {
        value,
        error,
        onChange,
      }
    }
  ```

1. src/components/LoginInput.vue 수정 : useInputUtil을 import하고 사용해보기
  ```
    <template>
      <div>
        <form @submit.prevent="handleSubmit">
          <input
            type="text"
            placeholder="username"
            :value="username"
            @input="onUsernameInputChange"
            required
          />
          <input
            type="password"
            placeholder="password"
            :value="password"
            @input="onPasswordInputChange"
            required
          />
          <button type="submit">Login</button>
        </form>
        <!-- 발리데이션 에러시의 메시지 처리 -->
        <p v-if="usernameError" style="color: red">{{ usernameError }}</p>
        <p v-if="passwordError" style="color: red">{{ passwordError }}</p>
      </div>
    </template>

    <script setup>
    import { ref } from "vue"
    import { useInputUtil } from "@/utils/useInputUtil"

    // Hooks
    // username 발리데이션 : 5자 이상, 15자 이하, 필수, 특수문자 불가
    const usernameUtil = useInputUtil("", {
      minLength: 5,
      maxLength: 15,
      required: true,
      noSpecialChars: true,
    })
    // password 발리데이션 : 8자 이상, 20자 이하, 필수
    const passwordUtil = useInputUtil("", {
      minLength: 8,
      maxLength: 20,
      required: true,
    })

    const username = ref(usernameUtil.value)
    const usernameError = ref(usernameUtil.error)
    const handleUsernameChange = usernameUtil.onChange

    const password = ref(passwordUtil.value)
    const passwordError = ref(passwordUtil.error)
    const handlePasswordChange = passwordUtil.onChange

    const onUsernameInputChange = (event) => {
      username.value = event.target.value
      handleUsernameChange(event)
    }

    const onPasswordInputChange = (event) => {
      password.value = event.target.value
      handlePasswordChange(event)
    }

    const handleSubmit = () => {
      if (!usernameError.value && !passwordError.value) {
        alert("TODO: 콘솔로그 데이터로 제출 로직을 호출")
        // 제출 로직 추가
        console.log("Form submitted:", {
          username: username.value,
          password: password.value,
        })
      } else {
        alert("데이터 에러 발생!")
        console.log("Validation errors exist:", {
          usernameError: usernameError.value,
          passwordError: passwordError.value,
        })
      }
    }
    </script>
  ```

1. 테스트
  $ cd app1
  $ npm run dev
