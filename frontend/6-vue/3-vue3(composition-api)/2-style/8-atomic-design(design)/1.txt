[Vue3 / Nuxt3 아토믹디자인 설계]

1. 아토믹디자인 설계
  - 아토믹디자인은 디자인 시스템을 구축하는 방법론 중 하나로, 디자인 요소들을 다섯 가지의 단계로 분류하여 관리하는 방법론이다.
  - 아토믹디자인 단계
    Atoms: 가장 작은 단위의 요소들로, 버튼, 입력 필드, 라벨 등과 같은 기본적인 UI 요소들이다.
    Molecules: Atom들을 조합하여 만들어진 좀 더 복잡한 UI 요소들로, 검색 바, 카드 등이 이에 해당한다.
    Organisms: Molecule들을 조합하여 만들어진 더 큰 규모의 UI 요소들로, 헤더, 푸터, 사이드바 등이 이에 해당한다.
    Templates: 페이지의 전체적인 구조를 정의하는 컴포넌트들로, 여러 Organism들을 조합하여 만들어진다.
    Pages: 실제 페이지 컴포넌트들로, Nuxt.js의 경우 pages/ 디렉토리에 위치한다.
  - 아토믹디자인 장점
    재사용성: 각 요소들을 재사용 가능한 단위로 분리하여 관리할 수 있다.
    유지보수성: 각 요소들을 독립적으로 관리하므로, 수정이 필요할 때 해당 요소만 수정하면 된다.
    일관성: 디자인 시스템을 구축하면서 일관된 디자인을 유지할 수 있다.
    확장성: 요소들을 조합하여 다양한 형태의 디자인을 만들 수 있다.
  - 아토믹디자인 단점
    아토믹 디자인을 적용할 때 UI 설계가 명확해야 하며, 복합 컴포넌트를 나누는 기준을 정확히 설정하지 않으면,
    개발자간 미스커뮤니케이션으로 오히려 컴포넌트의 수가 늘어나 혼란을 야기하고, 관리가 어려워질 수 있다.
    재사용되는 로직 중 하나에서 에러가 발생하면 다른 컴포넌트에 전부 영향을 미칠 수 있다. (이를 막고자 그 대안으로 불릿프루프 설계를 도입하기도 한다.)

1. 폴더 구조
  src/
  ├── components/ (재사용 가능한 모든 컴포넌트)
  │   ├── atoms/ (버튼, 입력 필드, 라벨 등 기본 UI 컴포넌트)
  │   ├── molecules/ (검색 바, 카드 등 atom들의 조합으로 이루어진 좀 더 복잡한 컴포넌트)
  │   ├── organisms/ (헤더, 푸터, 사이드바 등 더 큰 규모의 컴포넌트)
  │   └── templates/ (페이지의 전체적인 구조를 정의하는 컴포넌트)
  ├── views/ (실제 페이지 컴포넌트 ※ Nuxt.js의 경우 pages/로 사용)
  ├── layouts/ (전체 애플리케이션의 레이아웃을 정의하는 컴포넌트)
  ├── assets/ (SCSS, 폰트, 이미지 등의 정적 파일)
  ├── router/ (라우터 설정)
  ├── store/ (Vuex 또는 Pinia 상태관리파일 설정)
  └── utils/ (범용 유틸리티 함수)

  * 추가적으로, 프로젝트의 규모와 복잡성에 따라 다음과 같은 폴더들을 추가할 수 있다.
  src/
  │ ...
  ├── composables/ (재사용 가능한 use~ 컴포지션 훅 함수)
  ├── services/ (API 호출 등의 서비스 로직)
  ├── constants/ (상수)
  └── types/ (TypeScript 타입 정의 파일)
