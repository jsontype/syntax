[Roles 조회하기 : Apollo Client 설정하고 시작]

1. 사전준비: server 앱을 켜둔다.
1. 사전준비: 프로젝트를 새로 깔지 않고, 이전 챕터에서의 코드를 그대로 카피해서 가지고 온다.

1. Apollo Client란?
  Apollo Server와 클라이언트를 연결하는 라이브러리이다.
  이것을 통해서 BFF Server와 연결을 시킬 수 있고, GraphQL을 통해 DB에 접근할 수 있게 해준다.

1. 설치
  $ cd app1
  $ npm install vue-apollo apollo-boost graphql-tag



1. src/main.js 수정 : ApolloServer와 연결하기 위해, ApolloClient 객체를 만든 뒤, ApolloProvider를 App에 제공하기
  import Vue from "vue"
  import App from "./App.vue"
  import router from "./router"
  import store from "./store"

  // BFF
  import { ApolloClient } from "apollo-client"
  import { HttpLink } from "apollo-link-http"
  import { InMemoryCache } from "apollo-cache-inmemory"
  import VueApollo from "vue-apollo"

  Vue.use(VueApollo)

  // GraphQL 서버의 URL 지정
  const httpLink = new HttpLink({
    uri: "http://localhost:4000/",
  })

  // Apollo client 생성
  const apolloClient = new ApolloClient({
    link: httpLink,
    cache: new InMemoryCache(),
  })

  // Apollo provider 생성
  const apolloProvider = new VueApollo({
    defaultClient: apolloClient,
  })

  Vue.config.productionTip = false

  new Vue({
    router,
    store,
    provide: apolloProvider.provide(),
    render: (h) => h(App),
  }).$mount("#app")



1. src/views/Roles.vue 수정 : GraphQL 서버로부터 목록 받아와 표시하기 위한 준비하기
  <template>
    <div id="roles" class="component">
      <aside>
        <ul>
          <li
            v-for="role in roles"
            :key="role.id"
            :class="['roleItem', contentId === role.id ? 'on' : '']"
            @click="selectRole(role.id)"
          >
            <span>{{ contentId === role.id ? "🔲" : "⬛" }}</span>{{ roleIcons[role.id] }} {{ role.id }}
          </li>
        </ul>
      </aside>
      <section class="contents">
        <div v-if="loading" class="loading">Loading...</div>
        <div v-if="error" class="error">Error :(</div>
        <div v-else-if="selectedRole" class="roleWrapper">
          <h2>{{ selectedRole.id }}</h2>
          <div class="requirement">
            <span>{{ selectedRole.requirement }}</span> required
          </div>
          <h3>Members</h3>
          <ul>
            <li v-for="member in selectedRole.members" :key="member.id">
              {{ member.last_name }}
            </li>
          </ul>
          <h3>Equipments</h3>
          <ul>
            <li v-for="equipment in selectedRole.equipments" :key="equipment.id">
              {{ equipment.id }}
            </li>
          </ul>
          <h3>Softwares</h3>
          <ul>
            <li v-for="software in selectedRole.softwares" :key="software.id">
              {{ software.id }}
            </li>
          </ul>
        </div>
        <div v-else class="roleWrapper">Select Role</div>
      </section>
    </div>
  </template>

  <script>
  import ApolloClient from "apollo-boost"
  import gql from "graphql-tag"

  const client = new ApolloClient({
    uri: "http://localhost:4000/", // GraphQL API 주소
  })

  const GET_ROLES = gql`
    query GetRoles {
      roles {
        id
      }
    }
  `

  const GET_ROLE = gql`
    query GetRole($id: ID!) {
      role(id: $id) {
        id
        requirement
        members {
          id
          last_name
        }
        equipments {
          id
        }
        softwares {
          id
        }
      }
    }
  `

  export default {
    data() {
      return {
        contentId: null,
        loading: false,
        error: null,
        roles: [],
        selectedRole: null,
        roleIcons: {
          developer: "💻",
          designer: "🎨",
          planner: "📝",
        },
      }
    },
    created() {
      this.loadRoles()
    },
    methods: {
      async loadRoles() {
        this.loading = true
        try {
          const { data } = await client.query({ query: GET_ROLES })
          this.roles = data.roles
        } catch (error) {
          this.error = error
        } finally {
          this.loading = false
        }
      },
      async selectRole(id) {
        this.contentId = id
        this.loading = true
        try {
          const { data } = await client.query({
            query: GET_ROLE,
            variables: { id },
          })
          this.selectedRole = data.role
        } catch (error) {
          this.error = error
        } finally {
          this.loading = false
        }
      },
    },
  }
  </script>



1. 테스트 : Roles 화면에서 사이드바와 컨텐츠 부분이 잘 표시되는지 확인
  BFF server 앱 켜져있는지 확인하고, 꺼져있다면 npm start로 실행시켜두고 시작한다.
  $ cd app1
  $ npm start
  http://localhost:8080
  상단의 Roles 메뉴 클릭
  사이드바와 컨텐츠 부분이 잘 표시되는지 확인
