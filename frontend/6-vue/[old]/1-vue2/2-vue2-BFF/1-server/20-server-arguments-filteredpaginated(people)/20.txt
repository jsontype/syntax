[페이지로 나누고 필터링까지 해서 받아오기]

1. 사전준비 : 프로젝트를 새로 깔지 않고, 이전 챕터에서의 코드를 그대로 카피해서 가지고 온다.



1. typedefs-resolvers/_queries.js 수정 : 필터링과 페이지네이션을 함께 필터링해주는 peopleFilteredPaginated 쿼리 타입 지정
  const { gql } = require("apollo-server")

  const typeDefs = gql`
    type Query {
      equipments: [Equipment]
      supplies: [Supply]
      equipmentAdvs: [EquipmentAdv]
      softwares: [Software]
      software: Software
      givens: [Given]
      people: [People]
      person: People
      peopleFiltered(
        team: Int
        sex: Sex
        blood_type: BloodType
        from: String
      ): [People]
      peoplePaginated(page: Int!, per_page: Int!): [People]
      peopleFilteredPaginated(
        team: Int
        sex: Sex
        blood_type: BloodType
        from: String
        page: Int!
        per_page: Int!
      ): [People]
    }
  `

  module.exports = typeDefs



1. typedefs-resolvers/people.js 수정 : 필터링과 페이지네이션을 동시에 해주는 peopleFilteredPaginated 액션함수의 resolver 추가
  const { gql } = require("apollo-server")
  const dbWorks = require("../dbWorks.js")

  const typeDefs = gql`
    type People {
      id: ID!
      first_name: String!
      last_name: String!
      sex: Sex!
      blood_type: BloodType!
      serve_years: Int!
      role: Role!
      team: ID!
      from: String!
      tools: [Tool]
      givens: [Given]
    }
  `

  const resolvers = {
    Query: {
      people: (parent, args) => dbWorks.getPeople(args),
      person: (parent, args) => dbWorks.getPeople(args)[0],
      peopleFiltered: (parent, args) => dbWorks.getPeople(args),
      peoplePaginated: (parent, args) => dbWorks.getPeople(args),
      peopleFilteredPaginated: (parent, args) => dbWorks.getPeople(args),
    },
  }

  module.exports = {
    typeDefs: typeDefs,
    resolvers: resolvers,
  }



1. 테스트
  $ cd app1
  $ npm start
  http://localhost:4000/ 접속 : GraphQL Playground가 열린다.
  GraphQL Playground 사용 : 좌측에 다음 쿼리를 넣고 Run을 클릭
    query {
      peopleFilteredPaginated(team: 2, page: 1, per_page: 7) {
        id
        first_name
        last_name
        sex
        blood_type
        serve_years
        role
        team
        from
      }
    }
  2번째 team에 해당하는 팀원들중, 첫번째 page에 해당하는 7개의 people만 취득되었는지 확인한다.
  위 파라미터쪽에 `blood_type: A` 또는 `from: "Texas"`를 추가하는 등 여러가지로 바꿔보면서 필터링이 여전히 잘 되는지 확인한다.
  GraphQL Playground 사용 : 좌측에 다음 쿼리를 넣고 Run을 클릭
    query {
      badGuys: peopleFiltered(sex: male, blood_type: B) {
        first_name
        last_name
        sex
        blood_type
      }
      newYorkers: peopleFiltered(from: "New York") {
        first_name
        last_name
        from
      }
    }
  이렇게 별칭으로도 받아올 수 있다.
  별칭으로도 제대로 받아와지는지 확인한다.
