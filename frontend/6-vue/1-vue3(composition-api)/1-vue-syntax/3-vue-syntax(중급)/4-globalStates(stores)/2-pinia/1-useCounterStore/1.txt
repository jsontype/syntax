[Pinia Stores: useCounterStore]

1. 사전준비: 프로젝트를 새로 깔지 않고, 3-customHooks/3-utils/2-useInputUtil 에서의 코드를 그대로 카피해서 가지고 온다.

1. useCounterStore 같은 훅들을 composables에 놓지 않고, stores 폴더를 따로 나누는 이유
  composables에 모두 몰아서 넣으면 로직이 헷갈리므로, 
  Vuex, Pinia 등의 라이브러리를 사용해 store를 제어하는 훅스는 
  stores에 넣고 쓰기도 한다. (Store 내부 데이터의 get, set 로직 등)

1. 설치
  $ npm i pinia

1. src/stores/counter/useCounterStore.js 작성 : 스토어 모듈 (실제 스토어를 조작 및 관리)
  import { defineStore } from 'pinia'

  export const useCounterStore = defineStore('counter', {
    state: () => ({
      count: 0,
    }),
    actions: {
      increase() {
        this.count++
      },
      decrease() {
        this.count--
      },
    },
    getters: {
      getCount: (state) => state.count,
    },
  })

1. src/stores/index.js 작성 : Pinia 스토어 설정 파일
  import { createPinia } from 'pinia'

  const pinia = createPinia()

  export default pinia

1. src/main.js 수정 : main.ts를 .js로 바꾸고, pinia를 Vue 앱에 등록
  import { createApp } from "vue"
  import App from "./App.vue"
  import router from "./router"
  import pinia from "./stores"

  const app = createApp(App)

  app.use(router)
  app.use(pinia)
  app.mount("#app")

1. tsconfig.json 수정 : "include"에 "src/**/*.js"를 추가 (main.ts를 .js로 바꿨기 때문에 해야하는 대응)
  {
    "compilerOptions": {
      "target": "ES2020",
      "useDefineForClassFields": true,
      "module": "ESNext",
      "lib": ["ES2020", "DOM", "DOM.Iterable"],
      "skipLibCheck": true,

      /* Bundler mode */
      "moduleResolution": "bundler",
      "allowImportingTsExtensions": true,
      "resolveJsonModule": true,
      "isolatedModules": true,
      "noEmit": true,
      "jsx": "preserve",

      /* Linting */
      "strict": true,
      "noUnusedLocals": true,
      "noUnusedParameters": true,
      "noFallthroughCasesInSwitch": true
    },
    "include": ["src/**/*.js", "src/**/*.ts", "src/**/*.tsx", "src/**/*.vue"],
    "references": [{ "path": "./tsconfig.node.json" }]
  }

1. app1/index.js 수정 : src="/src/main.js"로 변경 (main.ts를 .js로 바꿨기 때문에 해야하는 대응)
  <!DOCTYPE html>
  <html lang="en">
    <head>
      <meta charset="UTF-8" />
      <link rel="icon" type="image/svg+xml" href="/vite.svg" />
      <meta name="viewport" content="width=device-width, initial-scale=1.0" />
      <title>Vite + Vue + TS</title>
    </head>
    <body>
      <div id="app"></div>
      <script type="module" src="/src/main.js"></script>
    </body>
  </html>

1. src/composables/useCounter.js 수정 : 스토어 값을 변경하는 로직 만들기
  import { useCounterStore } from "@/stores/counter/useCounterStore"

  export function useCounter() {
    const counterStore = useCounterStore()

    const increase = () => counterStore.increase()
    const decrease = () => counterStore.decrease()

    return { increase, decrease }
  }

1. src/views/Counter.vue 수정 : 로직을 use~, 스테이트를 use~Store 에서 꺼내어 사용하도록 변경
  <template>
    <h1>Counter App</h1>
    <div>
      <h2>카운트: {{ counterStore.count }}</h2>
      <button @click="counter.increase">+</button>
      <button @click="counter.decrease">-</button>
    </div>
  </template>

  <script setup>
  import { useCounter } from "@/composables/useCounter"
  import { useCounterStore } from "@/stores/counter/useCounterStore"

  // Hooks
  const counterStore = useCounterStore()
  const counter = useCounter()
  </script>

1. src/views/Home.vue 수정 : 스테이트를 use~Store 에서 꺼내어 사용하도록 변경
  <template>
    <div>
      <h1>Home</h1>
      <p>현재 날짜: {{ formattedDate }}</p>
      <p>현재 카운트: {{ counterStore.count }}</p>
    </div>
  </template>

  <script setup>
  import { ref, onMounted } from "vue"
  import { useDateUtil } from "@/utils/useDateUtil"
  import { useCounterStore } from "@/stores/counter/useCounterStore"

  // Hooks
  const dateUtil = useDateUtil()
  const counterStore = useCounterStore()

  // Variables
  const formattedDate = ref("")

  // Lifecycle Hooks
  onMounted(() => {
    formattedDate.value = dateUtil.formatDate(dateUtil.currentDate.value)
  })
  </script>

1. 테스트
  $ cd app1
  $ npm run dev
