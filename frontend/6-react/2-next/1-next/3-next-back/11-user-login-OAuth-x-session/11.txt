[로그인 OAuth + Session]

"유저 -O- 서버 -O- DB"

1. 로그인 정보 취득에 Session을 사용하는 이유
  Next-auth 라이브러리를 사용하면 기본적으로 모든 방식이 JWT이다.
  유저 세션데이터를 DB에 저장해두지 않고 JWT만 유저에게 보내고
  유저가 로그인이 필요한 페이지 방문시 유저가 제출한 JWT만 검사해서 입장시켜주는 방식이다.
  이 JWT를 사용하면 로그인 구현은 쉬워지는데
  JWT방식의 단점이 마음에 안든다면, session 방식으로 회원기능을 만들 수 있고, 그러려면 DB adapter 기능을 쓰면 된다.
    - JWT 단점 : 
      JWT Token의 길이가 길어, 인증 요청이 많아질수록 사용자의 네트워크 부하가 심해질 수 있다. 
      Payload 자체는 암호화되지 않기 때문에 중요한 정보를 담을 수 없다. 
      토큰을 탈취당하면 대처하기 어렵고, 특정 토큰을 강제 만료하기 어렵다.
  그러나 Session을 사용하면 결국 DB를 꺼내어 쓰게 되므로 호스트의 서버 과부하를 방지한다는 JWT의 큰 장점이 사라지기도 하는 점 참고해야 한다.  

1. 로그인 정보 취득에 Session을 사용할 때의 흐름
  첫 로그인 시 자동회원가입
  이를 DB에 보관 (이름 / 이메일 / 유효기간 등)
  서버에서 로그인된 유저정보가 필요하면, JWT Token이 아니라 DB에서 Session 정보를 조회해서 가져온다.
  로그아웃시 유저 세션정보는 DB에서 삭제된다.
  
1. 설치
  $ cd app1
  $ npm i @next-auth/mongodb-adapter
  * 만일 설치하다가 에러가 나는 경우, 다음 순서대로 재설치하면 된다. ($ npm uninstall mongodb -> $ npm install mongodb@4 -> $ npm install @next-auth/mongodb-adapter)

1. src/pages/api/auth/[...nextauth].js 수정 : 상단에서 MongoDBAdapter라는 함수랑 여러분의 DB접속용 코드를 import해서 저기에 집어넣어주면 됩니다.  그럼 session 방식으로 회원기능 만들기 끝입니다. 
  import NextAuth from "next-auth"
  import GithubProvider from "next-auth/providers/github"
  // 1. MongoDBAdapter와 connectDB 함수를 추가한다.
  import { MongoDBAdapter } from "@next-auth/mongodb-adapter"
  import { connectDB } from "@/app/api/connectDB"

  export const authOptions = {
    providers: [
      GithubProvider({
        clientId: "Next Back 용 clientId!",
        clientSecret: "Next Back 용 clientSecret!",
      }),
    ],
    secret: "Next Back 용 secret!",
    // 2. adapter 키의 밸류에 MongoDBAdapter(connectDB)를 추가한다.
    adapter: MongoDBAdapter(connectDB),
  }

  export default NextAuth(authOptions)

1. 중간테스트
  $ cd app1
  $ npm run dev
  http://localhost:3000
  깃허브로 로그인해보기 : 처음 로그인시에는 깃허브에서 권한을 요청하고, 승인할 경우 자동 가입이 된다.

1. DB에 저장된 세션정보 확인
  로그인이 성공적으로 된 것을 확인 후,
  mongodb.com에서 로그인 후 Browse Collections 클릭해서 DB 확인해보자.
  로그인을 했다면, DB에 다음과 같은 항목이 추가된 것을 볼 수 있다.
  - test : 세션을 이용하기 위해 새로 생성된 DB의 이름이다. 그 아래에는 다음과 같은 collections가 들어있다.
    - accounts : "현재 가입된 유저들의 계정"들이 보관되어 있다. users가 있는데 이게 또 있는 이유는, 하나의 유저는 여러개의 계정을 가질 수 있기 때문이다.
      예를 들면, 한 가입한 유저의 Github 계정 이메일은 test@gmail.com 이라 하면, 
      Google 계정 이메일도 test@gmail.com 이런 식으로 복수의 계정이 설정되어 있을 수 있는 것이다.
      이런 복수 계정들을 모두 표현해준다.
    - sessions : "현재 로그인된 유저"의 세션정보를 저장해둔다.
      expires : 언제까지 로그인되어 있을지의 정보이다.
    - users : "현재 가입된 유저들의 정보"들이 들어있다. 현재는 OAuth(소셜로그인)을 쓰고 있기 때문에, 비밀번호는 들어있지 않을 것이다.
      users 컬렉션은 accounts와 다르게, 하나의 document 밖에 들어있지 않다.
      한명이 여러개의 소셜로그인으로 다수 가입을 했어도, test@gmail.com 이메일을 가진 유저가 가입되어 있다라고만 나와있을 것이다.
      이런 복수 계정이 있어도, 사용한 이메일을 기준으로 유저 1명당 1개만 표현해준다.
      (이메일이 같으면 같은 유저로 간주한다.)



1. src/pages/api/bbs/write.js 수정 : 글 작성할 때, 글쓴이 정보도 같이 저장하도록 수정
  import { connectDB } from "@/app/api/connectDB"
  // 3. 글쓴이 정보를 넣기 위해 session 정보를 사용해야 하고, 이를 사용하도록 하기 위해 getServerSession과 authOptions를 추가해야 한다.
  import { getServerSession } from "next-auth"
  import { authOptions } from "../auth/[...nextauth]"

  export default async function handler(req, res) {
    // 4. 세션을 받아온다.
    const session = await getServerSession(req, res, authOptions)
    // console.log(session?.user?.email) // 확인용
    // 5. request body의 writer(글쓴이) 키값에 세션에 있는 유저 정보를 넣어둔다.
    if (session?.user?.email) {
      req.body.writer = session.user.email
    }

    if (req.method == "POST") {
      if (req.body.title == "") {
        return res.status(500).json("제목은 필수입니다.")
      }
      try {
        const db = (await connectDB).db("db1")
        await db.collection("bbs1").insertOne(req.body)
        return res.redirect(302, "/bbs")
      } catch (e) {
        console.log(e)
      }
    }
  }



1. src/app/layout.js 수정 : 기존 주석 삭제, console.log 삭제
1. src/app/LoginBtn.js 수정 : 기존 주석 삭제
1. src/app/LogoutBtn.js 수정 : 기존 주석 삭제



1. 테스트
  $ cd app1
  $ npm run dev
  http://localhost:3000/bbs
  새 글을 쓴다.
  mongodb.com 접속
  Browse Collections 클릭
  좌측 익스플로러에서 db1안의 bbs1 클릭
  새로 쓴 글에 writer 항목에 로그인된 깃허브 이메일이 들어가 있는 것을 확인
