[MongoDB 상세페이지]

1. 사전준비 : 프로젝트를 새로 깔지 않고, 이전 챕터에서의 코드를 그대로 카피해서 가지고 온다.

1. src/app/bbs/bbsDetail/[id]/page.js 생성 : detail/[id] 페이지를 접속했을 때 해당 id 글의 상세페이지를 각각 보여주도록 한다.
  // DB상의 _id에는 단순 string 값이 아닌 _id: ObjectId('6450863eddd0d9ea6f2236c7')의 형태가 들어가기 때문에 ObjectId 클래스를 import 해서 써줘야 한다.
  import { ObjectId } from "mongodb"
  import { connectDB } from "@/app/api/connectDB"

  export default async function Detail(props) {
    const db = (await connectDB).db("db1")
    // props.params = 유저가 주소창에 localhost:3000/detail 뒤에 입력한 값
    const result = await db
      .collection("bbs1")
      // ObjectId 클래스를 사용해서 _id 객체를 생성: '6450863eddd0d9ea6f2236c7'를 ObjectId('6450863eddd0d9ea6f2236c7') 의 형태로 변환
      .findOne({ _id: new ObjectId(props.params.id) })

    return (
      <div>
        <h4>상세페이지</h4>
        <h4>{result.title}</h4>
        <p>{result.content}</p>
      </div>
    )
  }

1. src/app/bbs/page.js 생성 : Link를 통해 글 제목을 클릭했을 때 상세페이지로 이동하도록 하기
  import { connectDB } from "@/app/api/connectDB"
  import Link from "next/link"

  export default async function BBS() {
    const db = (await connectDB).db("db1")
    const result = await db.collection("bbs1").find().toArray()

    const render = result.map((item) => {
      return (
        <div className="list-item" key={item._id}>
          <h4>
            제목: <Link href={`/bbs/detail/${item._id}`}>{item.title}</Link>
          </h4>
          <p>내용: {item.content}</p>
        </div>
      )
    })

    return <div className="list-bg">{render}</div>
  }

1. src/app/globals.css 수정
  /* Global */
  .list-bg {
    background: rgb(249, 250, 255);
    padding: 10px;
  }
  .list-item {
    background: white;
    border-radius: 10px;
    padding: 20px;
    margin-bottom: 5px;
    box-shadow: rgb(224, 224, 224) 0px 2px 4px 0px;
  }
  .list-item h4 {
    font-size: 20px;
    font-weight: 800;
    margin: 0;
  }
  .list-item p {
    color: grey;
    margin : 5px 0px;
  }

1. 테스트
  $ cd app1
  $ npm run dev
  http://localhost:3000/bbs
