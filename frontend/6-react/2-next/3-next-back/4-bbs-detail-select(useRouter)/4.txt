[MongoDB 라우터]

1. 사전준비 : 프로젝트를 새로 깔지 않고, 이전 챕터에서의 코드를 그대로 카피해서 가지고 온다.

1. useRouter
  이번에는 보다 더 나은 루팅방식인 useRouter를 통한 방식으로 페이지 이동방법을 변경하도록 하겠다.

1. src/app/bbs/Move.js 생성 : useRouter를 통해 버튼을 누르면 특정페이지로 이동하도록 하기
  "use client"

  import { useRouter } from "next/navigation"

  export default function Move({ url, title }) {
    const router = useRouter()
    // ★★ "next/navigation"에서 제공하는 다른 Hooks들
    // const a = usePathname() // 현재의 url을 출력한다.
    // const a = useParams() // 현재의 params(path, 예를 들면 /bbs)를 출력한다.
    // const a = useSearchParams() // 현재의 search params(query, 예를 들면 ?id=1)를 출력한다.
    // console.log(a)

    return (
      <button
        onClick={() => {
          router.push(url) // 해당 url로 이동
          // ★★ "next/navigation"에서 제공하는 useRouter Hooks에서 제공하는 push 외의 다른 함수들
          // router.back() // 뒤로 이동
          // router.front() // 앞으로 이동
          // router.refresh() // 새로 고침
        }}
      >
        {title}
      </button>
    )
  }


1. src/app/bbs/page.js 수정 : Move 클라이언트 컴포넌트를 불러와서 그 버튼을 누르면 상세페이지로 이동하도록 하기
  import { connectDB } from "@/app/api/connectDB"
  // import Link from "next/link"
  import Move from "./Move"

  export default async function BBS() {
    const db = (await connectDB).db("db1")
    const result = await db.collection("bbs1").find().toArray()

    const render = result.map((item) => {
      return (
        <div className="list-item" key={item._id}>
          <h4>
            제목: {item.title}{" "}
            <Move url={`/bbs/detail/${item._id}`} title="자세히 보기" />
          </h4>
          <p>내용: {item.content}</p>
        </div>
      )
    })

    return <div className="list-bg">{render}</div>
  }

1. 테스트
  $ cd app1
  $ npm run dev
  http://localhost:3000/bbs
