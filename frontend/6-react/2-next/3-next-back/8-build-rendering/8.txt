[최적화: Static Rendering, Dynamic Rendering]

1. 사전준비 : 프로젝트를 새로 깔지 않고, 이전 챕터에서의 코드를 그대로 카피해서 가지고 온다.

1. 프로젝트 배포하기
  $ cd app1
  $ npm run build
  npm run build 하면 html 페이지들을 만들어주면서 페이지마다 좌측에 λ(람다) 표시 or ○ 표시가 나온다.
  ○ Static rendering (기본값) : 서버 불필요 페이지, 빠름
    npm run build 입력하면 html 페이지들을 만들어준다음,
    이를 유저가 접속할 때 마다 그걸 그대로 보내준다.
    페이지 안에 별 기능이 없어서 매번 html 페이지를 새로 만들 필요가 없으니까 그냥 그대로 보내는 것이고,
    이 경우 매우 빠르게 페이지 전송이 가능하다.
    (유저가 100명 들어와도 페이지를 새로 만들지 않음)
  λ Dynamic rendering : 서버(fetch(), useSearchParams(), cookies(), headers(), [dynamic route])를 사용하면 자동으로 설정됨, 느림
    유저가 페이지 접속시 html에 변동사항이 들어가야하기 때문에 서버에서 html 페이지를 다시 만들어서 보내준다.
    (유저가 100명 들어오면 페이지를 100번 만들어서 보내줌)

1. Static rendering / Dynamic rendering 강제로 바꾸기
  npm run build 후의 페이지 렌더링 방식 목록을 보면, 
  bbs가 ○ "Static rendering" 으로 되어 있는데, bbs는 글 목록이기 때문에 db에서 불러오는 데이터가 계속 바뀌니까,
  λ "Dynamic rendering" 으로 바꿔줘야 한다.
  바꾸는 방법은, 다음의 변수를 페이지에 추가하면 된다.  
  export const dynamic = 'force-dynamic' 넣으면 Dynamic rendering을 해주고 
  export const dynamic = 'force-static' 넣으면 Static rendering을 해준다.
  'auto' 넣으면 자동으로 알아서 판단해준다. (디폴트)

1. src/app/bbs/page.js 수정 : export const dynamic = 'force-dynamic' 추가
  import { connectDB } from "@/app/api/connectDB"
  import Move from "./Move"
  import MoveDelete from "./MoveDelete"

  export const dynamic = "force-dynamic"

  export default async function BBS() {
    const db = (await connectDB).db("db1")
    const result = await db.collection("bbs1").find().toArray()

    const render = result.map((item) => {
      return (
        <div className="list-item" key={item._id}>
          <h4>
            제목: {item.title}{" "}
            <Move url={`/bbs/detail/${item._id}`} title="자세히 보기" />
          </h4>
          <p>
            내용: {item.content}{" "}
            <Move url={`/bbs/edit/${item._id}`} title="수정" />{" "}
            {/* String(item._id): _id가 string이 아니고 ObjectId의 형태로 DB에 들어가있기 때문에 백틱이 아닌 쌩으로 넣을때는 string 캐스팅이 필수 */}
            <MoveDelete id={String(item._id)} title="삭제" />
          </p>
        </div>
      )
    })

    return (
      <>
        <div>
          <Move url={`/bbs/write`} title="등록" />
        </div>
        <div className="list-bg">{render}</div>
      </>
    )
  }

1. 테스트
  $ cd app1
  $ npm run build
  bbs 페이지가 λ "Dynamic rendering" 으로 빌드되었는지 확인해보기

1. 결론
  배포 전에 npm run build를 할 때, 페이지들이 Dynamic rendering / Static rendering으로 원하는대로 동작중인지 잘 살펴보면 좋다. 
  (참고) 최상위 layout.js에서 회원기능에서 배울 getServerSession() 쓰면 모든 페이지가 아마 λ 일 수 있다.
