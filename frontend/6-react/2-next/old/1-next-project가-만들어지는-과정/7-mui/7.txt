[MUI(Material UI) 적용하기]

1. MUI, Emotion 설치
  $ npm install --save @emotion/react @emotion/styled @mui/icons-material @mui/material

1. theme.tsx 생성 : MUI 테마 설정하기
  import { createTheme } from '@mui/material/styles'

  export const theme = createTheme({
    palette: {
      primary: {
        main: '#ff8e88',
      },
    },
  })

1. pages/_app.tsx 수정 : 생성한 테마를 Next.js 프로젝트에 적용하기
  import '@/styles/globals.css'
  import type { AppProps } from 'next/app'
  // 1. MUI 임포트
  import { ThemeProvider } from '@mui/material'
  // 2. 작성한 MUI 테마 임포트
  import { theme } from '../theme'

  export default function App({ Component, pageProps }: AppProps) {
    return (
      // 3. ThemeProvider로 Component 감싸기
      <ThemeProvider theme={theme}>
        <Component {...pageProps} />
      </ThemeProvider>
    )
  }

1. pages/index.tsx 수정 : MUI 컴포넌트 추가하기
  import Head from 'next/head'
  import Image from 'next/image'
  import { Inter } from '@next/font/google'
  import styles from '@/styles/Home.module.css'
  import useTranslation from 'next-translate/useTranslation'
  // 4. MUI 컴포넌트 Stack, Button 임포트
  import { Stack, Button } from '@mui/material'

  const inter = Inter({ subsets: ['latin'] })

  export default function Home() {
    const { t } = useTranslation()

    return (
      <>
        <Head>
          <title>Create Next App</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <div className={styles.container}>
          <main className={styles.main}>
            <h2>{t('common:Japanese')}</h2>
            <h2>{t('common:English')}</h2>
            <h2>{t('common:Korean')}</h2>

            {/* 5. MUI 컴포넌트 Stack, Button 사용 */}
            <Stack spacing={2} direction="row">
              <Button variant="text">Text</Button>
              <Button variant="contained">Contained</Button>
              <Button variant="outlined">Outlined</Button>
            </Stack>
          </main>
        </div>
      </>
    )
  }

1. 테스트 : 화면상에 MUI 컴포넌트가 잘 적용되는지 테스트
  $ cd app1
  $ npm run build // 필수
  $ npm start

1. .storybook/main.js 수정 : MUI와 똑같이 Storybook도 Emotion에 의존하므로 기능 끄기
  * 하단의 framework, features를 추가하여 Storybook에서 Emotion을 끈다.
  module.exports = {
    framework: '@storybook/react',
    features: {
      emotionAlias: false,
    },
    stories: [
      '../stories/**/*.stories.mdx',
      '../stories/**/*.stories.@(js|jsx|ts|tsx)',
    ],
    addons: [
      '@storybook/addon-links',
      '@storybook/addon-essentials',
      '@storybook/addon-interactions',
    ],
    framework: '@storybook/react',
    core: {
      builder: '@storybook/builder-webpack5',
    },
  }

1. .storybook/preview.js 파일명 변경 -> .storybook/preview.tsx로 변경

1. .storybook/preview.tsx 수정 : Storybook에 MUI 테마를 적용하기
  // 6. React를 임포트
  import React from 'react'
  // 7. 화면과 동일하게 하기위해 ThemeProvider, theme 임포트
  import { ThemeProvider } from '@mui/material'
  import { theme } from '../theme'

  // 8. Storybook에 MUI 테마를 적용하기
  export const decorators = [
    (Story) => (
      <ThemeProvider theme={theme}>
        <Story />
      </ThemeProvider>
    ),
  ]

  export const parameters = {
    actions: { argTypesRegex: '^on[A-Z].*' },
    controls: {
      matchers: {
        color: /(background|color)$/i,
        date: /Date$/,
      },
    },
    backgrounds: {
      default: 'gray',
      values: [
        {
          name: 'gray',
          value: '#F3F5FB',
        },
        {
          name: 'white',
          value: '#FFFFFF',
        },
        {
          name: 'black',
          value: '#000000',
        },
        {
          name: 'blue',
          value: '#2E48A0',
        },
      ],
    },
  }

1. stories/SampleButton.tsx 생성
  import { Button } from '@mui/material'

  interface Props {
    readonly color?: 'primary' | 'secondary' | undefined
    readonly backgroundColor?: string
    readonly size?: 'small' | 'medium' | 'large'
    readonly label: string
    readonly onClick?: () => void
  }

  export const SampleButton = ({
    color = 'primary',
    size = 'medium',
    label,
    onClick,
  }: Props) => {
    return (
      <Button variant="contained" color={color} size={size} onClick={onClick}>
        {label}
      </Button>
    )
  }

1. stories/SampleButton.stories.tsx 생성
  import React from 'react'
  import { ComponentStory, ComponentMeta } from '@storybook/react'

  import { SampleButton } from './SampleButton'

  export default {
    title: 'Example/SampleButton',
    component: SampleButton,
  } as ComponentMeta<typeof SampleButton>

  const Template: ComponentStory<typeof SampleButton> = (args) => (
    <SampleButton {...args} />
  )

  export const Primary = Template.bind({})
  Primary.args = {
    color: 'primary',
    label: 'Button',
  }

  export const Secondary = Template.bind({})
  Secondary.args = {
    color: 'secondary',
    label: 'Button',
  }

  export const Large = Template.bind({})
  Large.args = {
    size: 'large',
    label: 'Button',
  }

  export const Small = Template.bind({})
  Small.args = {
    size: 'small',
    label: 'Button',
  }

1. 테스트 : 스토리북에서 SampleButton 항목이 제대로 동작하는지 확인 
  $ cd app1
  $ npm run build
  $ npm run storybook
  http://localhost:6006

1. 과제 : MUI 하나씩 써서 UI를 완성시켜나가보기
  https://mui.com 참조
