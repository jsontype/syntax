[Redux-logger와 DevTools를 함께 사용해서 객체와 상태를 로깅하는 미들웨어 간단히 만들기]

1. 설치
    $ cd app1
    $ npm i redux-logger : redux-logger를 설치한다.
    $ npm i redux-devtools-extension : devTools를 설치한다. (skip)
    $ 웹스토어 설치 : redux-devtools-extension (쓸때만) (skip)


    
1. src/index.js 수정
    import React from 'react'
    import ReactDOM from 'react-dom'
    import App from './App'
    // 미들웨어를 적용하는 함수 applyMiddleware를 redux로부터 임포트한다.
    import { createStore, applyMiddleware } from 'redux'
    import { Provider } from 'react-redux'
    import rootReducer from './modules'
    import logger from 'redux-logger'
    import { composeWithDevTools } from 'redux-devtools-extension'

    // 스토어에 applyMiddleware를 넣어서 미들웨어를 적용한다.
    const store = createStore(
        // 1. 루트리듀서 적용 : 한개의 루트리듀서를 적용한다.
        rootReducer,

        // 2. 미들웨어 적용 : applyMiddleware(미들웨어함수)를 스토어에 넣으면 적용할 수 있다.
        // applyMiddleware(logger) // 여기서 logger는 직접 만든 미들웨어가 아니라, Redux-logger 라이브러리에서 가져온 미들웨어 함수이다.

        // 3. 미들웨어에 데브툴즈 적용 : applyMiddleware(미들웨어함수)를 composeWithDevTools로 감싸면 해당 미들웨어에 DevTools를 적용할 수 있다.
        composeWithDevTools(applyMiddleware(logger))

        // 4. 미들웨어 추가 가능 : 이 밑으로, 여러개의 미들웨어를 추가 적용할 수도 있다.
        // composeWithDevTools(applyMiddleware(다른 미들웨어함수))
    )

    ReactDOM.render(
        <Provider store={store}>
            <App />
        </Provider>,
        document.getElementById('root')
    )



1. src/middlewares 폴더 삭제
    redux-logger로 구현을 했기 때문에, 직접 만든 미들웨어는 이제 불필요하므로 삭제해준다.



1. 테스트 : console탭에서 redux-logger가 잘 작동하여 (콘솔로그에) 출력되는지, redux탭에서 devTools가 잘 작동하여 출력되는지 각각 확인
    $ cd app1
    $ npm start
