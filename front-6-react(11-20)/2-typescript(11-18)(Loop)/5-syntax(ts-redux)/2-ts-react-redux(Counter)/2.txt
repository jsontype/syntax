[useReducer로 선언한 State의 데이터타입 관리하기 - Counter 컴포넌트 편]

1. src/modules/counter.ts
    카운터 리덕스 모듈 작성하기
    가장 간단한 예시인 카운터를 구현해보도록 하겠습니다. 
    우리는 리덕스 관련 코드를 작성할 때 Ducks 패턴을 사용 할 것입니다. 
    즉, 액션타입, 액션생성함수, 리듀서를 모두 한 파일에 작성하겠다는 의미이죠.
    src 디렉터리에 modules 디렉터리를 만들고, 그 안에 counter.ts 파일을 작성하세요.
    각 코드에 대한 정보가 주석에 적혀있으니 주석 하나하나 꼼꼼히 읽어보세요.
    모듈을 모두 작성하셨나요?

1. src/modules/index.ts
    프로젝트에 리덕스 적용하기
    이제 프로젝트에 리덕스를 적용해주겠습니다.
    지금은 모듈이 하나 뿐이지만 우리가 추후 하나 더 만들 것이므로 루트 리듀서를 만들어주도록 하겠습니다.

    modules 디렉터리에 index.ts 파일을 만들어주세요.

    그 다음에는, index.tsx 에서 스토어를 만들고, Provider 컴포넌트를 사용하여 스토어를 프로젝트에 적용하세요.
    이제 프로젝트에 리덕스를 사용하기 위한 준비가 모두 끝났습니다.

1. src/components/Counter.tsx
    카운터 프리젠테이셔널 컴포넌트 만들기
    src 디렉터리에 components 디렉터리를 생성하고, 그 안에 Counter.tsx 파일을 만드세요. 리액트 컴포넌트를 작성 할 때에는 .tsx 확장자를 사용한다는것 주의하세요.
    컴포넌트에서 필요한 값과 함수들을 모두 props 로 받아오게 했습니다.

1. src/containers/CounterContainer.tsx
    카운터 컨테이너 컴포넌트 만들기
    그럼 이제 리덕스의 값을 불러와서 사용하고, 액션도 디스패치를 하는 컨테이너 컴포넌트를 만들어볼까요?

    src 디렉터리에 containers 디렉터리를 만들어서 그 안에 CounterContainer.tsx 파일을 작성해보세요.

    꽤나 간단하죠? 신경 쓸 부분은 useSelector((state: RootState) => state.counter.count); 가 전부입니다.
    count 값의 타입은 useSelector 가 알아서 유추해주니 굳이 :number 라고 타입을 설정 할 필요 없습니다.

1. src/App.tsx
    그럼 이제 잘 작동하는지 확인해볼까요?
    App 에서 CounterContainer 를 렌더링하고, yarn start 를 입력하여 개발 서버를 구동하세요.

1. 테스트
    $ cd app1
    $ npm start
