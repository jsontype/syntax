[Redux로 선언한 State의 데이터타입 관리하기 - Todos 컴포넌트 편]

투두리스트 리덕스 모듈 만들기
자, 그 다음에는 할 일 목록 (투두리스트)를 구현해봅시다. 

1. src/modules/todos.ts
먼저 리덕스 모듈부터 준비해줄게요. 아까 작성했던 카운터 모듈이랑 별반 다를 것 없습니다. 그냥 배열을 다룰 뿐이죠.
모듈을 다 만드셨으면 루트 리듀서에 todos 리듀서를 등록하세요.

1. src/modules/index.ts
모듈을 다 만드셨으면 루트 리듀서에 todos 리듀서를 등록하세요.

1. src/components/TodoInsert.tsx
투두리스트를 위한 프리젠테이셔널 컴포넌트 준비하기
이제 투두리스트를 구현하기 위한 프리젠테이셔널 컴포넌트들을 준비해주겠습니다. 우리가 앞으로 만들 프리젠테이셔널 컴포넌트는 총 3개입니다.

TodoInsert: 새 항목을 등록하는 용도
TodoItem: 할 일 정보을 보여주는 용도
TodoList: 여러개의 TodoItem 을 렌더링하는 용도
그럼, components 디렉터리에 하나 하나 작성해볼까요?

새 항목을 등록 할 수 있는 TodoInsert 컴포넌트를 만들어봅시다. 
이 컴포넌트에서는 onInsert 라는 props 를 받아와서 이 함수를 호출하여 새 항목을 추가하며, 
input 의 상태는 컴포넌트 내부에서 로컬 상태로 관리합니다.

1. src/components/TodoItem.tsx
TodoItem 컴포넌트는 각 할 일 항목에 대한 정보를 보여주는 컴포넌트이며, 텍스트 영역을 클릭하면 done 값이 바뀌고, 
우측의 (X) 를 클릭하면 항목이 삭제됩니다. 
이 컴포넌트에서는 할 일 정보를 지니고 있는 todo, 그리고 상태 토글 및 삭제를 해주는 함수 onToggle 과 onRemove 를 props 로 받아옵니다.

1. src/components/TodoList.tsx
이 컴포넌트는 여러개의 TodoItem 컴포넌트를 렌더링해줍니다. 
할 일 정보들을 지니고 있는 배열인 todos와 각 TodoItem 컴포넌트들에게 전달해줘야 할 onToggle 과 onRemove 를 props 로 받아옵니다.

이제 프리젠테이셔널 컴포넌트들의 준비는 끝났습니다.

1. src/containers/TodoApp.ts
투두리스트를 위한 컨테이너 컴포넌트 만들기
이번에는 투두리스트를 위한 컴포넌트를 작성할 차례입니다. 
컨테이너 컴포넌트의 이름은 TodoApp 으로 하겠습니다. containers 디렉터리에 TodoApp.tsx 를 다음과 같이 작성하세요.

1. src/App.tsx
정말 간단하지요? 이제 이 컴포넌트를 App 에서 렌더링해보세요.

1. 테스트
    $ cd app1
    $ npm start
