[Redux 모듈 만들기]

1. Redux 이미지로 이해하기
    https://zenn.dev/jojo/articles/25c10b27783093



1. index.js에서 다음 코드 삭제
    import './exercise';



1. (사전지식) Ducks 패턴에 대한 이해
    우리의 프로제트가 이런 식의 폴더 구조를 지니고 있다면, 
        actions
            index.js
        reducers
            todos.js
            visibilityFilter.js
            index.js
    즉, actions와 reducers가 다른 디렉토리에, 다른 파일로 분리되어 있으면
    개발을 하는데 꽤나 불편하다. 
    그래서, 리듀서와 액션 관련 코드들을 하나의 파일에 몰아서 작성할 수 있는데,
    이를 "Ducks 패턴"이라고 부른다.
    "Redux 모듈"을 생성하여 "Ducks 패턴"을 구현할 수 있다.



1. 모듈이란?
    "Redux 모듈"이란 다음 항목들이 모두 들어있는 자바스크립트 파일을 의미한다.
        "액션 타입"
        "액션 생성함수"
        "리듀서"



1. src/modules/counter.js 생성 : counter 모듈 만들기
    /* 액션 타입 만들기 */
    // Ducks 패턴을 따를땐 액션의 이름에 접두사를 넣어라.
    // 이렇게 하면 다른 모듈과 액션 이름이 중복되는 것을 방지할 수 있다.
    const SET_DIFF = 'counter/SET_DIFF'
    const INCREASE = 'counter/INCREASE'
    const DECREASE = 'counter/DECREASE'

    /* 액션 생성함수 만들기 */
    // 액션 생성함수를 만들고 export 키워드를 사용해서 내보낸다.
    export const setDiff = diff => ({ type: SET_DIFF, diff })
    export const increase = () => ({ type: INCREASE })
    export const decrease = () => ({ type: DECREASE })

    /* 초기 상태 선언 */
    const initialState = {
        number: 0,
        diff: 1
    }

    /* 리듀서 선언 */
    // 리듀서는 export default 로 내보낸다.
    export default function counter(state = initialState, action) {
        switch (action.type) {
            case SET_DIFF:
            return {
                ...state,
                diff: action.diff
            }
            case INCREASE:
            return {
                ...state,
                number: state.number + state.diff
            }
            case DECREASE:
            return {
                ...state,
                number: state.number - state.diff
            }
            default:
            return state;
        }
    }



1. src/modules/todos.js : todos 모듈 만들기
    /* 액션 타입 선언 */
    const ADD_TODO = 'todos/ADD_TODO'
    const TOGGLE_TODO = 'todos/TOGGLE_TODO'

    /* 액션 생성함수 선언 */
    // todo 데이터에서 사용 할 고유 키 값
    let nextId = 1

    export const addTodo = text => ({
        type: ADD_TODO,
        todo: {
            // 새 항목을 추가할 때마다, 키가 중복되지 않도록 nextId 값에 1을 더해준다.
            id: nextId++, 
            text
        }
    })
    export const toggleTodo = id => ({
        type: TOGGLE_TODO,
        id
    })

    /* 초기 상태 선언 */
    // 리듀서의 초기 상태가 꼭 객체타입일 필요는 없다.
    // 배열이여도 되고, 원시 타입(Number, String, Boolean) 이여도 상관없다.
    const initialState = [
    /* 
        여기서는 다음과 같은 형태의 객체를 이 배열 안에 넣을 것이다.
        {
            id: 1,
            text: '예시',
            done: false
        } 
    */
    ]

    export default function todos(state = initialState, action) {
        switch (action.type) {
            case ADD_TODO:
                return state.concat(action.todo);
            case TOGGLE_TODO:
                return state.map(
                    todo =>
                        // id가 일치하면, done을 토글링하고, 아니면 그대로 놔둔다.
                        todo.id === action.id
                            ? { ...todo, done: !todo.done }
                            : todo 
                )
                default:
            return state
        }
    }



1. React 프로젝트에 Redux 적용하기
    $ cd app1
    $ npm i redux
    $ npm i react-redux (= yarn add react-redux)



1. src/modules/index.js 생성 : 루트 리듀서 만들기
    import { combineReducers } from 'redux'
    import counter from './counter'
    import todos from './todos'

    /* 루트 리듀서를 사용해 리듀서 하나로 합치기 */
    // 현재 두가지(counter, todos)의 리덕스 모듈을 만들었으므로 파일도 두개, 리듀서도 두개이지만,
    // 한 프로젝트에 여러개의 리듀서가 있을때는 이를 하나의 "루트 리듀서"로 합쳐서 사용한다.
    // 리듀서를 합치는 작업은 리덕스에 내장되어있는 combineReducers라는 함수를 사용한다.
    const rootReducer = combineReducers({
        counter,
        todos
    })

    export default rootReducer
    // 이제 리듀서를 합친 루트 리듀서가 만들어졌다. 
    // 그 다음은 루트리듀서를 임포트하는 스토어를 만들어주면 된다.



1. src/index.js 수정 : 스토어 만들기
    import React from 'react'
    import ReactDOM from 'react-dom'
    import App from './App'
    import { createStore } from 'redux'
    import { Provider } from 'react-redux'
    // index.js를 임포트할 때는 파일명을 생략해도 된다.
    import rootReducer from './modules'

    /* 스토어 만들기 */
    const store = createStore(rootReducer)
    // 스토어의 state를 출력해보자.
    console.log(store.getState())
    // 브라우져의 콘솔창을 확인해보면, counter, todos 서브 리듀서의 상태가 합쳐져 있다.

    ReactDOM.render(
        // Provider로 store를 넣어서 App을 감싸게 되면(nesting 하면),
        // App 컴포넌트에 속한 모든 컴포넌트에서 리덕스 스토어에 접근 할 수 있게 된다.
        <Provider store={store}>
            <App />
        </Provider>,
        document.getElementById('root')
    )



1. 테스트 : 열었을 때 콘솔로그에 잘 출력되는 지 확인
    $ cd app1
    $ npm start



1. ★★ 요약 : Redux 스토어 만들기 (모루스프)
    모듈 만들기 (src/modules/*.js) : 액션타입 -> 액션생성함수 -> 초기상태 -> 리듀서 순으로 생성 (액액초리)
    루트리듀서 만들기 (src/modules/index.js)
    스토어 만들기 (src/index.js)
    프로바이더 컴포넌트로 App 컴포넌트 감싸기 (src/index.js)
