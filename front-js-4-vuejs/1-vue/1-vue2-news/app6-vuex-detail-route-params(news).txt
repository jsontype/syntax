[Router - params]
  * 라우터 파라미터를 통해서 타 뷰로 값을 보내는 방법



1. API 확인 : https://api.hnpwa.com/v0/item/30329752.json
  상단 주소의 30329752는 news의 id를 의미한다.

### 1. src/views/NewsView.vue 수정 ### : 뉴스 타이틀마다 상세페이지 링크 걸기

  {{ item.title }} 부분을 다음과 같이 변경 :
    <!-- API 주소 예시 : https://api.hnpwa.com/v0/item/30329752.json -->
    <router-link :to="`item/${item.id}`">{{ item.title }}</router-link>



### 1. src/routes/index.js에 추가 ### : 임포트, 루터를 추가

import ItemView from "../views/ItemView.vue"

,
        {
            path: '/item/:id',
            component: ItemView
        }



### 1. [Create ~ Dispatch] src/views/ItemView.vue 생성 ###

<template>
  <div>
    ItemView 페이지 <br>
    {{ this.$route.params.id }}
  </div>
</template>

<script>
export default {
  created () {
    // 핵심이 되는 부분. 다른 뷰쪽으로 route의 파라미터 id를 보낸다.
    this.$store.dispatch('FETCH_NEWS_DETAIL', this.$route.params.id)
  }
}
</script>



### 1. [Action ~ Commit] src/store/actions.js에 추가 ### : FETCH_NEWS_DETAIL 메소드 추가

,
    FETCH_NEWS_DETAIL ({ commit }, id) {
        axios.get(`https://api.hnpwa.com/v0/item/${id}.json`)
            .then((response) => {
                console.log(response.data)
                commit('SET_NEWS_DETAIL', response.data)
            })
    },



### 1. [Mutation] mutations.js에 추가 ### : SET_NEWS_DETAIL 메소드 추가

,
    SET_NEWS_DETAIL (state, payload) {
        state.newsDetail = payload
    }



### 1. [Store] src/store/index.js에 추가 ### : newsDetail 추가

export default new Vuex.Store({
    state: {
        news: [],
        ask: [],
        newsDetail: null
    },
    actions,
    mutations
})



### 1. [Store] src/views/ItemView.vue 수정 ### : 화면에 스토어 정보를 표시하도록 함

<template>
  <div>
    ItemView 페이지 <br>
    <div v-if="!newsDetail">Loading...</div>
    <div v-else>
      {{ newsDetail }}
    </div>
  </div>
</template>

<script>
export default {
  computed: {
    newsDetail () {
      console.log('this.$store.state.newsDetail: ', this.$store.state.newsDetail)
      return this.$store.state.newsDetail
    }
  },
  created () {
    this.$store.dispatch('FETCH_NEWS_DETAIL', this.$route.params.id)
  }
}
</script>



### 1. [화면] src/views/ItemView.vue 수정 ### : 화면에 표시될 정보 가공 (1차)

<template>
  <div>
    ItemView 페이지 <br>
    <div v-if="!newsDetail">Loading...</div>
    <div v-else>
      {{ newsDetail.id }}<br>
      {{ newsDetail.points }}<hr>
      {{ newsDetail.title }}
      <ul>
        <li
          v-for="item in newsDetail.comments"
          :key="item.id"
        >
          {{ item.user }}
          {{ item.content }}
        </li>
      </ul>
    </div>
  </div>
</template>



### 1. [화면] src/views/ItemView.vue 수정 ### : 화면에 표시될 정보 가공 (2차)

  {{ newsDetail.id }}<br>
  {{ newsDetail.points }}<br>
  {{ newsDetail.title }}

  위 줄을 다음과 같이 수정 :
  번호 {{ newsDetail.id }} /
  평점 {{ newsDetail.points }}점
  <hr>
  <h2>{{ newsDetail.title }}</h2>
  <hr>

  {{ item.user }}
  {{ item.content }}

  위 줄을 다음과 같이 수정 :
  ID: {{ item.user }}
  <span v-html="`${item.content}`" />



1. 최종 테스트
  npm run serve

1. 끝