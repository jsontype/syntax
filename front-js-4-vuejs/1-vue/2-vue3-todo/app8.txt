[Vuex로 스토어데이터 이용하기]
    Vuex란?
        스토어데이타를 쓰기 위한 것이 Vuex입니다.
            스토어데이타란?
                자식이 자식에게 계속 prop으로 데이터를 보내줘야할 때 스토어를 대신 사용하면,
                어느 컴포넌트에서 쓰더라도 그 데이터에 다이렉트하게 접근할 수 있는,
                일종의 Temp(임시)데이터입니다.
                "스토어는 복잡할 수록 엄청난 효과를 가집니다."

    작업순서
        1. app8 만들고 app7의 public, src폴더 덮어씌우기
        1. Home, About, HelloWorld.vue 삭제




[Vuex State]
    App.vue를 state로 옮겨서 관리해보도록 합시다.
    state:는 vue파일 안의 data:와 비슷합니다. 
    (바뀐) 데이터가 들어가는 부분입니다.

    작업순서
        1. App.vue # 부분 삭제
        1. store/index.js의 state:{}에 추가
        1. components/CompletedTodo.vue의 props 삭제, computed:에 todos() 추가
            computed:에 넣는 데이터는 값을 최신으로 유지시킵니다.
        1. components/TodoList.vue의 props 삭제, computed:에 todos() 추가




[Vuex Mutations]
    Vuex에서, state에 있는 데이터를 변경하고 싶으면,
    mutations 안에서 사용하는 것이 규칙입니다.

    작업순서   
        1. store/index.js의 mutate:{}에 추가
        1. App.vue
        1. components들 수정




[Vuex Actions]
    Actions는 주로 DB의 데이터와 스토어데이터를 동시에 갱신할 때,
    비동기로(병렬적으로) 작업을 처리해서 속도를 높이고자 할 때 사용합니다.
    먼저 DB로 보내는 일을 비동기로 작업을 시켜놓습니다.
    그리고나면 DB 갱신의 응답을 받을 때까지 시간이 걸리게 되는데,
    그것을 보내놓고 다른 작업을 이어나가게 해야 속도가 빠를 겁니다.
    그래서 DB의 갱신 요청은 비동기적으로(=병렬적으로) 보내놓고,
    "store안에 있는 데이터"(=state)를 같이 변경한 뒤에,
    DB의 갱신 요청이 완료가 됐을 때 그 때 스토어도 커밋을 해서 보내주게 되는 것입니다.

    작업순서
        1. npm install --save axios 로 axios 설치
        1. store/index.js의 actions:{}에 추가
        1. App.vue에 import axios하면서 메소드 추가
        1. components들 수정    




[Vuex Getters & Map Helper]

    Vuex Getters의 사용    
        1. CompletedTodo.vue
        1. store/index.js

    Map Helper의 사용
        1. UserList.vue

    실행테스트
        1. npm run serve로 화면상 동작 확인
        1. 디버깅모드로 전체 흐름 돌려보기




[참조]
깃허브 : https://github.com/kossiecoder/vue-todo/tree/26
가상DB : http://jsonplaceholder.typicode.com/
유투브 : https://www.youtube.com/watch?v=H25nKpY0Ur8&list=PLB7CpjPWqHOtYP7P_0Ls9XNed0NLvmkAh&index=26
