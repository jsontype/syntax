[react-async 라이브러리로 global request state 관리하기]

1. react-async을 도입하는 이유와 장점
    매번 프로젝트를 만들 때 마다 직접 요청 상태 관리를 위한 커스텀 Hook 을 만들기 귀찮기 때문에, 이 라이브러리를 사용할 수 있다.
        react-async는 지난 섹션에서 만들었던 useAsync와 비슷한 함수가 들어있는 라이브러리이다. 함수 이름도 useAsync와 같다.
        귀찮지 않다면 커스텀 Hook으로 만들어서 써도 된다. 언제나, 라이브러리 도입은 선택사항이다.
    react-async 라이브러리에는 많은 기능들이 내장되어 있다. 다 정말 쓸만하고, 사용하기에도 편하다.

1. react-async의 단점
    커스텀으로 할 경우, Hook의 옵션이 굉장히 간단하기 때문에, 이 측면에서는 직접 만드는 useAsync 커스텀 Hook이 더 편하기도 하다.
        watch 같은 것 대신에 deps 를 사용하기도 하고, 반환 값이 배열 형태이기 때문에 (리액트 자체 내장 Hook 과 사용성이 비슷하다는 측면에서) 더욱 Hook스럽다.
        반면에 react-async 의 useAsync는 옵션이 다양하고 (promiseFn, deferFn, watch, ...) 결과 값도 객체 안에 다양한 값이 들어있어서 (run, reload, ...) 
        헷갈릴 수 있는 단점이 있긴 하지만, 다양한 기능이 이미 내장되어있고 (예를 들어서 요청을 취소 할 수도 있다.)
        Hook을 직접 만들 필요 없이 바로 불러와서 사용 할 수 있는 측면에서는 정말 편하다.
    사용하기는 편하지만 커스토마이징이 어렵다.
        그러므로 커스텀 Hook의 작동방식을 완전히 이해했다면 직접 이것저것 수정할 수 있도록 직접 만든 useAsync를 쓰는 것이 큰 프로젝트에서도 더 좋다.
        반면, 작은 프로젝트이거나, 직접 만든 useAsync의 작동 방식이 조금 어렵게 느껴진다면 간단히 라이브러리로 설치해서 사용하는 것이 좋다.
    
1. react-async 사용법
    사용법이 조금 다르다. 커스텀 Hook은 결과물을 배열로 반환하는 반면, 이 Hook 은 객체 형태로 반한다.



[react-async 도입하기]

1. react-async 설치
    $ cd app1
    $ npm i react-async

1. src/User.js 수정 : User 컴포넌트의 커스텀 Hook의 useAsync를, react-async의 useAsync로 전환한다.
    import React from 'react'
    import axios from 'axios'
    // 1. react-async의 useAsync 함수를 임포트한다.
    import { useAsync } from 'react-async'

    async function getUser ({ id }) {
        const response = await axios.get(
            `https://jsonplaceholder.typicode.com/users/${id}`
        )
        return response.data
    }

    function User ({ id }) {
        // 2. 받는 타입을 배열에서 객체로 바꾸어야 한다.
        const { data: user, error, isLoading } = useAsync({
            promiseFn: getUser,
            id,
            watch: id
        })

        if (isLoading) return <div>로딩중..</div>
        if (error) return <div>에러가 발생했습니다</div>
        if (!user) return null

        return (
            <div>
                <h2>{user.username}</h2>
                <p>
                    <b>Email:</b> {user.email}
                </p>
            </div>
        )
    }

    export default User



1. src/Users.js 수정 : Users 컴포넌트의 커스텀 Hook의 useAsync를, react-async의 useAsync로 전환한다.
    import React, { useState } from 'react'
    import axios from 'axios'
    // 1. react-async의 useAsync 함수를 임포트한다.
    import { useAsync } from 'react-async'
    import User from './User'

    async function getUsers () {
        const response = await axios.get(
            'https://jsonplaceholder.typicode.com/users'
        )
        return response.data
    }

    function Users () {
        const [userId, setUserId] = useState(null)
        // 2. 받는 타입을 배열에서 객체로 바꾸어야 한다.
        const { data: users, error, isLoading, run } = useAsync({
            deferFn: getUsers
        })

        if (isLoading) return <div>로딩중..</div>
        if (error) return <div>에러가 발생했습니다</div>
        if (!users) return <button onClick={run}>불러오기</button>

        return (
            <>
                <ul>
                    {users.map(user => (
                        <li
                            key={user.id}
                            onClick={() => setUserId(user.id)}
                            style={{ cursor: 'pointer' }}
                        >
                            {user.username} ({user.name})
                        </li>
                    ))}
                </ul>
                <button onClick={run}>다시 불러오기</button>
                {userId && <User id={userId} />}
            </>
        )
    }

    export default Users



1. src/useAsync.js 삭제 : 이제 이 커스텀 Hook은 필요없으므로 삭제한다.



1. 테스트
    $ cd app1
    $ npm start
